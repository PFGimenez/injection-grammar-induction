# Grammar LEXER= None
# Grammar PARSER= parser
# Grammar GRAMMAR= grammar
# Grammar name:  ('token', 'MySqlParser')
<root> ;
# PARSER: root
<root_-_1> ::= ;
<root_-_1> ::= <sqlStatements>  ;
<root_-_2> ::= ;
<root_-_2> ::= <MINUSMINUS>  ;
<root> ::= <root_-_1>  <root_-_2>  <EOF>  ;
# PARSER: sqlStatements
<sqlStatements_-_1> ::= <sqlStatements_-_2>  ;
<sqlStatements_-_2> ::= ;
<sqlStatements_-_4> ::= ;
<sqlStatements_-_4> ::= <MINUSMINUS>  ;
<sqlStatements_-_5> ::= ;
<sqlStatements_-_5> ::= <SEMI>  ;
<sqlStatements_-_3> ::= <sqlStatement>  <sqlStatements_-_4>  <sqlStatements_-_5>  ;
<sqlStatements_-_3> ::= <emptyStatement>  ;
<sqlStatements_-_2> ::= <sqlStatements_-_3>  <sqlStatements_-_2>  ;
<sqlStatements_-_7> ::= ;
<sqlStatements_-_8> ::= ;
<sqlStatements_-_8> ::= <MINUSMINUS>  ;
<sqlStatements_-_7> ::= <sqlStatements_-_8>  <SEMI>  ;
<sqlStatements_-_6> ::= <sqlStatement>  <sqlStatements_-_7>  ;
<sqlStatements_-_6> ::= <emptyStatement>  ;
<sqlStatements> ::= <sqlStatements_-_1>  <sqlStatements_-_6>  ;
# PARSER: sqlStatement
<sqlStatement> ::= <ddlStatement>  ;
<sqlStatement> ::= <dmlStatement>  ;
<sqlStatement> ::= <transactionStatement>  ;
<sqlStatement> ::= <replicationStatement>  ;
<sqlStatement> ::= <preparedStatement>  ;
<sqlStatement> ::= <administrationStatement>  ;
<sqlStatement> ::= <utilityStatement>  ;
# PARSER: emptyStatement
<emptyStatement> ::= <SEMI>  ;
# PARSER: ddlStatement
<ddlStatement> ::= <createDatabase>  ;
<ddlStatement> ::= <createEvent>  ;
<ddlStatement> ::= <createIndex>  ;
<ddlStatement> ::= <createLogfileGroup>  ;
<ddlStatement> ::= <createProcedure>  ;
<ddlStatement> ::= <createFunction>  ;
<ddlStatement> ::= <createServer>  ;
<ddlStatement> ::= <createTable>  ;
<ddlStatement> ::= <createTablespaceInnodb>  ;
<ddlStatement> ::= <createTablespaceNdb>  ;
<ddlStatement> ::= <createTrigger>  ;
<ddlStatement> ::= <createView>  ;
<ddlStatement> ::= <alterDatabase>  ;
<ddlStatement> ::= <alterEvent>  ;
<ddlStatement> ::= <alterFunction>  ;
<ddlStatement> ::= <alterInstance>  ;
<ddlStatement> ::= <alterLogfileGroup>  ;
<ddlStatement> ::= <alterProcedure>  ;
<ddlStatement> ::= <alterServer>  ;
<ddlStatement> ::= <alterTable>  ;
<ddlStatement> ::= <alterTablespace>  ;
<ddlStatement> ::= <alterView>  ;
<ddlStatement> ::= <dropDatabase>  ;
<ddlStatement> ::= <dropEvent>  ;
<ddlStatement> ::= <dropIndex>  ;
<ddlStatement> ::= <dropLogfileGroup>  ;
<ddlStatement> ::= <dropProcedure>  ;
<ddlStatement> ::= <dropFunction>  ;
<ddlStatement> ::= <dropServer>  ;
<ddlStatement> ::= <dropTable>  ;
<ddlStatement> ::= <dropTablespace>  ;
<ddlStatement> ::= <dropTrigger>  ;
<ddlStatement> ::= <dropView>  ;
<ddlStatement> ::= <renameTable>  ;
<ddlStatement> ::= <truncateTable>  ;
# PARSER: dmlStatement
<dmlStatement> ::= <selectStatement>  ;
<dmlStatement> ::= <insertStatement>  ;
<dmlStatement> ::= <updateStatement>  ;
<dmlStatement> ::= <deleteStatement>  ;
<dmlStatement> ::= <replaceStatement>  ;
<dmlStatement> ::= <callStatement>  ;
<dmlStatement> ::= <loadDataStatement>  ;
<dmlStatement> ::= <loadXmlStatement>  ;
<dmlStatement> ::= <doStatement>  ;
<dmlStatement> ::= <handlerStatement>  ;
# PARSER: transactionStatement
<transactionStatement> ::= <startTransaction>  ;
<transactionStatement> ::= <beginWork>  ;
<transactionStatement> ::= <commitWork>  ;
<transactionStatement> ::= <rollbackWork>  ;
<transactionStatement> ::= <savepointStatement>  ;
<transactionStatement> ::= <rollbackStatement>  ;
<transactionStatement> ::= <releaseStatement>  ;
<transactionStatement> ::= <lockTables>  ;
<transactionStatement> ::= <unlockTables>  ;
# PARSER: replicationStatement
<replicationStatement> ::= <changeMaster>  ;
<replicationStatement> ::= <changeReplicationFilter>  ;
<replicationStatement> ::= <purgeBinaryLogs>  ;
<replicationStatement> ::= <resetMaster>  ;
<replicationStatement> ::= <resetSlave>  ;
<replicationStatement> ::= <startSlave>  ;
<replicationStatement> ::= <stopSlave>  ;
<replicationStatement> ::= <startGroupReplication>  ;
<replicationStatement> ::= <stopGroupReplication>  ;
<replicationStatement> ::= <xaStartTransaction>  ;
<replicationStatement> ::= <xaEndTransaction>  ;
<replicationStatement> ::= <xaPrepareStatement>  ;
<replicationStatement> ::= <xaCommitWork>  ;
<replicationStatement> ::= <xaRollbackWork>  ;
<replicationStatement> ::= <xaRecoverWork>  ;
# PARSER: preparedStatement
<preparedStatement> ::= <prepareStatement>  ;
<preparedStatement> ::= <executeStatement>  ;
<preparedStatement> ::= <deallocatePrepare>  ;
# PARSER: compoundStatement
<compoundStatement> ::= <blockStatement>  ;
<compoundStatement> ::= <caseStatement>  ;
<compoundStatement> ::= <ifStatement>  ;
<compoundStatement> ::= <leaveStatement>  ;
<compoundStatement> ::= <loopStatement>  ;
<compoundStatement> ::= <repeatStatement>  ;
<compoundStatement> ::= <whileStatement>  ;
<compoundStatement> ::= <iterateStatement>  ;
<compoundStatement> ::= <returnStatement>  ;
<compoundStatement> ::= <cursorStatement>  ;
# PARSER: administrationStatement
<administrationStatement> ::= <alterUser>  ;
<administrationStatement> ::= <createUser>  ;
<administrationStatement> ::= <dropUser>  ;
<administrationStatement> ::= <grantStatement>  ;
<administrationStatement> ::= <grantProxy>  ;
<administrationStatement> ::= <renameUser>  ;
<administrationStatement> ::= <revokeStatement>  ;
<administrationStatement> ::= <revokeProxy>  ;
<administrationStatement> ::= <analyzeTable>  ;
<administrationStatement> ::= <checkTable>  ;
<administrationStatement> ::= <checksumTable>  ;
<administrationStatement> ::= <optimizeTable>  ;
<administrationStatement> ::= <repairTable>  ;
<administrationStatement> ::= <createUdfunction>  ;
<administrationStatement> ::= <installPlugin>  ;
<administrationStatement> ::= <uninstallPlugin>  ;
<administrationStatement> ::= <setStatement>  ;
<administrationStatement> ::= <showStatement>  ;
<administrationStatement> ::= <binlogStatement>  ;
<administrationStatement> ::= <cacheIndexStatement>  ;
<administrationStatement> ::= <flushStatement>  ;
<administrationStatement> ::= <killStatement>  ;
<administrationStatement> ::= <loadIndexIntoCache>  ;
<administrationStatement> ::= <resetStatement>  ;
<administrationStatement> ::= <shutdownStatement>  ;
# PARSER: utilityStatement
<utilityStatement> ::= <simpleDescribeStatement>  ;
<utilityStatement> ::= <fullDescribeStatement>  ;
<utilityStatement> ::= <helpStatement>  ;
<utilityStatement> ::= <useStatement>  ;
<utilityStatement> ::= <signalStatement>  ;
<utilityStatement> ::= <resignalStatement>  ;
<utilityStatement> ::= <diagnosticsStatement>  ;
# PARSER: createDatabase
<createDatabase_-_1> ::= <DATABASE>  ;
<createDatabase_-_1> ::= <SCHEMA>  ;
<createDatabase_-_2> ::= ;
<createDatabase_-_2> ::= <ifNotExists>  ;
<createDatabase_-_3> ::= <createDatabase_-_4>  ;
<createDatabase_-_4> ::= ;
<createDatabase_-_4> ::= <createDatabaseOption>  <createDatabase_-_4>  ;
<createDatabase> ::= <CREATE>  <createDatabase_-_1>  <createDatabase_-_2>  <uid>  <createDatabase_-_3>  ;
# PARSER: createEvent
<createEvent_-_1> ::= ;
<createEvent_-_1> ::= <ownerStatement>  ;
<createEvent_-_2> ::= ;
<createEvent_-_2> ::= <ifNotExists>  ;
<createEvent_-_3> ::= ;
<createEvent_-_4> ::= ;
<createEvent_-_4> ::= <NOT>  ;
<createEvent_-_3> ::= <ON>  <COMPLETION>  <createEvent_-_4>  <PRESERVE>  ;
<createEvent_-_5> ::= ;
<createEvent_-_5> ::= <enableType>  ;
<createEvent_-_6> ::= ;
<createEvent_-_6> ::= <COMMENT>  <STRING_LITERAL>  ;
<createEvent> ::= <CREATE>  <createEvent_-_1>  <EVENT>  <createEvent_-_2>  <fullId>  <ON>  <SCHEDULE>  <scheduleExpression>  <createEvent_-_3>  <createEvent_-_5>  <createEvent_-_6>  <DO>  <routineBody>  ;
# PARSER: createIndex
<createIndex_-_1> ::= ;
<createIndex_-_1> ::= <ONLINE>  ;
<createIndex_-_1> ::= <OFFLINE>  ;
<createIndex_-_2> ::= ;
<createIndex_-_2> ::= <UNIQUE>  ;
<createIndex_-_2> ::= <FULLTEXT>  ;
<createIndex_-_2> ::= <SPATIAL>  ;
<createIndex_-_3> ::= ;
<createIndex_-_3> ::= <indexType>  ;
<createIndex_-_4> ::= <createIndex_-_5>  ;
<createIndex_-_5> ::= ;
<createIndex_-_5> ::= <indexOption>  <createIndex_-_5>  ;
<createIndex_-_6> ::= <createIndex_-_7>  ;
<createIndex_-_7> ::= ;
<createIndex_-_9> ::= ;
<createIndex_-_9> ::= '='  ;
<createIndex_-_10> ::= <DEFAULT>  ;
<createIndex_-_10> ::= <INPLACE>  ;
<createIndex_-_10> ::= <COPY>  ;
<createIndex_-_8> ::= <ALGORITHM>  <createIndex_-_9>  <createIndex_-_10>  ;
<createIndex_-_11> ::= ;
<createIndex_-_11> ::= '='  ;
<createIndex_-_12> ::= <DEFAULT>  ;
<createIndex_-_12> ::= <NONE>  ;
<createIndex_-_12> ::= <SHARED>  ;
<createIndex_-_12> ::= <EXCLUSIVE>  ;
<createIndex_-_8> ::= <LOCK>  <createIndex_-_11>  <createIndex_-_12>  ;
<createIndex_-_7> ::= <createIndex_-_8>  <createIndex_-_7>  ;
<createIndex> ::= <CREATE>  <createIndex_-_1>  <createIndex_-_2>  <INDEX>  <uid>  <createIndex_-_3>  <ON>  <tableName>  <indexColumnNames>  <createIndex_-_4>  <createIndex_-_6>  ;
# PARSER: createLogfileGroup
<createLogfileGroup_-_1> ::= ;
<createLogfileGroup_-_2> ::= ;
<createLogfileGroup_-_2> ::= '='  ;
<createLogfileGroup_-_1> ::= <INITIAL_SIZE>  <createLogfileGroup_-_2>  <fileSizeLiteral>  ;
<createLogfileGroup_-_3> ::= ;
<createLogfileGroup_-_4> ::= ;
<createLogfileGroup_-_4> ::= '='  ;
<createLogfileGroup_-_3> ::= <UNDO_BUFFER_SIZE>  <createLogfileGroup_-_4>  <fileSizeLiteral>  ;
<createLogfileGroup_-_5> ::= ;
<createLogfileGroup_-_6> ::= ;
<createLogfileGroup_-_6> ::= '='  ;
<createLogfileGroup_-_5> ::= <REDO_BUFFER_SIZE>  <createLogfileGroup_-_6>  <fileSizeLiteral>  ;
<createLogfileGroup_-_7> ::= ;
<createLogfileGroup_-_8> ::= ;
<createLogfileGroup_-_8> ::= '='  ;
<createLogfileGroup_-_7> ::= <NODEGROUP>  <createLogfileGroup_-_8>  <uid>  ;
<createLogfileGroup_-_9> ::= ;
<createLogfileGroup_-_9> ::= <WAIT>  ;
<createLogfileGroup_-_10> ::= ;
<createLogfileGroup_-_11> ::= ;
<createLogfileGroup_-_11> ::= '='  ;
<createLogfileGroup_-_10> ::= <COMMENT>  <createLogfileGroup_-_11>  <STRING_LITERAL>  ;
<createLogfileGroup_-_12> ::= ;
<createLogfileGroup_-_12> ::= '='  ;
<createLogfileGroup> ::= <CREATE>  <LOGFILE>  <GROUP>  <uid>  <ADD>  <UNDOFILE>  <STRING_LITERAL>  <createLogfileGroup_-_1>  <createLogfileGroup_-_3>  <createLogfileGroup_-_5>  <createLogfileGroup_-_7>  <createLogfileGroup_-_9>  <createLogfileGroup_-_10>  <ENGINE>  <createLogfileGroup_-_12>  <engineName>  ;
# PARSER: createProcedure
<createProcedure_-_1> ::= ;
<createProcedure_-_1> ::= <ownerStatement>  ;
<createProcedure_-_2> ::= ;
<createProcedure_-_2> ::= <procedureParameter>  ;
<createProcedure_-_3> ::= <createProcedure_-_4>  ;
<createProcedure_-_4> ::= ;
<createProcedure_-_5> ::= ','  <procedureParameter>  ;
<createProcedure_-_4> ::= <createProcedure_-_5>  <createProcedure_-_4>  ;
<createProcedure_-_6> ::= <createProcedure_-_7>  ;
<createProcedure_-_7> ::= ;
<createProcedure_-_7> ::= <routineOption>  <createProcedure_-_7>  ;
<createProcedure> ::= <CREATE>  <createProcedure_-_1>  <PROCEDURE>  <fullId>  '('  <createProcedure_-_2>  <createProcedure_-_3>  ')'  <createProcedure_-_6>  <routineBody>  ;
# PARSER: createFunction
<createFunction_-_1> ::= ;
<createFunction_-_1> ::= <ownerStatement>  ;
<createFunction_-_2> ::= ;
<createFunction_-_2> ::= <functionParameter>  ;
<createFunction_-_3> ::= <createFunction_-_4>  ;
<createFunction_-_4> ::= ;
<createFunction_-_5> ::= ','  <functionParameter>  ;
<createFunction_-_4> ::= <createFunction_-_5>  <createFunction_-_4>  ;
<createFunction_-_6> ::= <createFunction_-_7>  ;
<createFunction_-_7> ::= ;
<createFunction_-_7> ::= <routineOption>  <createFunction_-_7>  ;
<createFunction_-_8> ::= <routineBody>  ;
<createFunction_-_8> ::= <returnStatement>  ;
<createFunction> ::= <CREATE>  <createFunction_-_1>  <FUNCTION>  <fullId>  '('  <createFunction_-_2>  <createFunction_-_3>  ')'  <RETURNS>  <dataType>  <createFunction_-_6>  <createFunction_-_8>  ;
# PARSER: createServer
<createServer_-_1> ::= <MYSQL>  ;
<createServer_-_1> ::= <STRING_LITERAL>  ;
<createServer_-_2> ::= <createServer_-_3>  ;
<createServer_-_3> ::= ;
<createServer_-_4> ::= ','  <serverOption>  ;
<createServer_-_3> ::= <createServer_-_4>  <createServer_-_3>  ;
<createServer> ::= <CREATE>  <SERVER>  <uid>  <FOREIGN>  <DATA>  <WRAPPER>  <createServer_-_1>  <OPTIONS>  '('  <serverOption>  <createServer_-_2>  ')'  ;
# PARSER: createTable
<createTable_-_1> ::= ;
<createTable_-_1> ::= <TEMPORARY>  ;
<createTable_-_2> ::= ;
<createTable_-_2> ::= <ifNotExists>  ;
<createTable_-_3> ::= <LIKE>  <tableName>  ;
<createTable_-_3> ::= '('  <LIKE>  <tableName>  ')'  ;
<createTable> ::= <CREATE>  <createTable_-_1>  <TABLE>  <createTable_-_2>  <tableName>  <createTable_-_3>  ;
<createTable_-_4> ::= ;
<createTable_-_4> ::= <TEMPORARY>  ;
<createTable_-_5> ::= ;
<createTable_-_5> ::= <ifNotExists>  ;
<createTable_-_6> ::= ;
<createTable_-_6> ::= <createDefinitions>  ;
<createTable_-_7> ::= ;
<createTable_-_8> ::= <createTable_-_9>  ;
<createTable_-_9> ::= ;
<createTable_-_11> ::= ;
<createTable_-_11> ::= ','  ;
<createTable_-_10> ::= <createTable_-_11>  <tableOption>  ;
<createTable_-_9> ::= <createTable_-_10>  <createTable_-_9>  ;
<createTable_-_7> ::= <tableOption>  <createTable_-_8>  ;
<createTable_-_12> ::= ;
<createTable_-_12> ::= <partitionDefinitions>  ;
<createTable_-_13> ::= ;
<createTable_-_13> ::= <IGNORE>  ;
<createTable_-_13> ::= <REPLACE>  ;
<createTable_-_14> ::= ;
<createTable_-_14> ::= <AS>  ;
<createTable> ::= <CREATE>  <createTable_-_4>  <TABLE>  <createTable_-_5>  <tableName>  <createTable_-_6>  <createTable_-_7>  <createTable_-_12>  <createTable_-_13>  <createTable_-_14>  <selectStatement>  ;
<createTable_-_15> ::= ;
<createTable_-_15> ::= <TEMPORARY>  ;
<createTable_-_16> ::= ;
<createTable_-_16> ::= <ifNotExists>  ;
<createTable_-_17> ::= ;
<createTable_-_18> ::= <createTable_-_19>  ;
<createTable_-_19> ::= ;
<createTable_-_21> ::= ;
<createTable_-_21> ::= ','  ;
<createTable_-_20> ::= <createTable_-_21>  <tableOption>  ;
<createTable_-_19> ::= <createTable_-_20>  <createTable_-_19>  ;
<createTable_-_17> ::= <tableOption>  <createTable_-_18>  ;
<createTable_-_22> ::= ;
<createTable_-_22> ::= <partitionDefinitions>  ;
<createTable> ::= <CREATE>  <createTable_-_15>  <TABLE>  <createTable_-_16>  <tableName>  <createDefinitions>  <createTable_-_17>  <createTable_-_22>  ;
# PARSER: createTablespaceInnodb
<createTablespaceInnodb_-_1> ::= ;
<createTablespaceInnodb_-_1> ::= <FILE_BLOCK_SIZE>  '='  <fileSizeLiteral>  ;
<createTablespaceInnodb_-_2> ::= ;
<createTablespaceInnodb_-_3> ::= ;
<createTablespaceInnodb_-_3> ::= '='  ;
<createTablespaceInnodb_-_2> ::= <ENGINE>  <createTablespaceInnodb_-_3>  <engineName>  ;
<createTablespaceInnodb> ::= <CREATE>  <TABLESPACE>  <uid>  <ADD>  <DATAFILE>  <STRING_LITERAL>  <createTablespaceInnodb_-_1>  <createTablespaceInnodb_-_2>  ;
# PARSER: createTablespaceNdb
<createTablespaceNdb_-_1> ::= ;
<createTablespaceNdb_-_2> ::= ;
<createTablespaceNdb_-_2> ::= '='  ;
<createTablespaceNdb_-_1> ::= <EXTENT_SIZE>  <createTablespaceNdb_-_2>  <fileSizeLiteral>  ;
<createTablespaceNdb_-_3> ::= ;
<createTablespaceNdb_-_4> ::= ;
<createTablespaceNdb_-_4> ::= '='  ;
<createTablespaceNdb_-_3> ::= <INITIAL_SIZE>  <createTablespaceNdb_-_4>  <fileSizeLiteral>  ;
<createTablespaceNdb_-_5> ::= ;
<createTablespaceNdb_-_6> ::= ;
<createTablespaceNdb_-_6> ::= '='  ;
<createTablespaceNdb_-_5> ::= <AUTOEXTEND_SIZE>  <createTablespaceNdb_-_6>  <fileSizeLiteral>  ;
<createTablespaceNdb_-_7> ::= ;
<createTablespaceNdb_-_8> ::= ;
<createTablespaceNdb_-_8> ::= '='  ;
<createTablespaceNdb_-_7> ::= <MAX_SIZE>  <createTablespaceNdb_-_8>  <fileSizeLiteral>  ;
<createTablespaceNdb_-_9> ::= ;
<createTablespaceNdb_-_10> ::= ;
<createTablespaceNdb_-_10> ::= '='  ;
<createTablespaceNdb_-_9> ::= <NODEGROUP>  <createTablespaceNdb_-_10>  <uid>  ;
<createTablespaceNdb_-_11> ::= ;
<createTablespaceNdb_-_11> ::= <WAIT>  ;
<createTablespaceNdb_-_12> ::= ;
<createTablespaceNdb_-_13> ::= ;
<createTablespaceNdb_-_13> ::= '='  ;
<createTablespaceNdb_-_12> ::= <COMMENT>  <createTablespaceNdb_-_13>  <STRING_LITERAL>  ;
<createTablespaceNdb_-_14> ::= ;
<createTablespaceNdb_-_14> ::= '='  ;
<createTablespaceNdb> ::= <CREATE>  <TABLESPACE>  <uid>  <ADD>  <DATAFILE>  <STRING_LITERAL>  <USE>  <LOGFILE>  <GROUP>  <uid>  <createTablespaceNdb_-_1>  <createTablespaceNdb_-_3>  <createTablespaceNdb_-_5>  <createTablespaceNdb_-_7>  <createTablespaceNdb_-_9>  <createTablespaceNdb_-_11>  <createTablespaceNdb_-_12>  <ENGINE>  <createTablespaceNdb_-_14>  <engineName>  ;
# PARSER: createTrigger
<createTrigger_-_1> ::= ;
<createTrigger_-_1> ::= <ownerStatement>  ;
<createTrigger_-_2> ::= <BEFORE>  ;
<createTrigger_-_2> ::= <AFTER>  ;
<createTrigger_-_3> ::= <INSERT>  ;
<createTrigger_-_3> ::= <UPDATE>  ;
<createTrigger_-_3> ::= <DELETE>  ;
<createTrigger_-_4> ::= ;
<createTrigger_-_5> ::= <FOLLOWS>  ;
<createTrigger_-_5> ::= <PRECEDES>  ;
<createTrigger_-_4> ::= <createTrigger_-_5>  <fullId>  ;
<createTrigger> ::= <CREATE>  <createTrigger_-_1>  <TRIGGER>  <fullId>  <createTrigger_-_2>  <createTrigger_-_3>  <ON>  <tableName>  <FOR>  <EACH>  <ROW>  <createTrigger_-_4>  <routineBody>  ;
# PARSER: createView
<createView_-_1> ::= ;
<createView_-_1> ::= <OR>  <REPLACE>  ;
<createView_-_2> ::= ;
<createView_-_3> ::= <UNDEFINED>  ;
<createView_-_3> ::= <MERGE>  ;
<createView_-_3> ::= <TEMPTABLE>  ;
<createView_-_2> ::= <ALGORITHM>  '='  <createView_-_3>  ;
<createView_-_4> ::= ;
<createView_-_4> ::= <ownerStatement>  ;
<createView_-_5> ::= ;
<createView_-_6> ::= <DEFINER>  ;
<createView_-_6> ::= <INVOKER>  ;
<createView_-_5> ::= <SQL>  <SECURITY>  <createView_-_6>  ;
<createView_-_7> ::= ;
<createView_-_7> ::= '('  <uidList>  ')'  ;
<createView_-_8> ::= ;
<createView_-_9> ::= ;
<createView_-_9> ::= <CASCADED>  ;
<createView_-_9> ::= <LOCAL>  ;
<createView_-_8> ::= <WITH>  <createView_-_9>  <CHECK>  <OPTION>  ;
<createView> ::= <CREATE>  <createView_-_1>  <createView_-_2>  <createView_-_4>  <createView_-_5>  <VIEW>  <fullId>  <createView_-_7>  <AS>  <selectStatement>  <createView_-_8>  ;
# PARSER: createDatabaseOption
<createDatabaseOption_-_1> ::= ;
<createDatabaseOption_-_1> ::= <DEFAULT>  ;
<createDatabaseOption_-_2> ::= <CHARACTER>  <SET>  ;
<createDatabaseOption_-_2> ::= <CHARSET>  ;
<createDatabaseOption_-_3> ::= ;
<createDatabaseOption_-_3> ::= '='  ;
<createDatabaseOption_-_4> ::= <charsetName>  ;
<createDatabaseOption_-_4> ::= <DEFAULT>  ;
<createDatabaseOption> ::= <createDatabaseOption_-_1>  <createDatabaseOption_-_2>  <createDatabaseOption_-_3>  <createDatabaseOption_-_4>  ;
<createDatabaseOption_-_5> ::= ;
<createDatabaseOption_-_5> ::= <DEFAULT>  ;
<createDatabaseOption_-_6> ::= ;
<createDatabaseOption_-_6> ::= '='  ;
<createDatabaseOption> ::= <createDatabaseOption_-_5>  <COLLATE>  <createDatabaseOption_-_6>  <collationName>  ;
# PARSER: ownerStatement
<ownerStatement_-_1> ::= <userName>  ;
<ownerStatement_-_2> ::= ;
<ownerStatement_-_2> ::= '('  ')'  ;
<ownerStatement_-_1> ::= <CURRENT_USER>  <ownerStatement_-_2>  ;
<ownerStatement> ::= <DEFINER>  '='  <ownerStatement_-_1>  ;
# PARSER: scheduleExpression
<scheduleExpression_-_1> ::= <scheduleExpression_-_2>  ;
<scheduleExpression_-_2> ::= ;
<scheduleExpression_-_2> ::= <intervalExpr>  <scheduleExpression_-_2>  ;
<scheduleExpression> ::= <AT>  <timestampValue>  <scheduleExpression_-_1>  ;
<scheduleExpression_-_3> ::= <decimalLiteral>  ;
<scheduleExpression_-_3> ::= <expression>  ;
<scheduleExpression_-_4> ::= ;
<scheduleExpression_-_5> ::= <scheduleExpression_-_6>  ;
<scheduleExpression_-_6> ::= ;
<scheduleExpression_-_6> ::= <intervalExpr>  <scheduleExpression_-_6>  ;
<scheduleExpression_-_4> ::= <STARTS>  <timestampValue>  <scheduleExpression_-_5>  ;
<scheduleExpression_-_7> ::= ;
<scheduleExpression_-_8> ::= <scheduleExpression_-_9>  ;
<scheduleExpression_-_9> ::= ;
<scheduleExpression_-_9> ::= <intervalExpr>  <scheduleExpression_-_9>  ;
<scheduleExpression_-_7> ::= <ENDS>  <timestampValue>  <scheduleExpression_-_8>  ;
<scheduleExpression> ::= <EVERY>  <scheduleExpression_-_3>  <intervalType>  <scheduleExpression_-_4>  <scheduleExpression_-_7>  ;
# PARSER: timestampValue
<timestampValue> ::= <CURRENT_TIMESTAMP>  ;
<timestampValue> ::= <stringLiteral>  ;
<timestampValue> ::= <decimalLiteral>  ;
<timestampValue> ::= <expression>  ;
# PARSER: intervalExpr
<intervalExpr_-_1> ::= <decimalLiteral>  ;
<intervalExpr_-_1> ::= <expression>  ;
<intervalExpr> ::= '+'  <INTERVAL>  <intervalExpr_-_1>  <intervalType>  ;
# PARSER: intervalType
<intervalType> ::= <intervalTypeBase>  ;
<intervalType> ::= <YEAR>  ;
<intervalType> ::= <YEAR_MONTH>  ;
<intervalType> ::= <DAY_HOUR>  ;
<intervalType> ::= <DAY_MINUTE>  ;
<intervalType> ::= <DAY_SECOND>  ;
<intervalType> ::= <HOUR_MINUTE>  ;
<intervalType> ::= <HOUR_SECOND>  ;
<intervalType> ::= <MINUTE_SECOND>  ;
<intervalType> ::= <SECOND_MICROSECOND>  ;
<intervalType> ::= <MINUTE_MICROSECOND>  ;
<intervalType> ::= <HOUR_MICROSECOND>  ;
<intervalType> ::= <DAY_MICROSECOND>  ;
# PARSER: enableType
<enableType> ::= <ENABLE>  ;
<enableType> ::= <DISABLE>  ;
<enableType> ::= <DISABLE>  <ON>  <SLAVE>  ;
# PARSER: indexType
<indexType_-_1> ::= <BTREE>  ;
<indexType_-_1> ::= <HASH>  ;
<indexType> ::= <USING>  <indexType_-_1>  ;
# PARSER: indexOption
<indexOption_-_1> ::= ;
<indexOption_-_1> ::= '='  ;
<indexOption> ::= <KEY_BLOCK_SIZE>  <indexOption_-_1>  <fileSizeLiteral>  ;
<indexOption> ::= <indexType>  ;
<indexOption> ::= <WITH>  <PARSER>  <uid>  ;
<indexOption> ::= <COMMENT>  <STRING_LITERAL>  ;
<indexOption> ::= <INVISIBLE>  ;
<indexOption> ::= <VISIBLE>  ;
# PARSER: procedureParameter
<procedureParameter_-_1> ::= ;
<procedureParameter_-_1> ::= <IN>  ;
<procedureParameter_-_1> ::= <OUT>  ;
<procedureParameter_-_1> ::= <INOUT>  ;
<procedureParameter> ::= <procedureParameter_-_1>  <uid>  <dataType>  ;
# PARSER: functionParameter
<functionParameter> ::= <uid>  <dataType>  ;
# PARSER: routineOption
<routineOption> ::= <COMMENT>  <STRING_LITERAL>  ;
<routineOption> ::= <LANGUAGE>  <SQL>  ;
<routineOption_-_1> ::= ;
<routineOption_-_1> ::= <NOT>  ;
<routineOption> ::= <routineOption_-_1>  <DETERMINISTIC>  ;
<routineOption> ::= <CONTAINS>  <SQL>  ;
<routineOption> ::= <NO>  <SQL>  ;
<routineOption> ::= <READS>  <SQL>  <DATA>  ;
<routineOption> ::= <MODIFIES>  <SQL>  <DATA>  ;
<routineOption_-_2> ::= <DEFINER>  ;
<routineOption_-_2> ::= <INVOKER>  ;
<routineOption> ::= <SQL>  <SECURITY>  <routineOption_-_2>  ;
# PARSER: serverOption
<serverOption> ::= <HOST>  <STRING_LITERAL>  ;
<serverOption> ::= <DATABASE>  <STRING_LITERAL>  ;
<serverOption> ::= <USER>  <STRING_LITERAL>  ;
<serverOption> ::= <PASSWORD>  <STRING_LITERAL>  ;
<serverOption> ::= <SOCKET>  <STRING_LITERAL>  ;
<serverOption> ::= <OWNER>  <STRING_LITERAL>  ;
<serverOption> ::= <PORT>  <decimalLiteral>  ;
# PARSER: createDefinitions
<createDefinitions_-_1> ::= <createDefinitions_-_2>  ;
<createDefinitions_-_2> ::= ;
<createDefinitions_-_3> ::= ','  <createDefinition>  ;
<createDefinitions_-_2> ::= <createDefinitions_-_3>  <createDefinitions_-_2>  ;
<createDefinitions> ::= '('  <createDefinition>  <createDefinitions_-_1>  ')'  ;
# PARSER: createDefinition
<createDefinition> ::= <uid>  <columnDefinition>  ;
<createDefinition> ::= <tableConstraint>  ;
<createDefinition> ::= <indexColumnDefinition>  ;
# PARSER: columnDefinition
<columnDefinition_-_1> ::= <columnDefinition_-_2>  ;
<columnDefinition_-_2> ::= ;
<columnDefinition_-_2> ::= <columnConstraint>  <columnDefinition_-_2>  ;
<columnDefinition> ::= <dataType>  <columnDefinition_-_1>  ;
# PARSER: columnConstraint
<columnConstraint> ::= <nullNotnull>  ;
<columnConstraint> ::= <DEFAULT>  <defaultValue>  ;
<columnConstraint> ::= <AUTO_INCREMENT>  ;
<columnConstraint> ::= <ON>  <UPDATE>  <currentTimestamp>  ;
<columnConstraint_-_1> ::= ;
<columnConstraint_-_1> ::= <PRIMARY>  ;
<columnConstraint> ::= <columnConstraint_-_1>  <KEY>  ;
<columnConstraint_-_2> ::= ;
<columnConstraint_-_2> ::= <KEY>  ;
<columnConstraint> ::= <UNIQUE>  <columnConstraint_-_2>  ;
<columnConstraint> ::= <COMMENT>  <STRING_LITERAL>  ;
<columnConstraint_-_3> ::= <FIXED>  ;
<columnConstraint_-_3> ::= <DYNAMIC>  ;
<columnConstraint_-_3> ::= <DEFAULT>  ;
<columnConstraint> ::= <COLUMN_FORMAT>  <columnConstraint_-_3>  ;
<columnConstraint_-_4> ::= <DISK>  ;
<columnConstraint_-_4> ::= <MEMORY>  ;
<columnConstraint_-_4> ::= <DEFAULT>  ;
<columnConstraint> ::= <STORAGE>  <columnConstraint_-_4>  ;
<columnConstraint> ::= <referenceDefinition>  ;
<columnConstraint> ::= <COLLATE>  <collationName>  ;
<columnConstraint_-_5> ::= ;
<columnConstraint_-_5> ::= <GENERATED>  <ALWAYS>  ;
<columnConstraint_-_6> ::= ;
<columnConstraint_-_6> ::= <VIRTUAL>  ;
<columnConstraint_-_6> ::= <STORED>  ;
<columnConstraint> ::= <columnConstraint_-_5>  <AS>  '('  <expression>  ')'  <columnConstraint_-_6>  ;
<columnConstraint> ::= <SERIAL>  <DEFAULT>  <VALUE>  ;
# PARSER: tableConstraint
<tableConstraint_-_1> ::= ;
<tableConstraint_-_2> ::= ;
<tableConstraint_-_2> ::= <uid>  ;
<tableConstraint_-_1> ::= <CONSTRAINT>  <tableConstraint_-_2>  ;
<tableConstraint_-_3> ::= ;
<tableConstraint_-_3> ::= <uid>  ;
<tableConstraint_-_4> ::= ;
<tableConstraint_-_4> ::= <indexType>  ;
<tableConstraint_-_5> ::= <tableConstraint_-_6>  ;
<tableConstraint_-_6> ::= ;
<tableConstraint_-_6> ::= <indexOption>  <tableConstraint_-_6>  ;
<tableConstraint> ::= <tableConstraint_-_1>  <PRIMARY>  <KEY>  <tableConstraint_-_3>  <tableConstraint_-_4>  <indexColumnNames>  <tableConstraint_-_5>  ;
<tableConstraint_-_7> ::= ;
<tableConstraint_-_8> ::= ;
<tableConstraint_-_8> ::= <uid>  ;
<tableConstraint_-_7> ::= <CONSTRAINT>  <tableConstraint_-_8>  ;
<tableConstraint_-_9> ::= ;
<tableConstraint_-_9> ::= <INDEX>  ;
<tableConstraint_-_9> ::= <KEY>  ;
<tableConstraint_-_10> ::= ;
<tableConstraint_-_10> ::= <uid>  ;
<tableConstraint_-_11> ::= ;
<tableConstraint_-_11> ::= <indexType>  ;
<tableConstraint_-_12> ::= <tableConstraint_-_13>  ;
<tableConstraint_-_13> ::= ;
<tableConstraint_-_13> ::= <indexOption>  <tableConstraint_-_13>  ;
<tableConstraint> ::= <tableConstraint_-_7>  <UNIQUE>  <tableConstraint_-_9>  <tableConstraint_-_10>  <tableConstraint_-_11>  <indexColumnNames>  <tableConstraint_-_12>  ;
<tableConstraint_-_14> ::= ;
<tableConstraint_-_15> ::= ;
<tableConstraint_-_15> ::= <uid>  ;
<tableConstraint_-_14> ::= <CONSTRAINT>  <tableConstraint_-_15>  ;
<tableConstraint_-_16> ::= ;
<tableConstraint_-_16> ::= <uid>  ;
<tableConstraint> ::= <tableConstraint_-_14>  <FOREIGN>  <KEY>  <tableConstraint_-_16>  <indexColumnNames>  <referenceDefinition>  ;
<tableConstraint_-_17> ::= ;
<tableConstraint_-_18> ::= ;
<tableConstraint_-_18> ::= <uid>  ;
<tableConstraint_-_17> ::= <CONSTRAINT>  <tableConstraint_-_18>  ;
<tableConstraint> ::= <tableConstraint_-_17>  <CHECK>  '('  <expression>  ')'  ;
# PARSER: referenceDefinition
<referenceDefinition_-_1> ::= ;
<referenceDefinition_-_1> ::= <indexColumnNames>  ;
<referenceDefinition_-_2> ::= ;
<referenceDefinition_-_3> ::= <FULL>  ;
<referenceDefinition_-_3> ::= <PARTIAL>  ;
<referenceDefinition_-_3> ::= <SIMPLE>  ;
<referenceDefinition_-_2> ::= <MATCH>  <referenceDefinition_-_3>  ;
<referenceDefinition_-_4> ::= ;
<referenceDefinition_-_4> ::= <referenceAction>  ;
<referenceDefinition> ::= <REFERENCES>  <tableName>  <referenceDefinition_-_1>  <referenceDefinition_-_2>  <referenceDefinition_-_4>  ;
# PARSER: referenceAction
<referenceAction_-_1> ::= ;
<referenceAction_-_1> ::= <ON>  <UPDATE>  <referenceControlType>  ;
<referenceAction> ::= <ON>  <DELETE>  <referenceControlType>  <referenceAction_-_1>  ;
<referenceAction_-_2> ::= ;
<referenceAction_-_2> ::= <ON>  <DELETE>  <referenceControlType>  ;
<referenceAction> ::= <ON>  <UPDATE>  <referenceControlType>  <referenceAction_-_2>  ;
# PARSER: referenceControlType
<referenceControlType> ::= <RESTRICT>  ;
<referenceControlType> ::= <CASCADE>  ;
<referenceControlType> ::= <SET>  <NULL_LITERAL>  ;
<referenceControlType> ::= <NO>  <ACTION>  ;
# PARSER: indexColumnDefinition
<indexColumnDefinition_-_1> ::= <INDEX>  ;
<indexColumnDefinition_-_1> ::= <KEY>  ;
<indexColumnDefinition_-_2> ::= ;
<indexColumnDefinition_-_2> ::= <uid>  ;
<indexColumnDefinition_-_3> ::= ;
<indexColumnDefinition_-_3> ::= <indexType>  ;
<indexColumnDefinition_-_4> ::= <indexColumnDefinition_-_5>  ;
<indexColumnDefinition_-_5> ::= ;
<indexColumnDefinition_-_5> ::= <indexOption>  <indexColumnDefinition_-_5>  ;
<indexColumnDefinition> ::= <indexColumnDefinition_-_1>  <indexColumnDefinition_-_2>  <indexColumnDefinition_-_3>  <indexColumnNames>  <indexColumnDefinition_-_4>  ;
<indexColumnDefinition_-_6> ::= <FULLTEXT>  ;
<indexColumnDefinition_-_6> ::= <SPATIAL>  ;
<indexColumnDefinition_-_7> ::= ;
<indexColumnDefinition_-_7> ::= <INDEX>  ;
<indexColumnDefinition_-_7> ::= <KEY>  ;
<indexColumnDefinition_-_8> ::= ;
<indexColumnDefinition_-_8> ::= <uid>  ;
<indexColumnDefinition_-_9> ::= <indexColumnDefinition_-_10>  ;
<indexColumnDefinition_-_10> ::= ;
<indexColumnDefinition_-_10> ::= <indexOption>  <indexColumnDefinition_-_10>  ;
<indexColumnDefinition> ::= <indexColumnDefinition_-_6>  <indexColumnDefinition_-_7>  <indexColumnDefinition_-_8>  <indexColumnNames>  <indexColumnDefinition_-_9>  ;
# PARSER: tableOption
<tableOption_-_1> ::= ;
<tableOption_-_1> ::= '='  ;
<tableOption> ::= <ENGINE>  <tableOption_-_1>  <engineName>  ;
<tableOption_-_2> ::= ;
<tableOption_-_2> ::= '='  ;
<tableOption> ::= <AUTO_INCREMENT>  <tableOption_-_2>  <decimalLiteral>  ;
<tableOption_-_3> ::= ;
<tableOption_-_3> ::= '='  ;
<tableOption> ::= <AVG_ROW_LENGTH>  <tableOption_-_3>  <decimalLiteral>  ;
<tableOption_-_4> ::= ;
<tableOption_-_4> ::= <DEFAULT>  ;
<tableOption_-_5> ::= <CHARACTER>  <SET>  ;
<tableOption_-_5> ::= <CHARSET>  ;
<tableOption_-_6> ::= ;
<tableOption_-_6> ::= '='  ;
<tableOption_-_7> ::= <charsetName>  ;
<tableOption_-_7> ::= <DEFAULT>  ;
<tableOption> ::= <tableOption_-_4>  <tableOption_-_5>  <tableOption_-_6>  <tableOption_-_7>  ;
<tableOption_-_8> ::= <CHECKSUM>  ;
<tableOption_-_8> ::= <PAGE_CHECKSUM>  ;
<tableOption_-_9> ::= ;
<tableOption_-_9> ::= '='  ;
<tableOption_-_10> ::= '0'  ;
<tableOption_-_10> ::= '1'  ;
<tableOption> ::= <tableOption_-_8>  <tableOption_-_9>  <tableOption_-_10>  ;
<tableOption_-_11> ::= ;
<tableOption_-_11> ::= <DEFAULT>  ;
<tableOption_-_12> ::= ;
<tableOption_-_12> ::= '='  ;
<tableOption> ::= <tableOption_-_11>  <COLLATE>  <tableOption_-_12>  <collationName>  ;
<tableOption_-_13> ::= ;
<tableOption_-_13> ::= '='  ;
<tableOption> ::= <COMMENT>  <tableOption_-_13>  <STRING_LITERAL>  ;
<tableOption_-_14> ::= ;
<tableOption_-_14> ::= '='  ;
<tableOption_-_15> ::= <STRING_LITERAL>  ;
<tableOption_-_15> ::= <ID>  ;
<tableOption> ::= <COMPRESSION>  <tableOption_-_14>  <tableOption_-_15>  ;
<tableOption_-_16> ::= ;
<tableOption_-_16> ::= '='  ;
<tableOption> ::= <CONNECTION>  <tableOption_-_16>  <STRING_LITERAL>  ;
<tableOption_-_17> ::= ;
<tableOption_-_17> ::= '='  ;
<tableOption> ::= <DATA>  <DIRECTORY>  <tableOption_-_17>  <STRING_LITERAL>  ;
<tableOption_-_18> ::= ;
<tableOption_-_18> ::= '='  ;
<tableOption_-_19> ::= '0'  ;
<tableOption_-_19> ::= '1'  ;
<tableOption> ::= <DELAY_KEY_WRITE>  <tableOption_-_18>  <tableOption_-_19>  ;
<tableOption_-_20> ::= ;
<tableOption_-_20> ::= '='  ;
<tableOption> ::= <ENCRYPTION>  <tableOption_-_20>  <STRING_LITERAL>  ;
<tableOption_-_21> ::= ;
<tableOption_-_21> ::= '='  ;
<tableOption> ::= <INDEX>  <DIRECTORY>  <tableOption_-_21>  <STRING_LITERAL>  ;
<tableOption_-_22> ::= ;
<tableOption_-_22> ::= '='  ;
<tableOption_-_23> ::= <NO>  ;
<tableOption_-_23> ::= <FIRST>  ;
<tableOption_-_23> ::= <LAST>  ;
<tableOption> ::= <INSERT_METHOD>  <tableOption_-_22>  <tableOption_-_23>  ;
<tableOption_-_24> ::= ;
<tableOption_-_24> ::= '='  ;
<tableOption> ::= <KEY_BLOCK_SIZE>  <tableOption_-_24>  <fileSizeLiteral>  ;
<tableOption_-_25> ::= ;
<tableOption_-_25> ::= '='  ;
<tableOption> ::= <MAX_ROWS>  <tableOption_-_25>  <decimalLiteral>  ;
<tableOption_-_26> ::= ;
<tableOption_-_26> ::= '='  ;
<tableOption> ::= <MIN_ROWS>  <tableOption_-_26>  <decimalLiteral>  ;
<tableOption_-_27> ::= ;
<tableOption_-_27> ::= '='  ;
<tableOption_-_28> ::= '0'  ;
<tableOption_-_28> ::= '1'  ;
<tableOption_-_28> ::= <DEFAULT>  ;
<tableOption> ::= <PACK_KEYS>  <tableOption_-_27>  <tableOption_-_28>  ;
<tableOption_-_29> ::= ;
<tableOption_-_29> ::= '='  ;
<tableOption> ::= <PASSWORD>  <tableOption_-_29>  <STRING_LITERAL>  ;
<tableOption_-_30> ::= ;
<tableOption_-_30> ::= '='  ;
<tableOption_-_31> ::= <DEFAULT>  ;
<tableOption_-_31> ::= <DYNAMIC>  ;
<tableOption_-_31> ::= <FIXED>  ;
<tableOption_-_31> ::= <COMPRESSED>  ;
<tableOption_-_31> ::= <REDUNDANT>  ;
<tableOption_-_31> ::= <COMPACT>  ;
<tableOption> ::= <ROW_FORMAT>  <tableOption_-_30>  <tableOption_-_31>  ;
<tableOption_-_32> ::= ;
<tableOption_-_32> ::= '='  ;
<tableOption_-_33> ::= <DEFAULT>  ;
<tableOption_-_33> ::= '0'  ;
<tableOption_-_33> ::= '1'  ;
<tableOption> ::= <STATS_AUTO_RECALC>  <tableOption_-_32>  <tableOption_-_33>  ;
<tableOption_-_34> ::= ;
<tableOption_-_34> ::= '='  ;
<tableOption_-_35> ::= <DEFAULT>  ;
<tableOption_-_35> ::= '0'  ;
<tableOption_-_35> ::= '1'  ;
<tableOption> ::= <STATS_PERSISTENT>  <tableOption_-_34>  <tableOption_-_35>  ;
<tableOption_-_36> ::= ;
<tableOption_-_36> ::= '='  ;
<tableOption> ::= <STATS_SAMPLE_PAGES>  <tableOption_-_36>  <decimalLiteral>  ;
<tableOption_-_37> ::= ;
<tableOption_-_37> ::= <tablespaceStorage>  ;
<tableOption> ::= <TABLESPACE>  <uid>  <tableOption_-_37>  ;
<tableOption> ::= <tablespaceStorage>  ;
<tableOption_-_38> ::= ;
<tableOption_-_38> ::= '='  ;
<tableOption> ::= <UNION>  <tableOption_-_38>  '('  <tables>  ')'  ;
# PARSER: tablespaceStorage
<tablespaceStorage_-_1> ::= <DISK>  ;
<tablespaceStorage_-_1> ::= <MEMORY>  ;
<tablespaceStorage_-_1> ::= <DEFAULT>  ;
<tablespaceStorage> ::= <STORAGE>  <tablespaceStorage_-_1>  ;
# PARSER: partitionDefinitions
<partitionDefinitions_-_1> ::= ;
<partitionDefinitions_-_1> ::= <PARTITIONS>  <decimalLiteral>  ;
<partitionDefinitions_-_2> ::= ;
<partitionDefinitions_-_3> ::= ;
<partitionDefinitions_-_3> ::= <SUBPARTITIONS>  <decimalLiteral>  ;
<partitionDefinitions_-_2> ::= <SUBPARTITION>  <BY>  <subpartitionFunctionDefinition>  <partitionDefinitions_-_3>  ;
<partitionDefinitions_-_4> ::= ;
<partitionDefinitions_-_5> ::= <partitionDefinitions_-_6>  ;
<partitionDefinitions_-_6> ::= ;
<partitionDefinitions_-_7> ::= ','  <partitionDefinition>  ;
<partitionDefinitions_-_6> ::= <partitionDefinitions_-_7>  <partitionDefinitions_-_6>  ;
<partitionDefinitions_-_4> ::= '('  <partitionDefinition>  <partitionDefinitions_-_5>  ')'  ;
<partitionDefinitions> ::= <PARTITION>  <BY>  <partitionFunctionDefinition>  <partitionDefinitions_-_1>  <partitionDefinitions_-_2>  <partitionDefinitions_-_4>  ;
# PARSER: partitionFunctionDefinition
<partitionFunctionDefinition_-_1> ::= ;
<partitionFunctionDefinition_-_1> ::= <LINEAR>  ;
<partitionFunctionDefinition> ::= <partitionFunctionDefinition_-_1>  <HASH>  '('  <expression>  ')'  ;
<partitionFunctionDefinition_-_2> ::= ;
<partitionFunctionDefinition_-_2> ::= <LINEAR>  ;
<partitionFunctionDefinition_-_3> ::= ;
<partitionFunctionDefinition_-_4> ::= '1'  ;
<partitionFunctionDefinition_-_4> ::= '2'  ;
<partitionFunctionDefinition_-_3> ::= <ALGORITHM>  '='  <partitionFunctionDefinition_-_4>  ;
<partitionFunctionDefinition> ::= <partitionFunctionDefinition_-_2>  <KEY>  <partitionFunctionDefinition_-_3>  '('  <uidList>  ')'  ;
<partitionFunctionDefinition_-_5> ::= '('  <expression>  ')'  ;
<partitionFunctionDefinition_-_5> ::= <COLUMNS>  '('  <uidList>  ')'  ;
<partitionFunctionDefinition> ::= <RANGE>  <partitionFunctionDefinition_-_5>  ;
<partitionFunctionDefinition_-_6> ::= '('  <expression>  ')'  ;
<partitionFunctionDefinition_-_6> ::= <COLUMNS>  '('  <uidList>  ')'  ;
<partitionFunctionDefinition> ::= <LIST>  <partitionFunctionDefinition_-_6>  ;
# PARSER: subpartitionFunctionDefinition
<subpartitionFunctionDefinition_-_1> ::= ;
<subpartitionFunctionDefinition_-_1> ::= <LINEAR>  ;
<subpartitionFunctionDefinition> ::= <subpartitionFunctionDefinition_-_1>  <HASH>  '('  <expression>  ')'  ;
<subpartitionFunctionDefinition_-_2> ::= ;
<subpartitionFunctionDefinition_-_2> ::= <LINEAR>  ;
<subpartitionFunctionDefinition_-_3> ::= ;
<subpartitionFunctionDefinition_-_4> ::= '1'  ;
<subpartitionFunctionDefinition_-_4> ::= '2'  ;
<subpartitionFunctionDefinition_-_3> ::= <ALGORITHM>  '='  <subpartitionFunctionDefinition_-_4>  ;
<subpartitionFunctionDefinition> ::= <subpartitionFunctionDefinition_-_2>  <KEY>  <subpartitionFunctionDefinition_-_3>  '('  <uidList>  ')'  ;
# PARSER: partitionDefinition
<partitionDefinition_-_1> ::= <partitionDefinition_-_2>  ;
<partitionDefinition_-_2> ::= ;
<partitionDefinition_-_3> ::= ','  <partitionDefinerAtom>  ;
<partitionDefinition_-_2> ::= <partitionDefinition_-_3>  <partitionDefinition_-_2>  ;
<partitionDefinition_-_4> ::= <partitionDefinition_-_5>  ;
<partitionDefinition_-_5> ::= ;
<partitionDefinition_-_5> ::= <partitionOption>  <partitionDefinition_-_5>  ;
<partitionDefinition_-_6> ::= ;
<partitionDefinition_-_7> ::= <partitionDefinition_-_8>  ;
<partitionDefinition_-_8> ::= ;
<partitionDefinition_-_9> ::= ','  <subpartitionDefinition>  ;
<partitionDefinition_-_8> ::= <partitionDefinition_-_9>  <partitionDefinition_-_8>  ;
<partitionDefinition_-_6> ::= <subpartitionDefinition>  <partitionDefinition_-_7>  ;
<partitionDefinition> ::= <PARTITION>  <uid>  <VALUES>  <LESS>  <THAN>  '('  <partitionDefinerAtom>  <partitionDefinition_-_1>  ')'  <partitionDefinition_-_4>  <partitionDefinition_-_6>  ;
<partitionDefinition_-_10> ::= <partitionDefinition_-_11>  ;
<partitionDefinition_-_11> ::= ;
<partitionDefinition_-_11> ::= <partitionOption>  <partitionDefinition_-_11>  ;
<partitionDefinition_-_12> ::= ;
<partitionDefinition_-_13> ::= <partitionDefinition_-_14>  ;
<partitionDefinition_-_14> ::= ;
<partitionDefinition_-_15> ::= ','  <subpartitionDefinition>  ;
<partitionDefinition_-_14> ::= <partitionDefinition_-_15>  <partitionDefinition_-_14>  ;
<partitionDefinition_-_12> ::= <subpartitionDefinition>  <partitionDefinition_-_13>  ;
<partitionDefinition> ::= <PARTITION>  <uid>  <VALUES>  <LESS>  <THAN>  <partitionDefinerAtom>  <partitionDefinition_-_10>  <partitionDefinition_-_12>  ;
<partitionDefinition_-_16> ::= <partitionDefinition_-_17>  ;
<partitionDefinition_-_17> ::= ;
<partitionDefinition_-_18> ::= ','  <partitionDefinerAtom>  ;
<partitionDefinition_-_17> ::= <partitionDefinition_-_18>  <partitionDefinition_-_17>  ;
<partitionDefinition_-_19> ::= <partitionDefinition_-_20>  ;
<partitionDefinition_-_20> ::= ;
<partitionDefinition_-_20> ::= <partitionOption>  <partitionDefinition_-_20>  ;
<partitionDefinition_-_21> ::= ;
<partitionDefinition_-_22> ::= <partitionDefinition_-_23>  ;
<partitionDefinition_-_23> ::= ;
<partitionDefinition_-_24> ::= ','  <subpartitionDefinition>  ;
<partitionDefinition_-_23> ::= <partitionDefinition_-_24>  <partitionDefinition_-_23>  ;
<partitionDefinition_-_21> ::= <subpartitionDefinition>  <partitionDefinition_-_22>  ;
<partitionDefinition> ::= <PARTITION>  <uid>  <VALUES>  <IN>  '('  <partitionDefinerAtom>  <partitionDefinition_-_16>  ')'  <partitionDefinition_-_19>  <partitionDefinition_-_21>  ;
<partitionDefinition_-_25> ::= <partitionDefinition_-_26>  ;
<partitionDefinition_-_26> ::= ;
<partitionDefinition_-_27> ::= ','  <partitionDefinerVector>  ;
<partitionDefinition_-_26> ::= <partitionDefinition_-_27>  <partitionDefinition_-_26>  ;
<partitionDefinition_-_28> ::= <partitionDefinition_-_29>  ;
<partitionDefinition_-_29> ::= ;
<partitionDefinition_-_29> ::= <partitionOption>  <partitionDefinition_-_29>  ;
<partitionDefinition_-_30> ::= ;
<partitionDefinition_-_31> ::= <partitionDefinition_-_32>  ;
<partitionDefinition_-_32> ::= ;
<partitionDefinition_-_33> ::= ','  <subpartitionDefinition>  ;
<partitionDefinition_-_32> ::= <partitionDefinition_-_33>  <partitionDefinition_-_32>  ;
<partitionDefinition_-_30> ::= <subpartitionDefinition>  <partitionDefinition_-_31>  ;
<partitionDefinition> ::= <PARTITION>  <uid>  <VALUES>  <IN>  '('  <partitionDefinerVector>  <partitionDefinition_-_25>  ')'  <partitionDefinition_-_28>  <partitionDefinition_-_30>  ;
<partitionDefinition_-_34> ::= <partitionDefinition_-_35>  ;
<partitionDefinition_-_35> ::= ;
<partitionDefinition_-_35> ::= <partitionOption>  <partitionDefinition_-_35>  ;
<partitionDefinition_-_36> ::= ;
<partitionDefinition_-_37> ::= <partitionDefinition_-_38>  ;
<partitionDefinition_-_38> ::= ;
<partitionDefinition_-_39> ::= ','  <subpartitionDefinition>  ;
<partitionDefinition_-_38> ::= <partitionDefinition_-_39>  <partitionDefinition_-_38>  ;
<partitionDefinition_-_36> ::= <subpartitionDefinition>  <partitionDefinition_-_37>  ;
<partitionDefinition> ::= <PARTITION>  <uid>  <partitionDefinition_-_34>  <partitionDefinition_-_36>  ;
# PARSER: partitionDefinerAtom
<partitionDefinerAtom> ::= <constant>  ;
<partitionDefinerAtom> ::= <expression>  ;
<partitionDefinerAtom> ::= <MAXVALUE>  ;
# PARSER: partitionDefinerVector
<partitionDefinerVector_-_1> ::= <partitionDefinerVector_-_2>  ;
<partitionDefinerVector_-_2> ::= <partitionDefinerVector_-_3>  ;
<partitionDefinerVector_-_2> ::= <partitionDefinerVector_-_3>  <partitionDefinerVector_-_2>  ;
<partitionDefinerVector_-_3> ::= ','  <partitionDefinerAtom>  ;
<partitionDefinerVector> ::= '('  <partitionDefinerAtom>  <partitionDefinerVector_-_1>  ')'  ;
# PARSER: subpartitionDefinition
<subpartitionDefinition_-_1> ::= <subpartitionDefinition_-_2>  ;
<subpartitionDefinition_-_2> ::= ;
<subpartitionDefinition_-_2> ::= <partitionOption>  <subpartitionDefinition_-_2>  ;
<subpartitionDefinition> ::= <SUBPARTITION>  <uid>  <subpartitionDefinition_-_1>  ;
# PARSER: partitionOption
<partitionOption_-_1> ::= ;
<partitionOption_-_1> ::= <STORAGE>  ;
<partitionOption_-_2> ::= ;
<partitionOption_-_2> ::= '='  ;
<partitionOption> ::= <partitionOption_-_1>  <ENGINE>  <partitionOption_-_2>  <engineName>  ;
<partitionOption_-_3> ::= ;
<partitionOption_-_3> ::= '='  ;
<partitionOption> ::= <COMMENT>  <partitionOption_-_3>  <STRING_LITERAL>  ;
<partitionOption_-_4> ::= ;
<partitionOption_-_4> ::= '='  ;
<partitionOption> ::= <DATA>  <DIRECTORY>  <partitionOption_-_4>  <STRING_LITERAL>  ;
<partitionOption_-_5> ::= ;
<partitionOption_-_5> ::= '='  ;
<partitionOption> ::= <INDEX>  <DIRECTORY>  <partitionOption_-_5>  <STRING_LITERAL>  ;
<partitionOption_-_6> ::= ;
<partitionOption_-_6> ::= '='  ;
<partitionOption> ::= <MAX_ROWS>  <partitionOption_-_6>  <decimalLiteral>  ;
<partitionOption_-_7> ::= ;
<partitionOption_-_7> ::= '='  ;
<partitionOption> ::= <MIN_ROWS>  <partitionOption_-_7>  <decimalLiteral>  ;
<partitionOption_-_8> ::= ;
<partitionOption_-_8> ::= '='  ;
<partitionOption> ::= <TABLESPACE>  <partitionOption_-_8>  <uid>  ;
<partitionOption_-_9> ::= ;
<partitionOption_-_9> ::= '='  ;
<partitionOption> ::= <NODEGROUP>  <partitionOption_-_9>  <uid>  ;
# PARSER: alterDatabase
<alterDatabase_-_1> ::= <DATABASE>  ;
<alterDatabase_-_1> ::= <SCHEMA>  ;
<alterDatabase_-_2> ::= ;
<alterDatabase_-_2> ::= <uid>  ;
<alterDatabase_-_3> ::= <alterDatabase_-_4>  ;
<alterDatabase_-_4> ::= <alterDatabase_-_5>  ;
<alterDatabase_-_4> ::= <alterDatabase_-_5>  <alterDatabase_-_4>  ;
<alterDatabase_-_5> ::= <createDatabaseOption>  ;
<alterDatabase> ::= <ALTER>  <alterDatabase_-_1>  <alterDatabase_-_2>  <alterDatabase_-_3>  ;
<alterDatabase_-_6> ::= <DATABASE>  ;
<alterDatabase_-_6> ::= <SCHEMA>  ;
<alterDatabase> ::= <ALTER>  <alterDatabase_-_6>  <uid>  <UPGRADE>  <DATA>  <DIRECTORY>  <NAME>  ;
# PARSER: alterEvent
<alterEvent_-_1> ::= ;
<alterEvent_-_1> ::= <ownerStatement>  ;
<alterEvent_-_2> ::= ;
<alterEvent_-_2> ::= <ON>  <SCHEDULE>  <scheduleExpression>  ;
<alterEvent_-_3> ::= ;
<alterEvent_-_4> ::= ;
<alterEvent_-_4> ::= <NOT>  ;
<alterEvent_-_3> ::= <ON>  <COMPLETION>  <alterEvent_-_4>  <PRESERVE>  ;
<alterEvent_-_5> ::= ;
<alterEvent_-_5> ::= <RENAME>  <TO>  <fullId>  ;
<alterEvent_-_6> ::= ;
<alterEvent_-_6> ::= <enableType>  ;
<alterEvent_-_7> ::= ;
<alterEvent_-_7> ::= <COMMENT>  <STRING_LITERAL>  ;
<alterEvent_-_8> ::= ;
<alterEvent_-_8> ::= <DO>  <routineBody>  ;
<alterEvent> ::= <ALTER>  <alterEvent_-_1>  <EVENT>  <fullId>  <alterEvent_-_2>  <alterEvent_-_3>  <alterEvent_-_5>  <alterEvent_-_6>  <alterEvent_-_7>  <alterEvent_-_8>  ;
# PARSER: alterFunction
<alterFunction_-_1> ::= <alterFunction_-_2>  ;
<alterFunction_-_2> ::= ;
<alterFunction_-_2> ::= <routineOption>  <alterFunction_-_2>  ;
<alterFunction> ::= <ALTER>  <FUNCTION>  <fullId>  <alterFunction_-_1>  ;
# PARSER: alterInstance
<alterInstance> ::= <ALTER>  <INSTANCE>  <ROTATE>  <INNODB>  <MASTER>  <KEY>  ;
# PARSER: alterLogfileGroup
<alterLogfileGroup_-_1> ::= ;
<alterLogfileGroup_-_2> ::= ;
<alterLogfileGroup_-_2> ::= '='  ;
<alterLogfileGroup_-_1> ::= <INITIAL_SIZE>  <alterLogfileGroup_-_2>  <fileSizeLiteral>  ;
<alterLogfileGroup_-_3> ::= ;
<alterLogfileGroup_-_3> ::= <WAIT>  ;
<alterLogfileGroup_-_4> ::= ;
<alterLogfileGroup_-_4> ::= '='  ;
<alterLogfileGroup> ::= <ALTER>  <LOGFILE>  <GROUP>  <uid>  <ADD>  <UNDOFILE>  <STRING_LITERAL>  <alterLogfileGroup_-_1>  <alterLogfileGroup_-_3>  <ENGINE>  <alterLogfileGroup_-_4>  <engineName>  ;
# PARSER: alterProcedure
<alterProcedure_-_1> ::= <alterProcedure_-_2>  ;
<alterProcedure_-_2> ::= ;
<alterProcedure_-_2> ::= <routineOption>  <alterProcedure_-_2>  ;
<alterProcedure> ::= <ALTER>  <PROCEDURE>  <fullId>  <alterProcedure_-_1>  ;
# PARSER: alterServer
<alterServer_-_1> ::= <alterServer_-_2>  ;
<alterServer_-_2> ::= ;
<alterServer_-_3> ::= ','  <serverOption>  ;
<alterServer_-_2> ::= <alterServer_-_3>  <alterServer_-_2>  ;
<alterServer> ::= <ALTER>  <SERVER>  <uid>  <OPTIONS>  '('  <serverOption>  <alterServer_-_1>  ')'  ;
# PARSER: alterTable
<alterTable_-_1> ::= ;
<alterTable_-_1> ::= <ONLINE>  ;
<alterTable_-_1> ::= <OFFLINE>  ;
<alterTable_-_2> ::= ;
<alterTable_-_2> ::= <IGNORE>  ;
<alterTable_-_3> ::= ;
<alterTable_-_4> ::= <alterTable_-_5>  ;
<alterTable_-_5> ::= ;
<alterTable_-_6> ::= ','  <alterSpecification>  ;
<alterTable_-_5> ::= <alterTable_-_6>  <alterTable_-_5>  ;
<alterTable_-_3> ::= <alterSpecification>  <alterTable_-_4>  ;
<alterTable_-_7> ::= ;
<alterTable_-_7> ::= <partitionDefinitions>  ;
<alterTable> ::= <ALTER>  <alterTable_-_1>  <alterTable_-_2>  <TABLE>  <tableName>  <alterTable_-_3>  <alterTable_-_7>  ;
# PARSER: alterTablespace
<alterTablespace_-_1> ::= <ADD>  ;
<alterTablespace_-_1> ::= <DROP>  ;
<alterTablespace_-_2> ::= ;
<alterTablespace_-_2> ::= <INITIAL_SIZE>  '='  <fileSizeLiteral>  ;
<alterTablespace_-_3> ::= ;
<alterTablespace_-_3> ::= <WAIT>  ;
<alterTablespace_-_4> ::= ;
<alterTablespace_-_4> ::= '='  ;
<alterTablespace> ::= <ALTER>  <TABLESPACE>  <uid>  <alterTablespace_-_1>  <DATAFILE>  <STRING_LITERAL>  <alterTablespace_-_2>  <alterTablespace_-_3>  <ENGINE>  <alterTablespace_-_4>  <engineName>  ;
# PARSER: alterView
<alterView_-_1> ::= ;
<alterView_-_2> ::= <UNDEFINED>  ;
<alterView_-_2> ::= <MERGE>  ;
<alterView_-_2> ::= <TEMPTABLE>  ;
<alterView_-_1> ::= <ALGORITHM>  '='  <alterView_-_2>  ;
<alterView_-_3> ::= ;
<alterView_-_3> ::= <ownerStatement>  ;
<alterView_-_4> ::= ;
<alterView_-_5> ::= <DEFINER>  ;
<alterView_-_5> ::= <INVOKER>  ;
<alterView_-_4> ::= <SQL>  <SECURITY>  <alterView_-_5>  ;
<alterView_-_6> ::= ;
<alterView_-_6> ::= '('  <uidList>  ')'  ;
<alterView_-_7> ::= ;
<alterView_-_8> ::= ;
<alterView_-_8> ::= <CASCADED>  ;
<alterView_-_8> ::= <LOCAL>  ;
<alterView_-_7> ::= <WITH>  <alterView_-_8>  <CHECK>  <OPTION>  ;
<alterView> ::= <ALTER>  <alterView_-_1>  <alterView_-_3>  <alterView_-_4>  <VIEW>  <fullId>  <alterView_-_6>  <AS>  <selectStatement>  <alterView_-_7>  ;
# PARSER: alterSpecification
<alterSpecification_-_1> ::= <alterSpecification_-_2>  ;
<alterSpecification_-_2> ::= ;
<alterSpecification_-_4> ::= ;
<alterSpecification_-_4> ::= ','  ;
<alterSpecification_-_3> ::= <alterSpecification_-_4>  <tableOption>  ;
<alterSpecification_-_2> ::= <alterSpecification_-_3>  <alterSpecification_-_2>  ;
<alterSpecification> ::= <tableOption>  <alterSpecification_-_1>  ;
<alterSpecification_-_5> ::= ;
<alterSpecification_-_5> ::= <COLUMN>  ;
<alterSpecification_-_6> ::= ;
<alterSpecification_-_6> ::= <FIRST>  ;
<alterSpecification_-_6> ::= <AFTER>  <uid>  ;
<alterSpecification> ::= <ADD>  <alterSpecification_-_5>  <uid>  <columnDefinition>  <alterSpecification_-_6>  ;
<alterSpecification_-_7> ::= ;
<alterSpecification_-_7> ::= <COLUMN>  ;
<alterSpecification_-_8> ::= <alterSpecification_-_9>  ;
<alterSpecification_-_9> ::= ;
<alterSpecification_-_10> ::= ','  <uid>  <columnDefinition>  ;
<alterSpecification_-_9> ::= <alterSpecification_-_10>  <alterSpecification_-_9>  ;
<alterSpecification> ::= <ADD>  <alterSpecification_-_7>  '('  <uid>  <columnDefinition>  <alterSpecification_-_8>  ')'  ;
<alterSpecification_-_11> ::= <INDEX>  ;
<alterSpecification_-_11> ::= <KEY>  ;
<alterSpecification_-_12> ::= ;
<alterSpecification_-_12> ::= <uid>  ;
<alterSpecification_-_13> ::= ;
<alterSpecification_-_13> ::= <indexType>  ;
<alterSpecification_-_14> ::= <alterSpecification_-_15>  ;
<alterSpecification_-_15> ::= ;
<alterSpecification_-_15> ::= <indexOption>  <alterSpecification_-_15>  ;
<alterSpecification> ::= <ADD>  <alterSpecification_-_11>  <alterSpecification_-_12>  <alterSpecification_-_13>  <indexColumnNames>  <alterSpecification_-_14>  ;
<alterSpecification_-_16> ::= ;
<alterSpecification_-_17> ::= ;
<alterSpecification_-_17> ::= <uid>  ;
<alterSpecification_-_16> ::= <CONSTRAINT>  <alterSpecification_-_17>  ;
<alterSpecification_-_18> ::= ;
<alterSpecification_-_18> ::= <indexType>  ;
<alterSpecification_-_19> ::= <alterSpecification_-_20>  ;
<alterSpecification_-_20> ::= ;
<alterSpecification_-_20> ::= <indexOption>  <alterSpecification_-_20>  ;
<alterSpecification> ::= <ADD>  <alterSpecification_-_16>  <PRIMARY>  <KEY>  <alterSpecification_-_18>  <indexColumnNames>  <alterSpecification_-_19>  ;
<alterSpecification_-_21> ::= ;
<alterSpecification_-_22> ::= ;
<alterSpecification_-_22> ::= <uid>  ;
<alterSpecification_-_21> ::= <CONSTRAINT>  <alterSpecification_-_22>  ;
<alterSpecification_-_23> ::= ;
<alterSpecification_-_23> ::= <INDEX>  ;
<alterSpecification_-_23> ::= <KEY>  ;
<alterSpecification_-_24> ::= ;
<alterSpecification_-_24> ::= <uid>  ;
<alterSpecification_-_25> ::= ;
<alterSpecification_-_25> ::= <indexType>  ;
<alterSpecification_-_26> ::= <alterSpecification_-_27>  ;
<alterSpecification_-_27> ::= ;
<alterSpecification_-_27> ::= <indexOption>  <alterSpecification_-_27>  ;
<alterSpecification> ::= <ADD>  <alterSpecification_-_21>  <UNIQUE>  <alterSpecification_-_23>  <alterSpecification_-_24>  <alterSpecification_-_25>  <indexColumnNames>  <alterSpecification_-_26>  ;
<alterSpecification_-_28> ::= <FULLTEXT>  ;
<alterSpecification_-_28> ::= <SPATIAL>  ;
<alterSpecification_-_29> ::= ;
<alterSpecification_-_29> ::= <INDEX>  ;
<alterSpecification_-_29> ::= <KEY>  ;
<alterSpecification_-_30> ::= ;
<alterSpecification_-_30> ::= <uid>  ;
<alterSpecification_-_31> ::= <alterSpecification_-_32>  ;
<alterSpecification_-_32> ::= ;
<alterSpecification_-_32> ::= <indexOption>  <alterSpecification_-_32>  ;
<alterSpecification> ::= <ADD>  <alterSpecification_-_28>  <alterSpecification_-_29>  <alterSpecification_-_30>  <indexColumnNames>  <alterSpecification_-_31>  ;
<alterSpecification_-_33> ::= ;
<alterSpecification_-_34> ::= ;
<alterSpecification_-_34> ::= <uid>  ;
<alterSpecification_-_33> ::= <CONSTRAINT>  <alterSpecification_-_34>  ;
<alterSpecification_-_35> ::= ;
<alterSpecification_-_35> ::= <uid>  ;
<alterSpecification> ::= <ADD>  <alterSpecification_-_33>  <FOREIGN>  <KEY>  <alterSpecification_-_35>  <indexColumnNames>  <referenceDefinition>  ;
<alterSpecification_-_36> ::= ;
<alterSpecification_-_37> ::= ;
<alterSpecification_-_37> ::= <uid>  ;
<alterSpecification_-_36> ::= <CONSTRAINT>  <alterSpecification_-_37>  ;
<alterSpecification> ::= <ADD>  <alterSpecification_-_36>  <CHECK>  '('  <expression>  ')'  ;
<alterSpecification_-_38> ::= ;
<alterSpecification_-_38> ::= '='  ;
<alterSpecification_-_39> ::= <DEFAULT>  ;
<alterSpecification_-_39> ::= <INPLACE>  ;
<alterSpecification_-_39> ::= <COPY>  ;
<alterSpecification> ::= <ALGORITHM>  <alterSpecification_-_38>  <alterSpecification_-_39>  ;
<alterSpecification_-_40> ::= ;
<alterSpecification_-_40> ::= <COLUMN>  ;
<alterSpecification_-_41> ::= <SET>  <DEFAULT>  <defaultValue>  ;
<alterSpecification_-_41> ::= <DROP>  <DEFAULT>  ;
<alterSpecification> ::= <ALTER>  <alterSpecification_-_40>  <uid>  <alterSpecification_-_41>  ;
<alterSpecification_-_42> ::= ;
<alterSpecification_-_42> ::= <COLUMN>  ;
<alterSpecification_-_43> ::= ;
<alterSpecification_-_43> ::= <FIRST>  ;
<alterSpecification_-_43> ::= <AFTER>  <uid>  ;
<alterSpecification> ::= <CHANGE>  <alterSpecification_-_42>  <uid>  <uid>  <columnDefinition>  <alterSpecification_-_43>  ;
<alterSpecification> ::= <RENAME>  <COLUMN>  <uid>  <TO>  <uid>  ;
<alterSpecification_-_44> ::= ;
<alterSpecification_-_44> ::= '='  ;
<alterSpecification_-_45> ::= <DEFAULT>  ;
<alterSpecification_-_45> ::= <NONE>  ;
<alterSpecification_-_45> ::= <SHARED>  ;
<alterSpecification_-_45> ::= <EXCLUSIVE>  ;
<alterSpecification> ::= <LOCK>  <alterSpecification_-_44>  <alterSpecification_-_45>  ;
<alterSpecification_-_46> ::= ;
<alterSpecification_-_46> ::= <COLUMN>  ;
<alterSpecification_-_47> ::= ;
<alterSpecification_-_47> ::= <FIRST>  ;
<alterSpecification_-_47> ::= <AFTER>  <uid>  ;
<alterSpecification> ::= <MODIFY>  <alterSpecification_-_46>  <uid>  <columnDefinition>  <alterSpecification_-_47>  ;
<alterSpecification_-_48> ::= ;
<alterSpecification_-_48> ::= <COLUMN>  ;
<alterSpecification_-_49> ::= ;
<alterSpecification_-_49> ::= <RESTRICT>  ;
<alterSpecification> ::= <DROP>  <alterSpecification_-_48>  <uid>  <alterSpecification_-_49>  ;
<alterSpecification> ::= <DROP>  <PRIMARY>  <KEY>  ;
<alterSpecification_-_50> ::= <INDEX>  ;
<alterSpecification_-_50> ::= <KEY>  ;
<alterSpecification> ::= <RENAME>  <alterSpecification_-_50>  <uid>  <TO>  <uid>  ;
<alterSpecification_-_51> ::= <INDEX>  ;
<alterSpecification_-_51> ::= <KEY>  ;
<alterSpecification> ::= <DROP>  <alterSpecification_-_51>  <uid>  ;
<alterSpecification> ::= <DROP>  <FOREIGN>  <KEY>  <uid>  ;
<alterSpecification> ::= <DISABLE>  <KEYS>  ;
<alterSpecification> ::= <ENABLE>  <KEYS>  ;
<alterSpecification_-_52> ::= ;
<alterSpecification_-_52> ::= <TO>  ;
<alterSpecification_-_52> ::= <AS>  ;
<alterSpecification_-_53> ::= <uid>  ;
<alterSpecification_-_53> ::= <fullId>  ;
<alterSpecification> ::= <RENAME>  <alterSpecification_-_52>  <alterSpecification_-_53>  ;
<alterSpecification> ::= <ORDER>  <BY>  <uidList>  ;
<alterSpecification_-_54> ::= ;
<alterSpecification_-_54> ::= <COLLATE>  <collationName>  ;
<alterSpecification> ::= <CONVERT>  <TO>  <CHARACTER>  <SET>  <charsetName>  <alterSpecification_-_54>  ;
<alterSpecification_-_55> ::= ;
<alterSpecification_-_55> ::= <DEFAULT>  ;
<alterSpecification_-_56> ::= ;
<alterSpecification_-_56> ::= <COLLATE>  '='  <collationName>  ;
<alterSpecification> ::= <alterSpecification_-_55>  <CHARACTER>  <SET>  '='  <charsetName>  <alterSpecification_-_56>  ;
<alterSpecification> ::= <DISCARD>  <TABLESPACE>  ;
<alterSpecification> ::= <IMPORT>  <TABLESPACE>  ;
<alterSpecification> ::= <FORCE>  ;
<alterSpecification_-_57> ::= <WITHOUT>  ;
<alterSpecification_-_57> ::= <WITH>  ;
<alterSpecification> ::= <alterSpecification_-_57>  <VALIDATION>  ;
<alterSpecification_-_58> ::= <alterSpecification_-_59>  ;
<alterSpecification_-_59> ::= ;
<alterSpecification_-_60> ::= ','  <partitionDefinition>  ;
<alterSpecification_-_59> ::= <alterSpecification_-_60>  <alterSpecification_-_59>  ;
<alterSpecification> ::= <ADD>  <PARTITION>  '('  <partitionDefinition>  <alterSpecification_-_58>  ')'  ;
<alterSpecification> ::= <DROP>  <PARTITION>  <uidList>  ;
<alterSpecification_-_61> ::= <uidList>  ;
<alterSpecification_-_61> ::= <ALL>  ;
<alterSpecification> ::= <DISCARD>  <PARTITION>  <alterSpecification_-_61>  <TABLESPACE>  ;
<alterSpecification_-_62> ::= <uidList>  ;
<alterSpecification_-_62> ::= <ALL>  ;
<alterSpecification> ::= <IMPORT>  <PARTITION>  <alterSpecification_-_62>  <TABLESPACE>  ;
<alterSpecification_-_63> ::= <uidList>  ;
<alterSpecification_-_63> ::= <ALL>  ;
<alterSpecification> ::= <TRUNCATE>  <PARTITION>  <alterSpecification_-_63>  ;
<alterSpecification> ::= <COALESCE>  <PARTITION>  <decimalLiteral>  ;
<alterSpecification_-_64> ::= <alterSpecification_-_65>  ;
<alterSpecification_-_65> ::= ;
<alterSpecification_-_66> ::= ','  <partitionDefinition>  ;
<alterSpecification_-_65> ::= <alterSpecification_-_66>  <alterSpecification_-_65>  ;
<alterSpecification> ::= <REORGANIZE>  <PARTITION>  <uidList>  <INTO>  '('  <partitionDefinition>  <alterSpecification_-_64>  ')'  ;
<alterSpecification_-_67> ::= ;
<alterSpecification_-_68> ::= <WITH>  ;
<alterSpecification_-_68> ::= <WITHOUT>  ;
<alterSpecification_-_67> ::= <alterSpecification_-_68>  <VALIDATION>  ;
<alterSpecification> ::= <EXCHANGE>  <PARTITION>  <uid>  <WITH>  <TABLE>  <tableName>  <alterSpecification_-_67>  ;
<alterSpecification_-_69> ::= <uidList>  ;
<alterSpecification_-_69> ::= <ALL>  ;
<alterSpecification> ::= <ANALYZE>  <PARTITION>  <alterSpecification_-_69>  ;
<alterSpecification_-_70> ::= <uidList>  ;
<alterSpecification_-_70> ::= <ALL>  ;
<alterSpecification> ::= <CHECK>  <PARTITION>  <alterSpecification_-_70>  ;
<alterSpecification_-_71> ::= <uidList>  ;
<alterSpecification_-_71> ::= <ALL>  ;
<alterSpecification> ::= <OPTIMIZE>  <PARTITION>  <alterSpecification_-_71>  ;
<alterSpecification_-_72> ::= <uidList>  ;
<alterSpecification_-_72> ::= <ALL>  ;
<alterSpecification> ::= <REBUILD>  <PARTITION>  <alterSpecification_-_72>  ;
<alterSpecification_-_73> ::= <uidList>  ;
<alterSpecification_-_73> ::= <ALL>  ;
<alterSpecification> ::= <REPAIR>  <PARTITION>  <alterSpecification_-_73>  ;
<alterSpecification> ::= <REMOVE>  <PARTITIONING>  ;
<alterSpecification> ::= <UPGRADE>  <PARTITIONING>  ;
# PARSER: dropDatabase
<dropDatabase_-_1> ::= <DATABASE>  ;
<dropDatabase_-_1> ::= <SCHEMA>  ;
<dropDatabase_-_2> ::= ;
<dropDatabase_-_2> ::= <ifExists>  ;
<dropDatabase> ::= <DROP>  <dropDatabase_-_1>  <dropDatabase_-_2>  <uid>  ;
# PARSER: dropEvent
<dropEvent_-_1> ::= ;
<dropEvent_-_1> ::= <ifExists>  ;
<dropEvent> ::= <DROP>  <EVENT>  <dropEvent_-_1>  <fullId>  ;
# PARSER: dropIndex
<dropIndex_-_1> ::= ;
<dropIndex_-_1> ::= <ONLINE>  ;
<dropIndex_-_1> ::= <OFFLINE>  ;
<dropIndex_-_2> ::= <dropIndex_-_3>  ;
<dropIndex_-_3> ::= ;
<dropIndex_-_5> ::= ;
<dropIndex_-_5> ::= '='  ;
<dropIndex_-_6> ::= <DEFAULT>  ;
<dropIndex_-_6> ::= <INPLACE>  ;
<dropIndex_-_6> ::= <COPY>  ;
<dropIndex_-_4> ::= <ALGORITHM>  <dropIndex_-_5>  <dropIndex_-_6>  ;
<dropIndex_-_7> ::= ;
<dropIndex_-_7> ::= '='  ;
<dropIndex_-_8> ::= <DEFAULT>  ;
<dropIndex_-_8> ::= <NONE>  ;
<dropIndex_-_8> ::= <SHARED>  ;
<dropIndex_-_8> ::= <EXCLUSIVE>  ;
<dropIndex_-_4> ::= <LOCK>  <dropIndex_-_7>  <dropIndex_-_8>  ;
<dropIndex_-_3> ::= <dropIndex_-_4>  <dropIndex_-_3>  ;
<dropIndex> ::= <DROP>  <INDEX>  <dropIndex_-_1>  <uid>  <ON>  <tableName>  <dropIndex_-_2>  ;
# PARSER: dropLogfileGroup
<dropLogfileGroup> ::= <DROP>  <LOGFILE>  <GROUP>  <uid>  <ENGINE>  '='  <engineName>  ;
# PARSER: dropProcedure
<dropProcedure_-_1> ::= ;
<dropProcedure_-_1> ::= <ifExists>  ;
<dropProcedure> ::= <DROP>  <PROCEDURE>  <dropProcedure_-_1>  <fullId>  ;
# PARSER: dropFunction
<dropFunction_-_1> ::= ;
<dropFunction_-_1> ::= <ifExists>  ;
<dropFunction> ::= <DROP>  <FUNCTION>  <dropFunction_-_1>  <fullId>  ;
# PARSER: dropServer
<dropServer_-_1> ::= ;
<dropServer_-_1> ::= <ifExists>  ;
<dropServer> ::= <DROP>  <SERVER>  <dropServer_-_1>  <uid>  ;
# PARSER: dropTable
<dropTable_-_1> ::= ;
<dropTable_-_1> ::= <TEMPORARY>  ;
<dropTable_-_2> ::= ;
<dropTable_-_2> ::= <ifExists>  ;
<dropTable_-_3> ::= ;
<dropTable_-_3> ::= <RESTRICT>  ;
<dropTable_-_3> ::= <CASCADE>  ;
<dropTable> ::= <DROP>  <dropTable_-_1>  <TABLE>  <dropTable_-_2>  <tables>  <dropTable_-_3>  ;
# PARSER: dropTablespace
<dropTablespace_-_1> ::= ;
<dropTablespace_-_2> ::= ;
<dropTablespace_-_2> ::= '='  ;
<dropTablespace_-_1> ::= <ENGINE>  <dropTablespace_-_2>  <engineName>  ;
<dropTablespace> ::= <DROP>  <TABLESPACE>  <uid>  <dropTablespace_-_1>  ;
# PARSER: dropTrigger
<dropTrigger_-_1> ::= ;
<dropTrigger_-_1> ::= <ifExists>  ;
<dropTrigger> ::= <DROP>  <TRIGGER>  <dropTrigger_-_1>  <fullId>  ;
# PARSER: dropView
<dropView_-_1> ::= ;
<dropView_-_1> ::= <ifExists>  ;
<dropView_-_2> ::= <dropView_-_3>  ;
<dropView_-_3> ::= ;
<dropView_-_4> ::= ','  <fullId>  ;
<dropView_-_3> ::= <dropView_-_4>  <dropView_-_3>  ;
<dropView_-_5> ::= ;
<dropView_-_5> ::= <RESTRICT>  ;
<dropView_-_5> ::= <CASCADE>  ;
<dropView> ::= <DROP>  <VIEW>  <dropView_-_1>  <fullId>  <dropView_-_2>  <dropView_-_5>  ;
# PARSER: renameTable
<renameTable_-_1> ::= <renameTable_-_2>  ;
<renameTable_-_2> ::= ;
<renameTable_-_3> ::= ','  <renameTableClause>  ;
<renameTable_-_2> ::= <renameTable_-_3>  <renameTable_-_2>  ;
<renameTable> ::= <RENAME>  <TABLE>  <renameTableClause>  <renameTable_-_1>  ;
# PARSER: renameTableClause
<renameTableClause> ::= <tableName>  <TO>  <tableName>  ;
# PARSER: truncateTable
<truncateTable_-_1> ::= ;
<truncateTable_-_1> ::= <TABLE>  ;
<truncateTable> ::= <TRUNCATE>  <truncateTable_-_1>  <tableName>  ;
# PARSER: callStatement
<callStatement_-_1> ::= ;
<callStatement_-_2> ::= ;
<callStatement_-_2> ::= <constants>  ;
<callStatement_-_2> ::= <expressions>  ;
<callStatement_-_1> ::= '('  <callStatement_-_2>  ')'  ;
<callStatement> ::= <CALL>  <fullId>  <callStatement_-_1>  ;
# PARSER: deleteStatement
<deleteStatement> ::= <singleDeleteStatement>  ;
<deleteStatement> ::= <multipleDeleteStatement>  ;
# PARSER: doStatement
<doStatement> ::= <DO>  <expressions>  ;
# PARSER: handlerStatement
<handlerStatement> ::= <handlerOpenStatement>  ;
<handlerStatement> ::= <handlerReadIndexStatement>  ;
<handlerStatement> ::= <handlerReadStatement>  ;
<handlerStatement> ::= <handlerCloseStatement>  ;
# PARSER: insertStatement
<insertStatement_-_1> ::= ;
<insertStatement_-_1> ::= <LOW_PRIORITY>  ;
<insertStatement_-_1> ::= <DELAYED>  ;
<insertStatement_-_1> ::= <HIGH_PRIORITY>  ;
<insertStatement_-_2> ::= ;
<insertStatement_-_2> ::= <IGNORE>  ;
<insertStatement_-_3> ::= ;
<insertStatement_-_3> ::= <INTO>  ;
<insertStatement_-_4> ::= ;
<insertStatement_-_5> ::= ;
<insertStatement_-_5> ::= <uidList>  ;
<insertStatement_-_4> ::= <PARTITION>  '('  <insertStatement_-_5>  ')'  ;
<insertStatement_-_7> ::= ;
<insertStatement_-_7> ::= '('  <uidList>  ')'  ;
<insertStatement_-_6> ::= <insertStatement_-_7>  <insertStatementValue>  ;
<insertStatement_-_8> ::= <insertStatement_-_9>  ;
<insertStatement_-_9> ::= ;
<insertStatement_-_10> ::= ','  <updatedElement>  ;
<insertStatement_-_9> ::= <insertStatement_-_10>  <insertStatement_-_9>  ;
<insertStatement_-_6> ::= <SET>  <updatedElement>  <insertStatement_-_8>  ;
<insertStatement_-_11> ::= ;
<insertStatement_-_12> ::= <insertStatement_-_13>  ;
<insertStatement_-_13> ::= ;
<insertStatement_-_14> ::= ','  <updatedElement>  ;
<insertStatement_-_13> ::= <insertStatement_-_14>  <insertStatement_-_13>  ;
<insertStatement_-_11> ::= <ON>  <DUPLICATE>  <KEY>  <UPDATE>  <updatedElement>  <insertStatement_-_12>  ;
<insertStatement> ::= <INSERT>  <insertStatement_-_1>  <insertStatement_-_2>  <insertStatement_-_3>  <tableName>  <insertStatement_-_4>  <insertStatement_-_6>  <insertStatement_-_11>  ;
# PARSER: loadDataStatement
<loadDataStatement_-_1> ::= ;
<loadDataStatement_-_1> ::= <LOW_PRIORITY>  ;
<loadDataStatement_-_1> ::= <CONCURRENT>  ;
<loadDataStatement_-_2> ::= ;
<loadDataStatement_-_2> ::= <LOCAL>  ;
<loadDataStatement_-_3> ::= ;
<loadDataStatement_-_3> ::= <REPLACE>  ;
<loadDataStatement_-_3> ::= <IGNORE>  ;
<loadDataStatement_-_4> ::= ;
<loadDataStatement_-_4> ::= <PARTITION>  '('  <uidList>  ')'  ;
<loadDataStatement_-_5> ::= ;
<loadDataStatement_-_5> ::= <CHARACTER>  <SET>  <charsetName>  ;
<loadDataStatement_-_6> ::= ;
<loadDataStatement_-_7> ::= <FIELDS>  ;
<loadDataStatement_-_7> ::= <COLUMNS>  ;
<loadDataStatement_-_8> ::= <loadDataStatement_-_9>  ;
<loadDataStatement_-_9> ::= <loadDataStatement_-_10>  ;
<loadDataStatement_-_9> ::= <loadDataStatement_-_10>  <loadDataStatement_-_9>  ;
<loadDataStatement_-_10> ::= <selectFieldsInto>  ;
<loadDataStatement_-_6> ::= <loadDataStatement_-_7>  <loadDataStatement_-_8>  ;
<loadDataStatement_-_11> ::= ;
<loadDataStatement_-_12> ::= <loadDataStatement_-_13>  ;
<loadDataStatement_-_13> ::= <loadDataStatement_-_14>  ;
<loadDataStatement_-_13> ::= <loadDataStatement_-_14>  <loadDataStatement_-_13>  ;
<loadDataStatement_-_14> ::= <selectLinesInto>  ;
<loadDataStatement_-_11> ::= <LINES>  <loadDataStatement_-_12>  ;
<loadDataStatement_-_15> ::= ;
<loadDataStatement_-_16> ::= <LINES>  ;
<loadDataStatement_-_16> ::= <ROWS>  ;
<loadDataStatement_-_15> ::= <IGNORE>  <decimalLiteral>  <loadDataStatement_-_16>  ;
<loadDataStatement_-_17> ::= ;
<loadDataStatement_-_18> ::= <loadDataStatement_-_19>  ;
<loadDataStatement_-_19> ::= ;
<loadDataStatement_-_20> ::= ','  <assignmentField>  ;
<loadDataStatement_-_19> ::= <loadDataStatement_-_20>  <loadDataStatement_-_19>  ;
<loadDataStatement_-_17> ::= '('  <assignmentField>  <loadDataStatement_-_18>  ')'  ;
<loadDataStatement_-_21> ::= ;
<loadDataStatement_-_22> ::= <loadDataStatement_-_23>  ;
<loadDataStatement_-_23> ::= ;
<loadDataStatement_-_24> ::= ','  <updatedElement>  ;
<loadDataStatement_-_23> ::= <loadDataStatement_-_24>  <loadDataStatement_-_23>  ;
<loadDataStatement_-_21> ::= <SET>  <updatedElement>  <loadDataStatement_-_22>  ;
<loadDataStatement> ::= <LOAD>  <DATA>  <loadDataStatement_-_1>  <loadDataStatement_-_2>  <INFILE>  <STRING_LITERAL>  <loadDataStatement_-_3>  <INTO>  <TABLE>  <tableName>  <loadDataStatement_-_4>  <loadDataStatement_-_5>  <loadDataStatement_-_6>  <loadDataStatement_-_11>  <loadDataStatement_-_15>  <loadDataStatement_-_17>  <loadDataStatement_-_21>  ;
# PARSER: loadXmlStatement
<loadXmlStatement_-_1> ::= ;
<loadXmlStatement_-_1> ::= <LOW_PRIORITY>  ;
<loadXmlStatement_-_1> ::= <CONCURRENT>  ;
<loadXmlStatement_-_2> ::= ;
<loadXmlStatement_-_2> ::= <LOCAL>  ;
<loadXmlStatement_-_3> ::= ;
<loadXmlStatement_-_3> ::= <REPLACE>  ;
<loadXmlStatement_-_3> ::= <IGNORE>  ;
<loadXmlStatement_-_4> ::= ;
<loadXmlStatement_-_4> ::= <CHARACTER>  <SET>  <charsetName>  ;
<loadXmlStatement_-_5> ::= ;
<loadXmlStatement_-_5> ::= <ROWS>  <IDENTIFIED>  <BY>  '<'  <STRING_LITERAL>  '>'  ;
<loadXmlStatement_-_6> ::= ;
<loadXmlStatement_-_7> ::= <LINES>  ;
<loadXmlStatement_-_7> ::= <ROWS>  ;
<loadXmlStatement_-_6> ::= <IGNORE>  <decimalLiteral>  <loadXmlStatement_-_7>  ;
<loadXmlStatement_-_8> ::= ;
<loadXmlStatement_-_9> ::= <loadXmlStatement_-_10>  ;
<loadXmlStatement_-_10> ::= ;
<loadXmlStatement_-_11> ::= ','  <assignmentField>  ;
<loadXmlStatement_-_10> ::= <loadXmlStatement_-_11>  <loadXmlStatement_-_10>  ;
<loadXmlStatement_-_8> ::= '('  <assignmentField>  <loadXmlStatement_-_9>  ')'  ;
<loadXmlStatement_-_12> ::= ;
<loadXmlStatement_-_13> ::= <loadXmlStatement_-_14>  ;
<loadXmlStatement_-_14> ::= ;
<loadXmlStatement_-_15> ::= ','  <updatedElement>  ;
<loadXmlStatement_-_14> ::= <loadXmlStatement_-_15>  <loadXmlStatement_-_14>  ;
<loadXmlStatement_-_12> ::= <SET>  <updatedElement>  <loadXmlStatement_-_13>  ;
<loadXmlStatement> ::= <LOAD>  <XML>  <loadXmlStatement_-_1>  <loadXmlStatement_-_2>  <INFILE>  <STRING_LITERAL>  <loadXmlStatement_-_3>  <INTO>  <TABLE>  <tableName>  <loadXmlStatement_-_4>  <loadXmlStatement_-_5>  <loadXmlStatement_-_6>  <loadXmlStatement_-_8>  <loadXmlStatement_-_12>  ;
# PARSER: replaceStatement
<replaceStatement_-_1> ::= ;
<replaceStatement_-_1> ::= <LOW_PRIORITY>  ;
<replaceStatement_-_1> ::= <DELAYED>  ;
<replaceStatement_-_2> ::= ;
<replaceStatement_-_2> ::= <INTO>  ;
<replaceStatement_-_3> ::= ;
<replaceStatement_-_3> ::= <PARTITION>  '('  <uidList>  ')'  ;
<replaceStatement_-_5> ::= ;
<replaceStatement_-_5> ::= '('  <uidList>  ')'  ;
<replaceStatement_-_4> ::= <replaceStatement_-_5>  <insertStatementValue>  ;
<replaceStatement_-_6> ::= <replaceStatement_-_7>  ;
<replaceStatement_-_7> ::= ;
<replaceStatement_-_8> ::= ','  <updatedElement>  ;
<replaceStatement_-_7> ::= <replaceStatement_-_8>  <replaceStatement_-_7>  ;
<replaceStatement_-_4> ::= <SET>  <updatedElement>  <replaceStatement_-_6>  ;
<replaceStatement> ::= <REPLACE>  <replaceStatement_-_1>  <replaceStatement_-_2>  <tableName>  <replaceStatement_-_3>  <replaceStatement_-_4>  ;
# PARSER: selectStatement
<selectStatement_-_1> ::= ;
<selectStatement_-_1> ::= <lockClause>  ;
<selectStatement> ::= <querySpecification>  <selectStatement_-_1>  ;
<selectStatement_-_2> ::= ;
<selectStatement_-_2> ::= <lockClause>  ;
<selectStatement> ::= <queryExpression>  <selectStatement_-_2>  ;
<selectStatement_-_3> ::= <selectStatement_-_4>  ;
<selectStatement_-_4> ::= <selectStatement_-_5>  ;
<selectStatement_-_4> ::= <selectStatement_-_5>  <selectStatement_-_4>  ;
<selectStatement_-_5> ::= <unionStatement>  ;
<selectStatement_-_6> ::= ;
<selectStatement_-_7> ::= ;
<selectStatement_-_7> ::= <ALL>  ;
<selectStatement_-_7> ::= <DISTINCT>  ;
<selectStatement_-_8> ::= <querySpecification>  ;
<selectStatement_-_8> ::= <queryExpression>  ;
<selectStatement_-_6> ::= <UNION>  <selectStatement_-_7>  <selectStatement_-_8>  ;
<selectStatement_-_9> ::= ;
<selectStatement_-_9> ::= <orderByClause>  ;
<selectStatement_-_10> ::= ;
<selectStatement_-_10> ::= <limitClause>  ;
<selectStatement_-_11> ::= ;
<selectStatement_-_11> ::= <lockClause>  ;
<selectStatement> ::= <querySpecificationNointo>  <selectStatement_-_3>  <selectStatement_-_6>  <selectStatement_-_9>  <selectStatement_-_10>  <selectStatement_-_11>  ;
<selectStatement_-_12> ::= <selectStatement_-_13>  ;
<selectStatement_-_13> ::= <selectStatement_-_14>  ;
<selectStatement_-_13> ::= <selectStatement_-_14>  <selectStatement_-_13>  ;
<selectStatement_-_14> ::= <unionParenthesis>  ;
<selectStatement_-_15> ::= ;
<selectStatement_-_16> ::= ;
<selectStatement_-_16> ::= <ALL>  ;
<selectStatement_-_16> ::= <DISTINCT>  ;
<selectStatement_-_15> ::= <UNION>  <selectStatement_-_16>  <queryExpression>  ;
<selectStatement_-_17> ::= ;
<selectStatement_-_17> ::= <orderByClause>  ;
<selectStatement_-_18> ::= ;
<selectStatement_-_18> ::= <limitClause>  ;
<selectStatement_-_19> ::= ;
<selectStatement_-_19> ::= <lockClause>  ;
<selectStatement> ::= <queryExpressionNointo>  <selectStatement_-_12>  <selectStatement_-_15>  <selectStatement_-_17>  <selectStatement_-_18>  <selectStatement_-_19>  ;
# PARSER: updateStatement
<updateStatement> ::= <singleUpdateStatement>  ;
<updateStatement> ::= <multipleUpdateStatement>  ;
# PARSER: insertStatementValue
<insertStatementValue> ::= <selectStatement>  ;
<insertStatementValue_-_1> ::= <VALUES>  ;
<insertStatementValue_-_1> ::= <VALUE>  ;
<insertStatementValue_-_2> ::= ;
<insertStatementValue_-_2> ::= <expressionsWithDefaults>  ;
<insertStatementValue_-_3> ::= <insertStatementValue_-_4>  ;
<insertStatementValue_-_4> ::= ;
<insertStatementValue_-_6> ::= ;
<insertStatementValue_-_6> ::= <expressionsWithDefaults>  ;
<insertStatementValue_-_5> ::= ','  '('  <insertStatementValue_-_6>  ')'  ;
<insertStatementValue_-_4> ::= <insertStatementValue_-_5>  <insertStatementValue_-_4>  ;
<insertStatementValue> ::= <insertStatementValue_-_1>  '('  <insertStatementValue_-_2>  ')'  <insertStatementValue_-_3>  ;
# PARSER: updatedElement
<updatedElement_-_1> ::= <expression>  ;
<updatedElement_-_1> ::= <DEFAULT>  ;
<updatedElement> ::= <fullColumnName>  '='  <updatedElement_-_1>  ;
# PARSER: assignmentField
<assignmentField> ::= <uid>  ;
<assignmentField> ::= <LOCAL_ID>  ;
# PARSER: lockClause
<lockClause> ::= <FOR>  <UPDATE>  ;
<lockClause> ::= <LOCK>  <IN>  <SHARE>  <MODE>  ;
# PARSER: singleDeleteStatement
<singleDeleteStatement_-_1> ::= ;
<singleDeleteStatement_-_1> ::= <LOW_PRIORITY>  ;
<singleDeleteStatement_-_2> ::= ;
<singleDeleteStatement_-_2> ::= <QUICK>  ;
<singleDeleteStatement_-_3> ::= ;
<singleDeleteStatement_-_3> ::= <IGNORE>  ;
<singleDeleteStatement_-_4> ::= ;
<singleDeleteStatement_-_4> ::= <PARTITION>  '('  <uidList>  ')'  ;
<singleDeleteStatement_-_5> ::= ;
<singleDeleteStatement_-_5> ::= <WHERE>  <expression>  ;
<singleDeleteStatement_-_6> ::= ;
<singleDeleteStatement_-_6> ::= <orderByClause>  ;
<singleDeleteStatement_-_7> ::= ;
<singleDeleteStatement_-_7> ::= <LIMIT>  <limitClauseAtom>  ;
<singleDeleteStatement> ::= <DELETE>  <singleDeleteStatement_-_1>  <singleDeleteStatement_-_2>  <singleDeleteStatement_-_3>  <FROM>  <tableName>  <singleDeleteStatement_-_4>  <singleDeleteStatement_-_5>  <singleDeleteStatement_-_6>  <singleDeleteStatement_-_7>  ;
# PARSER: multipleDeleteStatement
<multipleDeleteStatement_-_1> ::= ;
<multipleDeleteStatement_-_1> ::= <LOW_PRIORITY>  ;
<multipleDeleteStatement_-_2> ::= ;
<multipleDeleteStatement_-_2> ::= <QUICK>  ;
<multipleDeleteStatement_-_3> ::= ;
<multipleDeleteStatement_-_3> ::= <IGNORE>  ;
<multipleDeleteStatement_-_5> ::= ;
<multipleDeleteStatement_-_5> ::= '.'  '*'  ;
<multipleDeleteStatement_-_6> ::= <multipleDeleteStatement_-_7>  ;
<multipleDeleteStatement_-_7> ::= ;
<multipleDeleteStatement_-_9> ::= ;
<multipleDeleteStatement_-_9> ::= '.'  '*'  ;
<multipleDeleteStatement_-_8> ::= ','  <tableName>  <multipleDeleteStatement_-_9>  ;
<multipleDeleteStatement_-_7> ::= <multipleDeleteStatement_-_8>  <multipleDeleteStatement_-_7>  ;
<multipleDeleteStatement_-_4> ::= <tableName>  <multipleDeleteStatement_-_5>  <multipleDeleteStatement_-_6>  <FROM>  <tableSources>  ;
<multipleDeleteStatement_-_10> ::= ;
<multipleDeleteStatement_-_10> ::= '.'  '*'  ;
<multipleDeleteStatement_-_11> ::= <multipleDeleteStatement_-_12>  ;
<multipleDeleteStatement_-_12> ::= ;
<multipleDeleteStatement_-_14> ::= ;
<multipleDeleteStatement_-_14> ::= '.'  '*'  ;
<multipleDeleteStatement_-_13> ::= ','  <tableName>  <multipleDeleteStatement_-_14>  ;
<multipleDeleteStatement_-_12> ::= <multipleDeleteStatement_-_13>  <multipleDeleteStatement_-_12>  ;
<multipleDeleteStatement_-_4> ::= <FROM>  <tableName>  <multipleDeleteStatement_-_10>  <multipleDeleteStatement_-_11>  <USING>  <tableSources>  ;
<multipleDeleteStatement_-_15> ::= ;
<multipleDeleteStatement_-_15> ::= <WHERE>  <expression>  ;
<multipleDeleteStatement> ::= <DELETE>  <multipleDeleteStatement_-_1>  <multipleDeleteStatement_-_2>  <multipleDeleteStatement_-_3>  <multipleDeleteStatement_-_4>  <multipleDeleteStatement_-_15>  ;
# PARSER: handlerOpenStatement
<handlerOpenStatement_-_1> ::= ;
<handlerOpenStatement_-_2> ::= ;
<handlerOpenStatement_-_2> ::= <AS>  ;
<handlerOpenStatement_-_1> ::= <handlerOpenStatement_-_2>  <uid>  ;
<handlerOpenStatement> ::= <HANDLER>  <tableName>  <OPEN>  <handlerOpenStatement_-_1>  ;
# PARSER: handlerReadIndexStatement
<handlerReadIndexStatement_-_1> ::= <comparisonOperator>  '('  <constants>  ')'  ;
<handlerReadIndexStatement_-_1> ::= <FIRST>  ;
<handlerReadIndexStatement_-_1> ::= <NEXT>  ;
<handlerReadIndexStatement_-_1> ::= <PREV>  ;
<handlerReadIndexStatement_-_1> ::= <LAST>  ;
<handlerReadIndexStatement_-_2> ::= ;
<handlerReadIndexStatement_-_2> ::= <WHERE>  <expression>  ;
<handlerReadIndexStatement_-_3> ::= ;
<handlerReadIndexStatement_-_3> ::= <LIMIT>  <limitClauseAtom>  ;
<handlerReadIndexStatement> ::= <HANDLER>  <tableName>  <READ>  <uid>  <handlerReadIndexStatement_-_1>  <handlerReadIndexStatement_-_2>  <handlerReadIndexStatement_-_3>  ;
# PARSER: handlerReadStatement
<handlerReadStatement_-_1> ::= <FIRST>  ;
<handlerReadStatement_-_1> ::= <NEXT>  ;
<handlerReadStatement_-_2> ::= ;
<handlerReadStatement_-_2> ::= <WHERE>  <expression>  ;
<handlerReadStatement_-_3> ::= ;
<handlerReadStatement_-_3> ::= <LIMIT>  <limitClauseAtom>  ;
<handlerReadStatement> ::= <HANDLER>  <tableName>  <READ>  <handlerReadStatement_-_1>  <handlerReadStatement_-_2>  <handlerReadStatement_-_3>  ;
# PARSER: handlerCloseStatement
<handlerCloseStatement> ::= <HANDLER>  <tableName>  <CLOSE>  ;
# PARSER: singleUpdateStatement
<singleUpdateStatement_-_1> ::= ;
<singleUpdateStatement_-_1> ::= <LOW_PRIORITY>  ;
<singleUpdateStatement_-_2> ::= ;
<singleUpdateStatement_-_2> ::= <IGNORE>  ;
<singleUpdateStatement_-_3> ::= ;
<singleUpdateStatement_-_4> ::= ;
<singleUpdateStatement_-_4> ::= <AS>  ;
<singleUpdateStatement_-_3> ::= <singleUpdateStatement_-_4>  <uid>  ;
<singleUpdateStatement_-_5> ::= <singleUpdateStatement_-_6>  ;
<singleUpdateStatement_-_6> ::= ;
<singleUpdateStatement_-_7> ::= ','  <updatedElement>  ;
<singleUpdateStatement_-_6> ::= <singleUpdateStatement_-_7>  <singleUpdateStatement_-_6>  ;
<singleUpdateStatement_-_8> ::= ;
<singleUpdateStatement_-_8> ::= <WHERE>  <expression>  ;
<singleUpdateStatement_-_9> ::= ;
<singleUpdateStatement_-_9> ::= <orderByClause>  ;
<singleUpdateStatement_-_10> ::= ;
<singleUpdateStatement_-_10> ::= <limitClause>  ;
<singleUpdateStatement> ::= <UPDATE>  <singleUpdateStatement_-_1>  <singleUpdateStatement_-_2>  <tableName>  <singleUpdateStatement_-_3>  <SET>  <updatedElement>  <singleUpdateStatement_-_5>  <singleUpdateStatement_-_8>  <singleUpdateStatement_-_9>  <singleUpdateStatement_-_10>  ;
# PARSER: multipleUpdateStatement
<multipleUpdateStatement_-_1> ::= ;
<multipleUpdateStatement_-_1> ::= <LOW_PRIORITY>  ;
<multipleUpdateStatement_-_2> ::= ;
<multipleUpdateStatement_-_2> ::= <IGNORE>  ;
<multipleUpdateStatement_-_3> ::= <multipleUpdateStatement_-_4>  ;
<multipleUpdateStatement_-_4> ::= ;
<multipleUpdateStatement_-_5> ::= ','  <updatedElement>  ;
<multipleUpdateStatement_-_4> ::= <multipleUpdateStatement_-_5>  <multipleUpdateStatement_-_4>  ;
<multipleUpdateStatement_-_6> ::= ;
<multipleUpdateStatement_-_6> ::= <WHERE>  <expression>  ;
<multipleUpdateStatement> ::= <UPDATE>  <multipleUpdateStatement_-_1>  <multipleUpdateStatement_-_2>  <tableSources>  <SET>  <updatedElement>  <multipleUpdateStatement_-_3>  <multipleUpdateStatement_-_6>  ;
# PARSER: orderByClause
<orderByClause_-_1> ::= <orderByClause_-_2>  ;
<orderByClause_-_2> ::= ;
<orderByClause_-_3> ::= ','  <orderByExpression>  ;
<orderByClause_-_2> ::= <orderByClause_-_3>  <orderByClause_-_2>  ;
<orderByClause> ::= <ORDER>  <BY>  <orderByExpression>  <orderByClause_-_1>  ;
# PARSER: orderByExpression
<orderByExpression_-_1> ::= ;
<orderByExpression_-_1> ::= <ASC>  ;
<orderByExpression_-_1> ::= <DESC>  ;
<orderByExpression> ::= <expression>  <orderByExpression_-_1>  ;
# PARSER: tableSources
<tableSources_-_1> ::= <tableSources_-_2>  ;
<tableSources_-_2> ::= ;
<tableSources_-_3> ::= ','  <tableSource>  ;
<tableSources_-_2> ::= <tableSources_-_3>  <tableSources_-_2>  ;
<tableSources> ::= <tableSource>  <tableSources_-_1>  ;
# PARSER: tableSource
<tableSource_-_1> ::= <tableSource_-_2>  ;
<tableSource_-_2> ::= ;
<tableSource_-_2> ::= <joinPart>  <tableSource_-_2>  ;
<tableSource> ::= <tableSourceItem>  <tableSource_-_1>  ;
<tableSource_-_3> ::= <tableSource_-_4>  ;
<tableSource_-_4> ::= ;
<tableSource_-_4> ::= <joinPart>  <tableSource_-_4>  ;
<tableSource> ::= '('  <tableSourceItem>  <tableSource_-_3>  ')'  ;
# PARSER: tableSourceItem
<tableSourceItem_-_1> ::= ;
<tableSourceItem_-_1> ::= <PARTITION>  '('  <uidList>  ')'  ;
<tableSourceItem_-_2> ::= ;
<tableSourceItem_-_3> ::= ;
<tableSourceItem_-_3> ::= <AS>  ;
<tableSourceItem_-_2> ::= <tableSourceItem_-_3>  <uid>  ;
<tableSourceItem_-_4> ::= ;
<tableSourceItem_-_5> ::= <tableSourceItem_-_6>  ;
<tableSourceItem_-_6> ::= ;
<tableSourceItem_-_7> ::= ','  <indexHint>  ;
<tableSourceItem_-_6> ::= <tableSourceItem_-_7>  <tableSourceItem_-_6>  ;
<tableSourceItem_-_4> ::= <indexHint>  <tableSourceItem_-_5>  ;
<tableSourceItem> ::= <tableName>  <tableSourceItem_-_1>  <tableSourceItem_-_2>  <tableSourceItem_-_4>  ;
<tableSourceItem_-_8> ::= <selectStatement>  ;
<tableSourceItem_-_8> ::= '('  <selectStatement>  ')'  ;
<tableSourceItem_-_9> ::= ;
<tableSourceItem_-_9> ::= <AS>  ;
<tableSourceItem> ::= <tableSourceItem_-_8>  <tableSourceItem_-_9>  <uid>  ;
<tableSourceItem> ::= '('  <tableSources>  ')'  ;
# PARSER: indexHint
<indexHint_-_1> ::= <USE>  ;
<indexHint_-_1> ::= <IGNORE>  ;
<indexHint_-_1> ::= <FORCE>  ;
<indexHint_-_2> ::= <INDEX>  ;
<indexHint_-_2> ::= <KEY>  ;
<indexHint_-_3> ::= ;
<indexHint_-_3> ::= <FOR>  <indexHintType>  ;
<indexHint> ::= <indexHint_-_1>  <indexHint_-_2>  <indexHint_-_3>  '('  <uidList>  ')'  ;
# PARSER: indexHintType
<indexHintType> ::= <JOIN>  ;
<indexHintType> ::= <ORDER>  <BY>  ;
<indexHintType> ::= <GROUP>  <BY>  ;
# PARSER: joinPart
<joinPart_-_1> ::= ;
<joinPart_-_1> ::= <INNER>  ;
<joinPart_-_1> ::= <CROSS>  ;
<joinPart_-_2> ::= ;
<joinPart_-_2> ::= <ON>  <expression>  ;
<joinPart_-_2> ::= <USING>  '('  <uidList>  ')'  ;
<joinPart> ::= <joinPart_-_1>  <JOIN>  <tableSourceItem>  <joinPart_-_2>  ;
<joinPart_-_3> ::= ;
<joinPart_-_3> ::= <ON>  <expression>  ;
<joinPart> ::= <STRAIGHT_JOIN>  <tableSourceItem>  <joinPart_-_3>  ;
<joinPart_-_4> ::= <LEFT>  ;
<joinPart_-_4> ::= <RIGHT>  ;
<joinPart_-_5> ::= ;
<joinPart_-_5> ::= <OUTER>  ;
<joinPart_-_6> ::= <ON>  <expression>  ;
<joinPart_-_6> ::= <USING>  '('  <uidList>  ')'  ;
<joinPart> ::= <joinPart_-_4>  <joinPart_-_5>  <JOIN>  <tableSourceItem>  <joinPart_-_6>  ;
<joinPart_-_7> ::= ;
<joinPart_-_8> ::= <LEFT>  ;
<joinPart_-_8> ::= <RIGHT>  ;
<joinPart_-_9> ::= ;
<joinPart_-_9> ::= <OUTER>  ;
<joinPart_-_7> ::= <joinPart_-_8>  <joinPart_-_9>  ;
<joinPart> ::= <NATURAL>  <joinPart_-_7>  <JOIN>  <tableSourceItem>  ;
# PARSER: queryExpression
<queryExpression> ::= '('  <querySpecification>  ')'  ;
<queryExpression> ::= '('  <queryExpression>  ')'  ;
# PARSER: queryExpressionNointo
<queryExpressionNointo> ::= '('  <querySpecificationNointo>  ')'  ;
<queryExpressionNointo> ::= '('  <queryExpressionNointo>  ')'  ;
# PARSER: querySpecification
<querySpecification_-_1> ::= <querySpecification_-_2>  ;
<querySpecification_-_2> ::= ;
<querySpecification_-_2> ::= <selectSpec>  <querySpecification_-_2>  ;
<querySpecification_-_3> ::= ;
<querySpecification_-_3> ::= <selectIntoExpression>  ;
<querySpecification_-_4> ::= ;
<querySpecification_-_4> ::= <fromClause>  ;
<querySpecification_-_5> ::= ;
<querySpecification_-_5> ::= <orderByClause>  ;
<querySpecification_-_6> ::= ;
<querySpecification_-_6> ::= <limitClause>  ;
<querySpecification> ::= <SELECT>  <querySpecification_-_1>  <selectElements>  <querySpecification_-_3>  <querySpecification_-_4>  <querySpecification_-_5>  <querySpecification_-_6>  ;
<querySpecification_-_7> ::= <querySpecification_-_8>  ;
<querySpecification_-_8> ::= ;
<querySpecification_-_8> ::= <selectSpec>  <querySpecification_-_8>  ;
<querySpecification_-_9> ::= ;
<querySpecification_-_9> ::= <fromClause>  ;
<querySpecification_-_10> ::= ;
<querySpecification_-_10> ::= <orderByClause>  ;
<querySpecification_-_11> ::= ;
<querySpecification_-_11> ::= <limitClause>  ;
<querySpecification_-_12> ::= ;
<querySpecification_-_12> ::= <selectIntoExpression>  ;
<querySpecification> ::= <SELECT>  <querySpecification_-_7>  <selectElements>  <querySpecification_-_9>  <querySpecification_-_10>  <querySpecification_-_11>  <querySpecification_-_12>  ;
# PARSER: querySpecificationNointo
<querySpecificationNointo_-_1> ::= <querySpecificationNointo_-_2>  ;
<querySpecificationNointo_-_2> ::= ;
<querySpecificationNointo_-_2> ::= <selectSpec>  <querySpecificationNointo_-_2>  ;
<querySpecificationNointo_-_3> ::= ;
<querySpecificationNointo_-_3> ::= <fromClause>  ;
<querySpecificationNointo_-_4> ::= ;
<querySpecificationNointo_-_4> ::= <orderByClause>  ;
<querySpecificationNointo_-_5> ::= ;
<querySpecificationNointo_-_5> ::= <limitClause>  ;
<querySpecificationNointo> ::= <SELECT>  <querySpecificationNointo_-_1>  <selectElements>  <querySpecificationNointo_-_3>  <querySpecificationNointo_-_4>  <querySpecificationNointo_-_5>  ;
# PARSER: unionParenthesis
<unionParenthesis_-_1> ::= ;
<unionParenthesis_-_1> ::= <ALL>  ;
<unionParenthesis_-_1> ::= <DISTINCT>  ;
<unionParenthesis> ::= <UNION>  <unionParenthesis_-_1>  <queryExpressionNointo>  ;
# PARSER: unionStatement
<unionStatement_-_1> ::= ;
<unionStatement_-_1> ::= <ALL>  ;
<unionStatement_-_1> ::= <DISTINCT>  ;
<unionStatement_-_2> ::= <querySpecificationNointo>  ;
<unionStatement_-_2> ::= <queryExpressionNointo>  ;
<unionStatement> ::= <UNION>  <unionStatement_-_1>  <unionStatement_-_2>  ;
# PARSER: selectSpec
<selectSpec> ::= <ALL>  ;
<selectSpec> ::= <DISTINCT>  ;
<selectSpec> ::= <DISTINCTROW>  ;
<selectSpec> ::= <HIGH_PRIORITY>  ;
<selectSpec> ::= <STRAIGHT_JOIN>  ;
<selectSpec> ::= <SQL_SMALL_RESULT>  ;
<selectSpec> ::= <SQL_BIG_RESULT>  ;
<selectSpec> ::= <SQL_BUFFER_RESULT>  ;
<selectSpec> ::= <SQL_CACHE>  ;
<selectSpec> ::= <SQL_NO_CACHE>  ;
<selectSpec> ::= <SQL_CALC_FOUND_ROWS>  ;
# PARSER: selectElements
<selectElements_-_1> ::= '*'  ;
<selectElements_-_1> ::= <selectElement>  ;
<selectElements_-_2> ::= <selectElements_-_3>  ;
<selectElements_-_3> ::= ;
<selectElements_-_4> ::= ','  <selectElement>  ;
<selectElements_-_3> ::= <selectElements_-_4>  <selectElements_-_3>  ;
<selectElements> ::= <selectElements_-_1>  <selectElements_-_2>  ;
# PARSER: selectElement
<selectElement> ::= <fullId>  '.'  '*'  ;
<selectElement_-_1> ::= ;
<selectElement_-_2> ::= ;
<selectElement_-_2> ::= <AS>  ;
<selectElement_-_1> ::= <selectElement_-_2>  <uid>  ;
<selectElement> ::= <fullColumnName>  <selectElement_-_1>  ;
<selectElement_-_3> ::= ;
<selectElement_-_4> ::= ;
<selectElement_-_4> ::= <AS>  ;
<selectElement_-_3> ::= <selectElement_-_4>  <uid>  ;
<selectElement> ::= <functionCall>  <selectElement_-_3>  ;
<selectElement_-_5> ::= ;
<selectElement_-_5> ::= <LOCAL_ID>  <VAR_ASSIGN>  ;
<selectElement_-_6> ::= ;
<selectElement_-_7> ::= ;
<selectElement_-_7> ::= <AS>  ;
<selectElement_-_6> ::= <selectElement_-_7>  <uid>  ;
<selectElement> ::= <selectElement_-_5>  <expression>  <selectElement_-_6>  ;
# PARSER: selectIntoExpression
<selectIntoExpression_-_1> ::= <selectIntoExpression_-_2>  ;
<selectIntoExpression_-_2> ::= ;
<selectIntoExpression_-_3> ::= ','  <assignmentField>  ;
<selectIntoExpression_-_2> ::= <selectIntoExpression_-_3>  <selectIntoExpression_-_2>  ;
<selectIntoExpression> ::= <INTO>  <assignmentField>  <selectIntoExpression_-_1>  ;
<selectIntoExpression> ::= <INTO>  <DUMPFILE>  <STRING_LITERAL>  ;
<selectIntoExpression_-_4> ::= ;
<selectIntoExpression_-_4> ::= <CHARACTER>  <SET>  <charsetName>  ;
<selectIntoExpression_-_5> ::= ;
<selectIntoExpression_-_6> ::= <FIELDS>  ;
<selectIntoExpression_-_6> ::= <COLUMNS>  ;
<selectIntoExpression_-_7> ::= <selectIntoExpression_-_8>  ;
<selectIntoExpression_-_8> ::= <selectIntoExpression_-_9>  ;
<selectIntoExpression_-_8> ::= <selectIntoExpression_-_9>  <selectIntoExpression_-_8>  ;
<selectIntoExpression_-_9> ::= <selectFieldsInto>  ;
<selectIntoExpression_-_5> ::= <selectIntoExpression_-_6>  <selectIntoExpression_-_7>  ;
<selectIntoExpression_-_10> ::= ;
<selectIntoExpression_-_11> ::= <selectIntoExpression_-_12>  ;
<selectIntoExpression_-_12> ::= <selectIntoExpression_-_13>  ;
<selectIntoExpression_-_12> ::= <selectIntoExpression_-_13>  <selectIntoExpression_-_12>  ;
<selectIntoExpression_-_13> ::= <selectLinesInto>  ;
<selectIntoExpression_-_10> ::= <LINES>  <selectIntoExpression_-_11>  ;
<selectIntoExpression> ::= <INTO>  <OUTFILE>  <STRING_LITERAL>  <selectIntoExpression_-_4>  <selectIntoExpression_-_5>  <selectIntoExpression_-_10>  ;
# PARSER: selectFieldsInto
<selectFieldsInto> ::= <TERMINATED>  <BY>  <STRING_LITERAL>  ;
<selectFieldsInto_-_1> ::= ;
<selectFieldsInto_-_1> ::= <OPTIONALLY>  ;
<selectFieldsInto> ::= <selectFieldsInto_-_1>  <ENCLOSED>  <BY>  <STRING_LITERAL>  ;
<selectFieldsInto> ::= <ESCAPED>  <BY>  <STRING_LITERAL>  ;
# PARSER: selectLinesInto
<selectLinesInto> ::= <STARTING>  <BY>  <STRING_LITERAL>  ;
<selectLinesInto> ::= <TERMINATED>  <BY>  <STRING_LITERAL>  ;
# PARSER: fromClause
<fromClause_-_1> ::= ;
<fromClause_-_1> ::= <WHERE>  <expression>  ;
<fromClause_-_2> ::= ;
<fromClause_-_3> ::= <fromClause_-_4>  ;
<fromClause_-_4> ::= ;
<fromClause_-_5> ::= ','  <groupByItem>  ;
<fromClause_-_4> ::= <fromClause_-_5>  <fromClause_-_4>  ;
<fromClause_-_6> ::= ;
<fromClause_-_6> ::= <WITH>  <ROLLUP>  ;
<fromClause_-_2> ::= <GROUP>  <BY>  <groupByItem>  <fromClause_-_3>  <fromClause_-_6>  ;
<fromClause_-_7> ::= ;
<fromClause_-_7> ::= <HAVING>  <expression>  ;
<fromClause> ::= <FROM>  <tableSources>  <fromClause_-_1>  <fromClause_-_2>  <fromClause_-_7>  ;
# PARSER: groupByItem
<groupByItem_-_1> ::= ;
<groupByItem_-_1> ::= <ASC>  ;
<groupByItem_-_1> ::= <DESC>  ;
<groupByItem> ::= <expression>  <groupByItem_-_1>  ;
# PARSER: limitClause
<limitClause_-_2> ::= ;
<limitClause_-_2> ::= <limitClauseAtom>  ','  ;
<limitClause_-_1> ::= <limitClause_-_2>  <limitClauseAtom>  ;
<limitClause_-_1> ::= <limitClauseAtom>  <OFFSET>  <limitClauseAtom>  ;
<limitClause> ::= <LIMIT>  <limitClause_-_1>  ;
# PARSER: limitClauseAtom
<limitClauseAtom> ::= <decimalLiteral>  ;
<limitClauseAtom> ::= <mysqlVariable>  ;
# PARSER: startTransaction
<startTransaction_-_1> ::= ;
<startTransaction_-_2> ::= <startTransaction_-_3>  ;
<startTransaction_-_3> ::= ;
<startTransaction_-_4> ::= ','  <transactionMode>  ;
<startTransaction_-_3> ::= <startTransaction_-_4>  <startTransaction_-_3>  ;
<startTransaction_-_1> ::= <transactionMode>  <startTransaction_-_2>  ;
<startTransaction> ::= <START>  <TRANSACTION>  <startTransaction_-_1>  ;
# PARSER: beginWork
<beginWork_-_1> ::= ;
<beginWork_-_1> ::= <WORK>  ;
<beginWork> ::= <BEGIN>  <beginWork_-_1>  ;
# PARSER: commitWork
<commitWork_-_1> ::= ;
<commitWork_-_1> ::= <WORK>  ;
<commitWork_-_2> ::= ;
<commitWork_-_3> ::= ;
<commitWork_-_3> ::= <NO>  ;
<commitWork_-_2> ::= <AND>  <commitWork_-_3>  <CHAIN>  ;
<commitWork_-_4> ::= ;
<commitWork_-_5> ::= ;
<commitWork_-_5> ::= <NO>  ;
<commitWork_-_4> ::= <commitWork_-_5>  <RELEASE>  ;
<commitWork> ::= <COMMIT>  <commitWork_-_1>  <commitWork_-_2>  <commitWork_-_4>  ;
# PARSER: rollbackWork
<rollbackWork_-_1> ::= ;
<rollbackWork_-_1> ::= <WORK>  ;
<rollbackWork_-_2> ::= ;
<rollbackWork_-_3> ::= ;
<rollbackWork_-_3> ::= <NO>  ;
<rollbackWork_-_2> ::= <AND>  <rollbackWork_-_3>  <CHAIN>  ;
<rollbackWork_-_4> ::= ;
<rollbackWork_-_5> ::= ;
<rollbackWork_-_5> ::= <NO>  ;
<rollbackWork_-_4> ::= <rollbackWork_-_5>  <RELEASE>  ;
<rollbackWork> ::= <ROLLBACK>  <rollbackWork_-_1>  <rollbackWork_-_2>  <rollbackWork_-_4>  ;
# PARSER: savepointStatement
<savepointStatement> ::= <SAVEPOINT>  <uid>  ;
# PARSER: rollbackStatement
<rollbackStatement_-_1> ::= ;
<rollbackStatement_-_1> ::= <WORK>  ;
<rollbackStatement_-_2> ::= ;
<rollbackStatement_-_2> ::= <SAVEPOINT>  ;
<rollbackStatement> ::= <ROLLBACK>  <rollbackStatement_-_1>  <TO>  <rollbackStatement_-_2>  <uid>  ;
# PARSER: releaseStatement
<releaseStatement> ::= <RELEASE>  <SAVEPOINT>  <uid>  ;
# PARSER: lockTables
<lockTables_-_1> ::= <lockTables_-_2>  ;
<lockTables_-_2> ::= ;
<lockTables_-_3> ::= ','  <lockTableElement>  ;
<lockTables_-_2> ::= <lockTables_-_3>  <lockTables_-_2>  ;
<lockTables> ::= <LOCK>  <TABLES>  <lockTableElement>  <lockTables_-_1>  ;
# PARSER: unlockTables
<unlockTables> ::= <UNLOCK>  <TABLES>  ;
# PARSER: setAutocommitStatement
<setAutocommitStatement_-_1> ::= '0'  ;
<setAutocommitStatement_-_1> ::= '1'  ;
<setAutocommitStatement> ::= <SET>  <AUTOCOMMIT>  '='  <setAutocommitStatement_-_1>  ;
# PARSER: setTransactionStatement
<setTransactionStatement_-_1> ::= ;
<setTransactionStatement_-_1> ::= <GLOBAL>  ;
<setTransactionStatement_-_1> ::= <SESSION>  ;
<setTransactionStatement_-_2> ::= <setTransactionStatement_-_3>  ;
<setTransactionStatement_-_3> ::= ;
<setTransactionStatement_-_4> ::= ','  <transactionOption>  ;
<setTransactionStatement_-_3> ::= <setTransactionStatement_-_4>  <setTransactionStatement_-_3>  ;
<setTransactionStatement> ::= <SET>  <setTransactionStatement_-_1>  <TRANSACTION>  <transactionOption>  <setTransactionStatement_-_2>  ;
# PARSER: transactionMode
<transactionMode> ::= <WITH>  <CONSISTENT>  <SNAPSHOT>  ;
<transactionMode> ::= <READ>  <WRITE>  ;
<transactionMode> ::= <READ>  <ONLY>  ;
# PARSER: lockTableElement
<lockTableElement_-_1> ::= ;
<lockTableElement_-_2> ::= ;
<lockTableElement_-_2> ::= <AS>  ;
<lockTableElement_-_1> ::= <lockTableElement_-_2>  <uid>  ;
<lockTableElement> ::= <tableName>  <lockTableElement_-_1>  <lockAction>  ;
# PARSER: lockAction
<lockAction_-_1> ::= ;
<lockAction_-_1> ::= <LOCAL>  ;
<lockAction> ::= <READ>  <lockAction_-_1>  ;
<lockAction_-_2> ::= ;
<lockAction_-_2> ::= <LOW_PRIORITY>  ;
<lockAction> ::= <lockAction_-_2>  <WRITE>  ;
# PARSER: transactionOption
<transactionOption> ::= <ISOLATION>  <LEVEL>  <transactionLevel>  ;
<transactionOption> ::= <READ>  <WRITE>  ;
<transactionOption> ::= <READ>  <ONLY>  ;
# PARSER: transactionLevel
<transactionLevel> ::= <REPEATABLE>  <READ>  ;
<transactionLevel> ::= <READ>  <COMMITTED>  ;
<transactionLevel> ::= <READ>  <UNCOMMITTED>  ;
<transactionLevel> ::= <SERIALIZABLE>  ;
# PARSER: changeMaster
<changeMaster_-_1> ::= <changeMaster_-_2>  ;
<changeMaster_-_2> ::= ;
<changeMaster_-_3> ::= ','  <masterOption>  ;
<changeMaster_-_2> ::= <changeMaster_-_3>  <changeMaster_-_2>  ;
<changeMaster_-_4> ::= ;
<changeMaster_-_4> ::= <channelOption>  ;
<changeMaster> ::= <CHANGE>  <MASTER>  <TO>  <masterOption>  <changeMaster_-_1>  <changeMaster_-_4>  ;
# PARSER: changeReplicationFilter
<changeReplicationFilter_-_1> ::= <changeReplicationFilter_-_2>  ;
<changeReplicationFilter_-_2> ::= ;
<changeReplicationFilter_-_3> ::= ','  <replicationFilter>  ;
<changeReplicationFilter_-_2> ::= <changeReplicationFilter_-_3>  <changeReplicationFilter_-_2>  ;
<changeReplicationFilter> ::= <CHANGE>  <REPLICATION>  <FILTER>  <replicationFilter>  <changeReplicationFilter_-_1>  ;
# PARSER: purgeBinaryLogs
<purgeBinaryLogs_-_1> ::= <BINARY>  ;
<purgeBinaryLogs_-_1> ::= <MASTER>  ;
<purgeBinaryLogs_-_2> ::= <TO>  <STRING_LITERAL>  ;
<purgeBinaryLogs_-_2> ::= <BEFORE>  <STRING_LITERAL>  ;
<purgeBinaryLogs> ::= <PURGE>  <purgeBinaryLogs_-_1>  <LOGS>  <purgeBinaryLogs_-_2>  ;
# PARSER: resetMaster
<resetMaster> ::= <RESET>  <MASTER>  ;
# PARSER: resetSlave
<resetSlave_-_1> ::= ;
<resetSlave_-_1> ::= <ALL>  ;
<resetSlave_-_2> ::= ;
<resetSlave_-_2> ::= <channelOption>  ;
<resetSlave> ::= <RESET>  <SLAVE>  <resetSlave_-_1>  <resetSlave_-_2>  ;
# PARSER: startSlave
<startSlave_-_1> ::= ;
<startSlave_-_2> ::= <startSlave_-_3>  ;
<startSlave_-_3> ::= ;
<startSlave_-_4> ::= ','  <threadType>  ;
<startSlave_-_3> ::= <startSlave_-_4>  <startSlave_-_3>  ;
<startSlave_-_1> ::= <threadType>  <startSlave_-_2>  ;
<startSlave_-_5> ::= ;
<startSlave_-_5> ::= <UNTIL>  <untilOption>  ;
<startSlave_-_6> ::= <startSlave_-_7>  ;
<startSlave_-_7> ::= ;
<startSlave_-_7> ::= <connectionOption>  <startSlave_-_7>  ;
<startSlave_-_8> ::= ;
<startSlave_-_8> ::= <channelOption>  ;
<startSlave> ::= <START>  <SLAVE>  <startSlave_-_1>  <startSlave_-_5>  <startSlave_-_6>  <startSlave_-_8>  ;
# PARSER: stopSlave
<stopSlave_-_1> ::= ;
<stopSlave_-_2> ::= <stopSlave_-_3>  ;
<stopSlave_-_3> ::= ;
<stopSlave_-_4> ::= ','  <threadType>  ;
<stopSlave_-_3> ::= <stopSlave_-_4>  <stopSlave_-_3>  ;
<stopSlave_-_1> ::= <threadType>  <stopSlave_-_2>  ;
<stopSlave> ::= <STOP>  <SLAVE>  <stopSlave_-_1>  ;
# PARSER: startGroupReplication
<startGroupReplication> ::= <START>  <GROUP_REPLICATION>  ;
# PARSER: stopGroupReplication
<stopGroupReplication> ::= <STOP>  <GROUP_REPLICATION>  ;
# PARSER: masterOption
<masterOption> ::= <stringMasterOption>  '='  <STRING_LITERAL>  ;
<masterOption> ::= <decimalMasterOption>  '='  <decimalLiteral>  ;
<masterOption_-_1> ::= '0'  ;
<masterOption_-_1> ::= '1'  ;
<masterOption> ::= <boolMasterOption>  '='  <masterOption_-_1>  ;
<masterOption> ::= <MASTER_HEARTBEAT_PERIOD>  '='  <REAL_LITERAL>  ;
<masterOption_-_2> ::= ;
<masterOption_-_3> ::= <masterOption_-_4>  ;
<masterOption_-_4> ::= ;
<masterOption_-_5> ::= ','  <uid>  ;
<masterOption_-_4> ::= <masterOption_-_5>  <masterOption_-_4>  ;
<masterOption_-_2> ::= <uid>  <masterOption_-_3>  ;
<masterOption> ::= <IGNORE_SERVER_IDS>  '='  '('  <masterOption_-_2>  ')'  ;
# PARSER: stringMasterOption
<stringMasterOption> ::= <MASTER_BIND>  ;
<stringMasterOption> ::= <MASTER_HOST>  ;
<stringMasterOption> ::= <MASTER_USER>  ;
<stringMasterOption> ::= <MASTER_PASSWORD>  ;
<stringMasterOption> ::= <MASTER_LOG_FILE>  ;
<stringMasterOption> ::= <RELAY_LOG_FILE>  ;
<stringMasterOption> ::= <MASTER_SSL_CA>  ;
<stringMasterOption> ::= <MASTER_SSL_CAPATH>  ;
<stringMasterOption> ::= <MASTER_SSL_CERT>  ;
<stringMasterOption> ::= <MASTER_SSL_CRL>  ;
<stringMasterOption> ::= <MASTER_SSL_CRLPATH>  ;
<stringMasterOption> ::= <MASTER_SSL_KEY>  ;
<stringMasterOption> ::= <MASTER_SSL_CIPHER>  ;
<stringMasterOption> ::= <MASTER_TLS_VERSION>  ;
# PARSER: decimalMasterOption
<decimalMasterOption> ::= <MASTER_PORT>  ;
<decimalMasterOption> ::= <MASTER_CONNECT_RETRY>  ;
<decimalMasterOption> ::= <MASTER_RETRY_COUNT>  ;
<decimalMasterOption> ::= <MASTER_DELAY>  ;
<decimalMasterOption> ::= <MASTER_LOG_POS>  ;
<decimalMasterOption> ::= <RELAY_LOG_POS>  ;
# PARSER: boolMasterOption
<boolMasterOption> ::= <MASTER_AUTO_POSITION>  ;
<boolMasterOption> ::= <MASTER_SSL>  ;
<boolMasterOption> ::= <MASTER_SSL_VERIFY_SERVER_CERT>  ;
# PARSER: channelOption
<channelOption> ::= <FOR>  <CHANNEL>  <STRING_LITERAL>  ;
# PARSER: replicationFilter
<replicationFilter> ::= <REPLICATE_DO_DB>  '='  '('  <uidList>  ')'  ;
<replicationFilter> ::= <REPLICATE_IGNORE_DB>  '='  '('  <uidList>  ')'  ;
<replicationFilter> ::= <REPLICATE_DO_TABLE>  '='  '('  <tables>  ')'  ;
<replicationFilter> ::= <REPLICATE_IGNORE_TABLE>  '='  '('  <tables>  ')'  ;
<replicationFilter> ::= <REPLICATE_WILD_DO_TABLE>  '='  '('  <simpleStrings>  ')'  ;
<replicationFilter> ::= <REPLICATE_WILD_IGNORE_TABLE>  '='  '('  <simpleStrings>  ')'  ;
<replicationFilter_-_1> ::= <replicationFilter_-_2>  ;
<replicationFilter_-_2> ::= ;
<replicationFilter_-_3> ::= ','  <tablePair>  ;
<replicationFilter_-_2> ::= <replicationFilter_-_3>  <replicationFilter_-_2>  ;
<replicationFilter> ::= <REPLICATE_REWRITE_DB>  '='  '('  <tablePair>  <replicationFilter_-_1>  ')'  ;
# PARSER: tablePair
<tablePair> ::= '('  <tableName>  ','  <tableName>  ')'  ;
# PARSER: threadType
<threadType> ::= <IO_THREAD>  ;
<threadType> ::= <SQL_THREAD>  ;
# PARSER: untilOption
<untilOption_-_1> ::= <SQL_BEFORE_GTIDS>  ;
<untilOption_-_1> ::= <SQL_AFTER_GTIDS>  ;
<untilOption> ::= <untilOption_-_1>  '='  <gtuidSet>  ;
<untilOption> ::= <MASTER_LOG_FILE>  '='  <STRING_LITERAL>  ','  <MASTER_LOG_POS>  '='  <decimalLiteral>  ;
<untilOption> ::= <RELAY_LOG_FILE>  '='  <STRING_LITERAL>  ','  <RELAY_LOG_POS>  '='  <decimalLiteral>  ;
<untilOption> ::= <SQL_AFTER_MTS_GAPS>  ;
# PARSER: connectionOption
<connectionOption> ::= <USER>  '='  <STRING_LITERAL>  ;
<connectionOption> ::= <PASSWORD>  '='  <STRING_LITERAL>  ;
<connectionOption> ::= <DEFAULT_AUTH>  '='  <STRING_LITERAL>  ;
<connectionOption> ::= <PLUGIN_DIR>  '='  <STRING_LITERAL>  ;
# PARSER: gtuidSet
<gtuidSet_-_1> ::= <gtuidSet_-_2>  ;
<gtuidSet_-_2> ::= ;
<gtuidSet_-_3> ::= ','  <uuidSet>  ;
<gtuidSet_-_2> ::= <gtuidSet_-_3>  <gtuidSet_-_2>  ;
<gtuidSet> ::= <uuidSet>  <gtuidSet_-_1>  ;
<gtuidSet> ::= <STRING_LITERAL>  ;
# PARSER: xaStartTransaction
<xaStartTransaction_-_1> ::= <START>  ;
<xaStartTransaction_-_1> ::= <BEGIN>  ;
<xaStartTransaction_-_2> ::= ;
<xaStartTransaction_-_2> ::= <JOIN>  ;
<xaStartTransaction_-_2> ::= <RESUME>  ;
<xaStartTransaction> ::= <XA>  <xaStartTransaction_-_1>  <xid>  <xaStartTransaction_-_2>  ;
# PARSER: xaEndTransaction
<xaEndTransaction_-_1> ::= ;
<xaEndTransaction_-_2> ::= ;
<xaEndTransaction_-_2> ::= <FOR>  <MIGRATE>  ;
<xaEndTransaction_-_1> ::= <SUSPEND>  <xaEndTransaction_-_2>  ;
<xaEndTransaction> ::= <XA>  <END>  <xid>  <xaEndTransaction_-_1>  ;
# PARSER: xaPrepareStatement
<xaPrepareStatement> ::= <XA>  <PREPARE>  <xid>  ;
# PARSER: xaCommitWork
<xaCommitWork_-_1> ::= ;
<xaCommitWork_-_1> ::= <ONE>  <PHASE>  ;
<xaCommitWork> ::= <XA>  <COMMIT>  <xid>  <xaCommitWork_-_1>  ;
# PARSER: xaRollbackWork
<xaRollbackWork> ::= <XA>  <ROLLBACK>  <xid>  ;
# PARSER: xaRecoverWork
<xaRecoverWork_-_1> ::= ;
<xaRecoverWork_-_1> ::= <CONVERT>  <xid>  ;
<xaRecoverWork> ::= <XA>  <RECOVER>  <xaRecoverWork_-_1>  ;
# PARSER: prepareStatement
<prepareStatement_-_1> ::= <STRING_LITERAL>  ;
<prepareStatement_-_1> ::= <LOCAL_ID>  ;
<prepareStatement> ::= <PREPARE>  <uid>  <FROM>  <prepareStatement_-_1>  ;
# PARSER: executeStatement
<executeStatement_-_1> ::= ;
<executeStatement_-_1> ::= <USING>  <userVariables>  ;
<executeStatement> ::= <EXECUTE>  <uid>  <executeStatement_-_1>  ;
# PARSER: deallocatePrepare
<deallocatePrepare_-_1> ::= <DEALLOCATE>  ;
<deallocatePrepare_-_1> ::= <DROP>  ;
<deallocatePrepare> ::= <deallocatePrepare_-_1>  <PREPARE>  <uid>  ;
# PARSER: routineBody
<routineBody> ::= <blockStatement>  ;
<routineBody> ::= <sqlStatement>  ;
# PARSER: blockStatement
<blockStatement_-_1> ::= ;
<blockStatement_-_1> ::= <uid>  ':'  ;
<blockStatement_-_2> ::= ;
<blockStatement_-_3> ::= <blockStatement_-_4>  ;
<blockStatement_-_4> ::= ;
<blockStatement_-_5> ::= <declareVariable>  <SEMI>  ;
<blockStatement_-_4> ::= <blockStatement_-_5>  <blockStatement_-_4>  ;
<blockStatement_-_6> ::= <blockStatement_-_7>  ;
<blockStatement_-_7> ::= ;
<blockStatement_-_8> ::= <declareCondition>  <SEMI>  ;
<blockStatement_-_7> ::= <blockStatement_-_8>  <blockStatement_-_7>  ;
<blockStatement_-_9> ::= <blockStatement_-_10>  ;
<blockStatement_-_10> ::= ;
<blockStatement_-_11> ::= <declareCursor>  <SEMI>  ;
<blockStatement_-_10> ::= <blockStatement_-_11>  <blockStatement_-_10>  ;
<blockStatement_-_12> ::= <blockStatement_-_13>  ;
<blockStatement_-_13> ::= ;
<blockStatement_-_14> ::= <declareHandler>  <SEMI>  ;
<blockStatement_-_13> ::= <blockStatement_-_14>  <blockStatement_-_13>  ;
<blockStatement_-_15> ::= <blockStatement_-_16>  ;
<blockStatement_-_16> ::= ;
<blockStatement_-_16> ::= <procedureSqlStatement>  <blockStatement_-_16>  ;
<blockStatement_-_2> ::= <blockStatement_-_3>  <blockStatement_-_6>  <blockStatement_-_9>  <blockStatement_-_12>  <blockStatement_-_15>  ;
<blockStatement_-_17> ::= ;
<blockStatement_-_17> ::= <uid>  ;
<blockStatement> ::= <blockStatement_-_1>  <BEGIN>  <blockStatement_-_2>  <END>  <blockStatement_-_17>  ;
# PARSER: caseStatement
<caseStatement_-_1> ::= ;
<caseStatement_-_1> ::= <uid>  ;
<caseStatement_-_1> ::= <expression>  ;
<caseStatement_-_2> ::= <caseStatement_-_3>  ;
<caseStatement_-_3> ::= <caseStatement_-_4>  ;
<caseStatement_-_3> ::= <caseStatement_-_4>  <caseStatement_-_3>  ;
<caseStatement_-_4> ::= <caseAlternative>  ;
<caseStatement_-_5> ::= ;
<caseStatement_-_6> ::= <caseStatement_-_7>  ;
<caseStatement_-_7> ::= <caseStatement_-_8>  ;
<caseStatement_-_7> ::= <caseStatement_-_8>  <caseStatement_-_7>  ;
<caseStatement_-_8> ::= <procedureSqlStatement>  ;
<caseStatement_-_5> ::= <ELSE>  <caseStatement_-_6>  ;
<caseStatement> ::= <CASE>  <caseStatement_-_1>  <caseStatement_-_2>  <caseStatement_-_5>  <END>  <CASE>  ;
# PARSER: ifStatement
<ifStatement_-_1> ::= <ifStatement_-_2>  ;
<ifStatement_-_2> ::= <ifStatement_-_3>  ;
<ifStatement_-_2> ::= <ifStatement_-_3>  <ifStatement_-_2>  ;
<ifStatement_-_3> ::= <procedureSqlStatement>  ;
<ifStatement_-_4> ::= <ifStatement_-_5>  ;
<ifStatement_-_5> ::= ;
<ifStatement_-_5> ::= <elifAlternative>  <ifStatement_-_5>  ;
<ifStatement_-_6> ::= ;
<ifStatement_-_7> ::= <ifStatement_-_8>  ;
<ifStatement_-_8> ::= <ifStatement_-_9>  ;
<ifStatement_-_8> ::= <ifStatement_-_9>  <ifStatement_-_8>  ;
<ifStatement_-_9> ::= <procedureSqlStatement>  ;
<ifStatement_-_6> ::= <ELSE>  <ifStatement_-_7>  ;
<ifStatement> ::= <IF>  <expression>  <THEN>  <ifStatement_-_1>  <ifStatement_-_4>  <ifStatement_-_6>  <END>  <IF>  ;
# PARSER: iterateStatement
<iterateStatement> ::= <ITERATE>  <uid>  ;
# PARSER: leaveStatement
<leaveStatement> ::= <LEAVE>  <uid>  ;
# PARSER: loopStatement
<loopStatement_-_1> ::= ;
<loopStatement_-_1> ::= <uid>  ':'  ;
<loopStatement_-_2> ::= <loopStatement_-_3>  ;
<loopStatement_-_3> ::= <loopStatement_-_4>  ;
<loopStatement_-_3> ::= <loopStatement_-_4>  <loopStatement_-_3>  ;
<loopStatement_-_4> ::= <procedureSqlStatement>  ;
<loopStatement_-_5> ::= ;
<loopStatement_-_5> ::= <uid>  ;
<loopStatement> ::= <loopStatement_-_1>  <LOOP>  <loopStatement_-_2>  <END>  <LOOP>  <loopStatement_-_5>  ;
# PARSER: repeatStatement
<repeatStatement_-_1> ::= ;
<repeatStatement_-_1> ::= <uid>  ':'  ;
<repeatStatement_-_2> ::= <repeatStatement_-_3>  ;
<repeatStatement_-_3> ::= <repeatStatement_-_4>  ;
<repeatStatement_-_3> ::= <repeatStatement_-_4>  <repeatStatement_-_3>  ;
<repeatStatement_-_4> ::= <procedureSqlStatement>  ;
<repeatStatement_-_5> ::= ;
<repeatStatement_-_5> ::= <uid>  ;
<repeatStatement> ::= <repeatStatement_-_1>  <REPEAT>  <repeatStatement_-_2>  <UNTIL>  <expression>  <END>  <REPEAT>  <repeatStatement_-_5>  ;
# PARSER: returnStatement
<returnStatement> ::= <RETURN>  <expression>  ;
# PARSER: whileStatement
<whileStatement_-_1> ::= ;
<whileStatement_-_1> ::= <uid>  ':'  ;
<whileStatement_-_2> ::= <whileStatement_-_3>  ;
<whileStatement_-_3> ::= <whileStatement_-_4>  ;
<whileStatement_-_3> ::= <whileStatement_-_4>  <whileStatement_-_3>  ;
<whileStatement_-_4> ::= <procedureSqlStatement>  ;
<whileStatement_-_5> ::= ;
<whileStatement_-_5> ::= <uid>  ;
<whileStatement> ::= <whileStatement_-_1>  <WHILE>  <expression>  <DO>  <whileStatement_-_2>  <END>  <WHILE>  <whileStatement_-_5>  ;
# PARSER: cursorStatement
<cursorStatement> ::= <CLOSE>  <uid>  ;
<cursorStatement_-_1> ::= ;
<cursorStatement_-_2> ::= ;
<cursorStatement_-_2> ::= <NEXT>  ;
<cursorStatement_-_1> ::= <cursorStatement_-_2>  <FROM>  ;
<cursorStatement> ::= <FETCH>  <cursorStatement_-_1>  <uid>  <INTO>  <uidList>  ;
<cursorStatement> ::= <OPEN>  <uid>  ;
# PARSER: declareVariable
<declareVariable_-_1> ::= ;
<declareVariable_-_1> ::= <DEFAULT>  <defaultValue>  ;
<declareVariable> ::= <DECLARE>  <uidList>  <dataType>  <declareVariable_-_1>  ;
# PARSER: declareCondition
<declareCondition_-_1> ::= <decimalLiteral>  ;
<declareCondition_-_2> ::= ;
<declareCondition_-_2> ::= <VALUE>  ;
<declareCondition_-_1> ::= <SQLSTATE>  <declareCondition_-_2>  <STRING_LITERAL>  ;
<declareCondition> ::= <DECLARE>  <uid>  <CONDITION>  <FOR>  <declareCondition_-_1>  ;
# PARSER: declareCursor
<declareCursor> ::= <DECLARE>  <uid>  <CURSOR>  <FOR>  <selectStatement>  ;
# PARSER: declareHandler
<declareHandler_-_1> ::= <CONTINUE>  ;
<declareHandler_-_1> ::= <EXIT>  ;
<declareHandler_-_1> ::= <UNDO>  ;
<declareHandler_-_2> ::= <declareHandler_-_3>  ;
<declareHandler_-_3> ::= ;
<declareHandler_-_4> ::= ','  <handlerConditionValue>  ;
<declareHandler_-_3> ::= <declareHandler_-_4>  <declareHandler_-_3>  ;
<declareHandler> ::= <DECLARE>  <declareHandler_-_1>  <HANDLER>  <FOR>  <handlerConditionValue>  <declareHandler_-_2>  <routineBody>  ;
# PARSER: handlerConditionValue
<handlerConditionValue> ::= <decimalLiteral>  ;
<handlerConditionValue_-_1> ::= ;
<handlerConditionValue_-_1> ::= <VALUE>  ;
<handlerConditionValue> ::= <SQLSTATE>  <handlerConditionValue_-_1>  <STRING_LITERAL>  ;
<handlerConditionValue> ::= <uid>  ;
<handlerConditionValue> ::= <SQLWARNING>  ;
<handlerConditionValue> ::= <NOT>  <FOUND>  ;
<handlerConditionValue> ::= <SQLEXCEPTION>  ;
# PARSER: procedureSqlStatement
<procedureSqlStatement_-_1> ::= <compoundStatement>  ;
<procedureSqlStatement_-_1> ::= <sqlStatement>  ;
<procedureSqlStatement> ::= <procedureSqlStatement_-_1>  <SEMI>  ;
# PARSER: caseAlternative
<caseAlternative_-_1> ::= <constant>  ;
<caseAlternative_-_1> ::= <expression>  ;
<caseAlternative_-_2> ::= <caseAlternative_-_3>  ;
<caseAlternative_-_3> ::= <caseAlternative_-_4>  ;
<caseAlternative_-_3> ::= <caseAlternative_-_4>  <caseAlternative_-_3>  ;
<caseAlternative_-_4> ::= <procedureSqlStatement>  ;
<caseAlternative> ::= <WHEN>  <caseAlternative_-_1>  <THEN>  <caseAlternative_-_2>  ;
# PARSER: elifAlternative
<elifAlternative_-_1> ::= <elifAlternative_-_2>  ;
<elifAlternative_-_2> ::= <elifAlternative_-_3>  ;
<elifAlternative_-_2> ::= <elifAlternative_-_3>  <elifAlternative_-_2>  ;
<elifAlternative_-_3> ::= <procedureSqlStatement>  ;
<elifAlternative> ::= <ELSEIF>  <expression>  <THEN>  <elifAlternative_-_1>  ;
# PARSER: alterUser
<alterUser_-_1> ::= <alterUser_-_2>  ;
<alterUser_-_2> ::= ;
<alterUser_-_3> ::= ','  <userSpecification>  ;
<alterUser_-_2> ::= <alterUser_-_3>  <alterUser_-_2>  ;
<alterUser> ::= <ALTER>  <USER>  <userSpecification>  <alterUser_-_1>  ;
<alterUser_-_4> ::= ;
<alterUser_-_4> ::= <ifExists>  ;
<alterUser_-_5> ::= <alterUser_-_6>  ;
<alterUser_-_6> ::= ;
<alterUser_-_7> ::= ','  <userAuthOption>  ;
<alterUser_-_6> ::= <alterUser_-_7>  <alterUser_-_6>  ;
<alterUser_-_8> ::= ;
<alterUser_-_9> ::= <NONE>  ;
<alterUser_-_10> ::= <alterUser_-_11>  ;
<alterUser_-_11> ::= ;
<alterUser_-_13> ::= ;
<alterUser_-_13> ::= <AND>  ;
<alterUser_-_12> ::= <alterUser_-_13>  <tlsOption>  ;
<alterUser_-_11> ::= <alterUser_-_12>  <alterUser_-_11>  ;
<alterUser_-_9> ::= <tlsOption>  <alterUser_-_10>  ;
<alterUser_-_8> ::= <REQUIRE>  <alterUser_-_9>  ;
<alterUser_-_14> ::= ;
<alterUser_-_15> ::= <alterUser_-_16>  ;
<alterUser_-_16> ::= <alterUser_-_17>  ;
<alterUser_-_16> ::= <alterUser_-_17>  <alterUser_-_16>  ;
<alterUser_-_17> ::= <userResourceOption>  ;
<alterUser_-_14> ::= <WITH>  <alterUser_-_15>  ;
<alterUser_-_18> ::= <alterUser_-_19>  ;
<alterUser_-_19> ::= ;
<alterUser_-_20> ::= <userPasswordOption>  ;
<alterUser_-_20> ::= <userLockOption>  ;
<alterUser_-_19> ::= <alterUser_-_20>  <alterUser_-_19>  ;
<alterUser> ::= <ALTER>  <USER>  <alterUser_-_4>  <userAuthOption>  <alterUser_-_5>  <alterUser_-_8>  <alterUser_-_14>  <alterUser_-_18>  ;
# PARSER: createUser
<createUser_-_1> ::= <createUser_-_2>  ;
<createUser_-_2> ::= ;
<createUser_-_3> ::= ','  <userAuthOption>  ;
<createUser_-_2> ::= <createUser_-_3>  <createUser_-_2>  ;
<createUser> ::= <CREATE>  <USER>  <userAuthOption>  <createUser_-_1>  ;
<createUser_-_4> ::= ;
<createUser_-_4> ::= <ifNotExists>  ;
<createUser_-_5> ::= <createUser_-_6>  ;
<createUser_-_6> ::= ;
<createUser_-_7> ::= ','  <userAuthOption>  ;
<createUser_-_6> ::= <createUser_-_7>  <createUser_-_6>  ;
<createUser_-_8> ::= ;
<createUser_-_9> ::= <NONE>  ;
<createUser_-_10> ::= <createUser_-_11>  ;
<createUser_-_11> ::= ;
<createUser_-_13> ::= ;
<createUser_-_13> ::= <AND>  ;
<createUser_-_12> ::= <createUser_-_13>  <tlsOption>  ;
<createUser_-_11> ::= <createUser_-_12>  <createUser_-_11>  ;
<createUser_-_9> ::= <tlsOption>  <createUser_-_10>  ;
<createUser_-_8> ::= <REQUIRE>  <createUser_-_9>  ;
<createUser_-_14> ::= ;
<createUser_-_15> ::= <createUser_-_16>  ;
<createUser_-_16> ::= <createUser_-_17>  ;
<createUser_-_16> ::= <createUser_-_17>  <createUser_-_16>  ;
<createUser_-_17> ::= <userResourceOption>  ;
<createUser_-_14> ::= <WITH>  <createUser_-_15>  ;
<createUser_-_18> ::= <createUser_-_19>  ;
<createUser_-_19> ::= ;
<createUser_-_20> ::= <userPasswordOption>  ;
<createUser_-_20> ::= <userLockOption>  ;
<createUser_-_19> ::= <createUser_-_20>  <createUser_-_19>  ;
<createUser> ::= <CREATE>  <USER>  <createUser_-_4>  <userAuthOption>  <createUser_-_5>  <createUser_-_8>  <createUser_-_14>  <createUser_-_18>  ;
# PARSER: dropUser
<dropUser_-_1> ::= ;
<dropUser_-_1> ::= <ifExists>  ;
<dropUser_-_2> ::= <dropUser_-_3>  ;
<dropUser_-_3> ::= ;
<dropUser_-_4> ::= ','  <userName>  ;
<dropUser_-_3> ::= <dropUser_-_4>  <dropUser_-_3>  ;
<dropUser> ::= <DROP>  <USER>  <dropUser_-_1>  <userName>  <dropUser_-_2>  ;
# PARSER: grantStatement
<grantStatement_-_1> ::= <grantStatement_-_2>  ;
<grantStatement_-_2> ::= ;
<grantStatement_-_3> ::= ','  <privelegeClause>  ;
<grantStatement_-_2> ::= <grantStatement_-_3>  <grantStatement_-_2>  ;
<grantStatement_-_4> ::= ;
<grantStatement_-_4> ::= <TABLE>  ;
<grantStatement_-_4> ::= <FUNCTION>  ;
<grantStatement_-_4> ::= <PROCEDURE>  ;
<grantStatement_-_5> ::= <grantStatement_-_6>  ;
<grantStatement_-_6> ::= ;
<grantStatement_-_7> ::= ','  <userAuthOption>  ;
<grantStatement_-_6> ::= <grantStatement_-_7>  <grantStatement_-_6>  ;
<grantStatement_-_8> ::= ;
<grantStatement_-_9> ::= <NONE>  ;
<grantStatement_-_10> ::= <grantStatement_-_11>  ;
<grantStatement_-_11> ::= ;
<grantStatement_-_13> ::= ;
<grantStatement_-_13> ::= <AND>  ;
<grantStatement_-_12> ::= <grantStatement_-_13>  <tlsOption>  ;
<grantStatement_-_11> ::= <grantStatement_-_12>  <grantStatement_-_11>  ;
<grantStatement_-_9> ::= <tlsOption>  <grantStatement_-_10>  ;
<grantStatement_-_8> ::= <REQUIRE>  <grantStatement_-_9>  ;
<grantStatement_-_14> ::= ;
<grantStatement_-_15> ::= <grantStatement_-_16>  ;
<grantStatement_-_16> ::= ;
<grantStatement_-_17> ::= <GRANT>  <OPTION>  ;
<grantStatement_-_17> ::= <userResourceOption>  ;
<grantStatement_-_16> ::= <grantStatement_-_17>  <grantStatement_-_16>  ;
<grantStatement_-_14> ::= <WITH>  <grantStatement_-_15>  ;
<grantStatement> ::= <GRANT>  <privelegeClause>  <grantStatement_-_1>  <ON>  <grantStatement_-_4>  <privilegeLevel>  <TO>  <userAuthOption>  <grantStatement_-_5>  <grantStatement_-_8>  <grantStatement_-_14>  ;
# PARSER: grantProxy
<grantProxy_-_1> ::= <grantProxy_-_2>  ;
<grantProxy_-_2> ::= ;
<grantProxy_-_3> ::= ','  <userName>  ;
<grantProxy_-_2> ::= <grantProxy_-_3>  <grantProxy_-_2>  ;
<grantProxy_-_4> ::= ;
<grantProxy_-_4> ::= <WITH>  <GRANT>  <OPTION>  ;
<grantProxy> ::= <GRANT>  <PROXY>  <ON>  <userName>  <TO>  <userName>  <grantProxy_-_1>  <grantProxy_-_4>  ;
# PARSER: renameUser
<renameUser_-_1> ::= <renameUser_-_2>  ;
<renameUser_-_2> ::= ;
<renameUser_-_3> ::= ','  <renameUserClause>  ;
<renameUser_-_2> ::= <renameUser_-_3>  <renameUser_-_2>  ;
<renameUser> ::= <RENAME>  <USER>  <renameUserClause>  <renameUser_-_1>  ;
# PARSER: revokeStatement
<revokeStatement_-_1> ::= <revokeStatement_-_2>  ;
<revokeStatement_-_2> ::= ;
<revokeStatement_-_3> ::= ','  <privelegeClause>  ;
<revokeStatement_-_2> ::= <revokeStatement_-_3>  <revokeStatement_-_2>  ;
<revokeStatement_-_4> ::= ;
<revokeStatement_-_4> ::= <TABLE>  ;
<revokeStatement_-_4> ::= <FUNCTION>  ;
<revokeStatement_-_4> ::= <PROCEDURE>  ;
<revokeStatement_-_5> ::= <revokeStatement_-_6>  ;
<revokeStatement_-_6> ::= ;
<revokeStatement_-_7> ::= ','  <userName>  ;
<revokeStatement_-_6> ::= <revokeStatement_-_7>  <revokeStatement_-_6>  ;
<revokeStatement> ::= <REVOKE>  <privelegeClause>  <revokeStatement_-_1>  <ON>  <revokeStatement_-_4>  <privilegeLevel>  <FROM>  <userName>  <revokeStatement_-_5>  ;
<revokeStatement_-_8> ::= ;
<revokeStatement_-_8> ::= <PRIVILEGES>  ;
<revokeStatement_-_9> ::= <revokeStatement_-_10>  ;
<revokeStatement_-_10> ::= ;
<revokeStatement_-_11> ::= ','  <userName>  ;
<revokeStatement_-_10> ::= <revokeStatement_-_11>  <revokeStatement_-_10>  ;
<revokeStatement> ::= <REVOKE>  <ALL>  <revokeStatement_-_8>  ','  <GRANT>  <OPTION>  <FROM>  <userName>  <revokeStatement_-_9>  ;
# PARSER: revokeProxy
<revokeProxy_-_1> ::= <revokeProxy_-_2>  ;
<revokeProxy_-_2> ::= ;
<revokeProxy_-_3> ::= ','  <userName>  ;
<revokeProxy_-_2> ::= <revokeProxy_-_3>  <revokeProxy_-_2>  ;
<revokeProxy> ::= <REVOKE>  <PROXY>  <ON>  <userName>  <FROM>  <userName>  <revokeProxy_-_1>  ;
# PARSER: setPasswordStatement
<setPasswordStatement_-_1> ::= ;
<setPasswordStatement_-_1> ::= <FOR>  <userName>  ;
<setPasswordStatement_-_2> ::= <passwordFunctionClause>  ;
<setPasswordStatement_-_2> ::= <STRING_LITERAL>  ;
<setPasswordStatement> ::= <SET>  <PASSWORD>  <setPasswordStatement_-_1>  '='  <setPasswordStatement_-_2>  ;
# PARSER: userSpecification
<userSpecification> ::= <userName>  <userPasswordOption>  ;
# PARSER: userAuthOption
<userAuthOption> ::= <userName>  <IDENTIFIED>  <BY>  <PASSWORD>  <STRING_LITERAL>  ;
<userAuthOption_-_1> ::= ;
<userAuthOption_-_1> ::= <WITH>  <authPlugin>  ;
<userAuthOption> ::= <userName>  <IDENTIFIED>  <userAuthOption_-_1>  <BY>  <STRING_LITERAL>  ;
<userAuthOption_-_2> ::= ;
<userAuthOption_-_2> ::= <AS>  <STRING_LITERAL>  ;
<userAuthOption> ::= <userName>  <IDENTIFIED>  <WITH>  <authPlugin>  <userAuthOption_-_2>  ;
<userAuthOption> ::= <userName>  ;
# PARSER: tlsOption
<tlsOption> ::= <SSL>  ;
<tlsOption> ::= <X509>  ;
<tlsOption> ::= <CIPHER>  <STRING_LITERAL>  ;
<tlsOption> ::= <ISSUER>  <STRING_LITERAL>  ;
<tlsOption> ::= <SUBJECT>  <STRING_LITERAL>  ;
# PARSER: userResourceOption
<userResourceOption> ::= <MAX_QUERIES_PER_HOUR>  <decimalLiteral>  ;
<userResourceOption> ::= <MAX_UPDATES_PER_HOUR>  <decimalLiteral>  ;
<userResourceOption> ::= <MAX_CONNECTIONS_PER_HOUR>  <decimalLiteral>  ;
<userResourceOption> ::= <MAX_USER_CONNECTIONS>  <decimalLiteral>  ;
# PARSER: userPasswordOption
<userPasswordOption_-_1> ::= ;
<userPasswordOption_-_1> ::= <DEFAULT>  ;
<userPasswordOption_-_1> ::= <NEVER>  ;
<userPasswordOption_-_1> ::= <INTERVAL>  <decimalLiteral>  <DAY>  ;
<userPasswordOption> ::= <PASSWORD>  <EXPIRE>  <userPasswordOption_-_1>  ;
# PARSER: userLockOption
<userLockOption_-_1> ::= <LOCK>  ;
<userLockOption_-_1> ::= <UNLOCK>  ;
<userLockOption> ::= <ACCOUNT>  <userLockOption_-_1>  ;
# PARSER: privelegeClause
<privelegeClause_-_1> ::= ;
<privelegeClause_-_1> ::= '('  <uidList>  ')'  ;
<privelegeClause> ::= <privilege>  <privelegeClause_-_1>  ;
# PARSER: privilege
<privilege_-_1> ::= ;
<privilege_-_1> ::= <PRIVILEGES>  ;
<privilege> ::= <ALL>  <privilege_-_1>  ;
<privilege_-_2> ::= ;
<privilege_-_2> ::= <ROUTINE>  ;
<privilege> ::= <ALTER>  <privilege_-_2>  ;
<privilege_-_3> ::= ;
<privilege_-_3> ::= <TEMPORARY>  <TABLES>  ;
<privilege_-_3> ::= <ROUTINE>  ;
<privilege_-_3> ::= <VIEW>  ;
<privilege_-_3> ::= <USER>  ;
<privilege_-_3> ::= <TABLESPACE>  ;
<privilege> ::= <CREATE>  <privilege_-_3>  ;
<privilege> ::= <DELETE>  ;
<privilege> ::= <DROP>  ;
<privilege> ::= <EVENT>  ;
<privilege> ::= <EXECUTE>  ;
<privilege> ::= <FILE>  ;
<privilege> ::= <GRANT>  <OPTION>  ;
<privilege> ::= <INDEX>  ;
<privilege> ::= <INSERT>  ;
<privilege> ::= <LOCK>  <TABLES>  ;
<privilege> ::= <PROCESS>  ;
<privilege> ::= <PROXY>  ;
<privilege> ::= <REFERENCES>  ;
<privilege> ::= <RELOAD>  ;
<privilege_-_4> ::= <CLIENT>  ;
<privilege_-_4> ::= <SLAVE>  ;
<privilege> ::= <REPLICATION>  <privilege_-_4>  ;
<privilege> ::= <SELECT>  ;
<privilege_-_5> ::= <VIEW>  ;
<privilege_-_5> ::= <DATABASES>  ;
<privilege> ::= <SHOW>  <privilege_-_5>  ;
<privilege> ::= <SHUTDOWN>  ;
<privilege> ::= <SUPER>  ;
<privilege> ::= <TRIGGER>  ;
<privilege> ::= <UPDATE>  ;
<privilege> ::= <USAGE>  ;
<privilege> ::= <SESSION_VARIABLES_ADMIN>  ;
# PARSER: privilegeLevel
<privilegeLevel> ::= '*'  ;
<privilegeLevel> ::= '*'  '.'  '*'  ;
<privilegeLevel> ::= <uid>  '.'  '*'  ;
<privilegeLevel> ::= <uid>  '.'  <uid>  ;
<privilegeLevel> ::= <uid>  <dottedId>  ;
<privilegeLevel> ::= <uid>  ;
# PARSER: renameUserClause
<renameUserClause> ::= <userName>  <TO>  <userName>  ;
# PARSER: analyzeTable
<analyzeTable_-_1> ::= ;
<analyzeTable_-_1> ::= <NO_WRITE_TO_BINLOG>  ;
<analyzeTable_-_1> ::= <LOCAL>  ;
<analyzeTable> ::= <ANALYZE>  <analyzeTable_-_1>  <TABLE>  <tables>  ;
# PARSER: checkTable
<checkTable_-_1> ::= <checkTable_-_2>  ;
<checkTable_-_2> ::= ;
<checkTable_-_2> ::= <checkTableOption>  <checkTable_-_2>  ;
<checkTable> ::= <CHECK>  <TABLE>  <tables>  <checkTable_-_1>  ;
# PARSER: checksumTable
<checksumTable_-_1> ::= ;
<checksumTable_-_1> ::= <QUICK>  ;
<checksumTable_-_1> ::= <EXTENDED>  ;
<checksumTable> ::= <CHECKSUM>  <TABLE>  <tables>  <checksumTable_-_1>  ;
# PARSER: optimizeTable
<optimizeTable_-_1> ::= ;
<optimizeTable_-_1> ::= <NO_WRITE_TO_BINLOG>  ;
<optimizeTable_-_1> ::= <LOCAL>  ;
<optimizeTable> ::= <OPTIMIZE>  <optimizeTable_-_1>  <TABLE>  <tables>  ;
# PARSER: repairTable
<repairTable_-_1> ::= ;
<repairTable_-_1> ::= <NO_WRITE_TO_BINLOG>  ;
<repairTable_-_1> ::= <LOCAL>  ;
<repairTable_-_2> ::= ;
<repairTable_-_2> ::= <QUICK>  ;
<repairTable_-_3> ::= ;
<repairTable_-_3> ::= <EXTENDED>  ;
<repairTable_-_4> ::= ;
<repairTable_-_4> ::= <USE_FRM>  ;
<repairTable> ::= <REPAIR>  <repairTable_-_1>  <TABLE>  <tables>  <repairTable_-_2>  <repairTable_-_3>  <repairTable_-_4>  ;
# PARSER: checkTableOption
<checkTableOption> ::= <FOR>  <UPGRADE>  ;
<checkTableOption> ::= <QUICK>  ;
<checkTableOption> ::= <FAST>  ;
<checkTableOption> ::= <MEDIUM>  ;
<checkTableOption> ::= <EXTENDED>  ;
<checkTableOption> ::= <CHANGED>  ;
# PARSER: createUdfunction
<createUdfunction_-_1> ::= ;
<createUdfunction_-_1> ::= <AGGREGATE>  ;
<createUdfunction_-_2> ::= <STRING>  ;
<createUdfunction_-_2> ::= <INTEGER>  ;
<createUdfunction_-_2> ::= <REAL>  ;
<createUdfunction_-_2> ::= <DECIMAL>  ;
<createUdfunction> ::= <CREATE>  <createUdfunction_-_1>  <FUNCTION>  <uid>  <RETURNS>  <createUdfunction_-_2>  <SONAME>  <STRING_LITERAL>  ;
# PARSER: installPlugin
<installPlugin> ::= <INSTALL>  <PLUGIN>  <uid>  <SONAME>  <STRING_LITERAL>  ;
# PARSER: uninstallPlugin
<uninstallPlugin> ::= <UNINSTALL>  <PLUGIN>  <uid>  ;
# PARSER: setStatement
<setStatement_-_1> ::= '='  ;
<setStatement_-_1> ::= ':='  ;
<setStatement_-_2> ::= <setStatement_-_3>  ;
<setStatement_-_3> ::= ;
<setStatement_-_5> ::= '='  ;
<setStatement_-_5> ::= ':='  ;
<setStatement_-_4> ::= ','  <variableClause>  <setStatement_-_5>  <expression>  ;
<setStatement_-_3> ::= <setStatement_-_4>  <setStatement_-_3>  ;
<setStatement> ::= <SET>  <variableClause>  <setStatement_-_1>  <expression>  <setStatement_-_2>  ;
<setStatement_-_6> ::= <CHARACTER>  <SET>  ;
<setStatement_-_6> ::= <CHARSET>  ;
<setStatement_-_7> ::= <charsetName>  ;
<setStatement_-_7> ::= <DEFAULT>  ;
<setStatement> ::= <SET>  <setStatement_-_6>  <setStatement_-_7>  ;
<setStatement_-_9> ::= ;
<setStatement_-_9> ::= <COLLATE>  <collationName>  ;
<setStatement_-_8> ::= <charsetName>  <setStatement_-_9>  ;
<setStatement_-_8> ::= <DEFAULT>  ;
<setStatement> ::= <SET>  <NAMES>  <setStatement_-_8>  ;
<setStatement> ::= <setPasswordStatement>  ;
<setStatement> ::= <setTransactionStatement>  ;
<setStatement> ::= <setAutocommitStatement>  ;
<setStatement_-_10> ::= '='  ;
<setStatement_-_10> ::= ':='  ;
<setStatement> ::= <SET>  <fullId>  <setStatement_-_10>  <expression>  ;
# PARSER: showStatement
<showStatement_-_1> ::= <BINARY>  ;
<showStatement_-_1> ::= <MASTER>  ;
<showStatement> ::= <SHOW>  <showStatement_-_1>  <LOGS>  ;
<showStatement_-_2> ::= <BINLOG>  ;
<showStatement_-_2> ::= <RELAYLOG>  ;
<showStatement_-_3> ::= ;
<showStatement_-_3> ::= <IN>  <STRING_LITERAL>  ;
<showStatement_-_4> ::= ;
<showStatement_-_4> ::= <FROM>  <decimalLiteral>  ;
<showStatement_-_5> ::= ;
<showStatement_-_6> ::= ;
<showStatement_-_6> ::= <decimalLiteral>  ','  ;
<showStatement_-_5> ::= <LIMIT>  <showStatement_-_6>  <decimalLiteral>  ;
<showStatement> ::= <SHOW>  <showStatement_-_2>  <EVENTS>  <showStatement_-_3>  <showStatement_-_4>  <showStatement_-_5>  ;
<showStatement_-_7> ::= ;
<showStatement_-_7> ::= <showFilter>  ;
<showStatement> ::= <SHOW>  <showCommonEntity>  <showStatement_-_7>  ;
<showStatement_-_8> ::= ;
<showStatement_-_8> ::= <FULL>  ;
<showStatement_-_9> ::= <COLUMNS>  ;
<showStatement_-_9> ::= <FIELDS>  ;
<showStatement_-_10> ::= <FROM>  ;
<showStatement_-_10> ::= <IN>  ;
<showStatement_-_11> ::= ;
<showStatement_-_12> ::= <FROM>  ;
<showStatement_-_12> ::= <IN>  ;
<showStatement_-_11> ::= <showStatement_-_12>  <uid>  ;
<showStatement_-_13> ::= ;
<showStatement_-_13> ::= <showFilter>  ;
<showStatement> ::= <SHOW>  <showStatement_-_8>  <showStatement_-_9>  <showStatement_-_10>  <tableName>  <showStatement_-_11>  <showStatement_-_13>  ;
<showStatement_-_14> ::= <DATABASE>  ;
<showStatement_-_14> ::= <SCHEMA>  ;
<showStatement_-_15> ::= ;
<showStatement_-_15> ::= <ifNotExists>  ;
<showStatement> ::= <SHOW>  <CREATE>  <showStatement_-_14>  <showStatement_-_15>  <uid>  ;
<showStatement_-_16> ::= <EVENT>  ;
<showStatement_-_16> ::= <FUNCTION>  ;
<showStatement_-_16> ::= <PROCEDURE>  ;
<showStatement_-_16> ::= <TABLE>  ;
<showStatement_-_16> ::= <TRIGGER>  ;
<showStatement_-_16> ::= <VIEW>  ;
<showStatement> ::= <SHOW>  <CREATE>  <showStatement_-_16>  <fullId>  ;
<showStatement> ::= <SHOW>  <CREATE>  <USER>  <userName>  ;
<showStatement_-_17> ::= <STATUS>  ;
<showStatement_-_17> ::= <MUTEX>  ;
<showStatement> ::= <SHOW>  <ENGINE>  <engineName>  <showStatement_-_17>  ;
<showStatement> ::= <SHOW>  <showGlobalInfoClause>  ;
<showStatement_-_18> ::= <ERRORS>  ;
<showStatement_-_18> ::= <WARNINGS>  ;
<showStatement_-_20> ::= ;
<showStatement_-_20> ::= <decimalLiteral>  ','  ;
<showStatement_-_19> ::= <LIMIT>  <showStatement_-_20>  <decimalLiteral>  ;
<showStatement> ::= <SHOW>  <showStatement_-_18>  <showStatement_-_19>  ;
<showStatement_-_21> ::= <ERRORS>  ;
<showStatement_-_21> ::= <WARNINGS>  ;
<showStatement> ::= <SHOW>  <COUNT>  '('  '*'  ')'  <showStatement_-_21>  ;
<showStatement_-_22> ::= ;
<showStatement_-_23> ::= <FROM>  ;
<showStatement_-_23> ::= <IN>  ;
<showStatement_-_22> ::= <showStatement_-_23>  <uid>  ;
<showStatement_-_24> ::= ;
<showStatement_-_24> ::= <showFilter>  ;
<showStatement> ::= <SHOW>  <showSchemaEntity>  <showStatement_-_22>  <showStatement_-_24>  ;
<showStatement_-_25> ::= <FUNCTION>  ;
<showStatement_-_25> ::= <PROCEDURE>  ;
<showStatement> ::= <SHOW>  <showStatement_-_25>  <CODE>  <fullId>  ;
<showStatement_-_26> ::= ;
<showStatement_-_26> ::= <FOR>  <userName>  ;
<showStatement> ::= <SHOW>  <GRANTS>  <showStatement_-_26>  ;
<showStatement_-_27> ::= <INDEX>  ;
<showStatement_-_27> ::= <INDEXES>  ;
<showStatement_-_27> ::= <KEYS>  ;
<showStatement_-_28> ::= <FROM>  ;
<showStatement_-_28> ::= <IN>  ;
<showStatement_-_29> ::= ;
<showStatement_-_30> ::= <FROM>  ;
<showStatement_-_30> ::= <IN>  ;
<showStatement_-_29> ::= <showStatement_-_30>  <uid>  ;
<showStatement_-_31> ::= ;
<showStatement_-_31> ::= <WHERE>  <expression>  ;
<showStatement> ::= <SHOW>  <showStatement_-_27>  <showStatement_-_28>  <tableName>  <showStatement_-_29>  <showStatement_-_31>  ;
<showStatement_-_32> ::= ;
<showStatement_-_33> ::= <FROM>  ;
<showStatement_-_33> ::= <IN>  ;
<showStatement_-_32> ::= <showStatement_-_33>  <uid>  ;
<showStatement_-_34> ::= ;
<showStatement_-_34> ::= <showFilter>  ;
<showStatement> ::= <SHOW>  <OPEN>  <TABLES>  <showStatement_-_32>  <showStatement_-_34>  ;
<showStatement_-_35> ::= <showStatement_-_36>  ;
<showStatement_-_36> ::= ;
<showStatement_-_37> ::= ','  <showProfileType>  ;
<showStatement_-_36> ::= <showStatement_-_37>  <showStatement_-_36>  ;
<showStatement_-_38> ::= ;
<showStatement_-_38> ::= <FOR>  <QUERY>  <decimalLiteral>  ;
<showStatement_-_40> ::= ;
<showStatement_-_40> ::= <decimalLiteral>  ','  ;
<showStatement_-_39> ::= <LIMIT>  <showStatement_-_40>  <decimalLiteral>  ;
<showStatement> ::= <SHOW>  <PROFILE>  <showProfileType>  <showStatement_-_35>  <showStatement_-_38>  <showStatement_-_39>  ;
<showStatement_-_41> ::= ;
<showStatement_-_41> ::= <FOR>  <CHANNEL>  <STRING_LITERAL>  ;
<showStatement> ::= <SHOW>  <SLAVE>  <STATUS>  <showStatement_-_41>  ;
# PARSER: variableClause
<variableClause> ::= <LOCAL_ID>  ;
<variableClause> ::= <GLOBAL_ID>  ;
<variableClause_-_1> ::= ;
<variableClause_-_2> ::= ;
<variableClause_-_2> ::= '@'  '@'  ;
<variableClause_-_3> ::= <GLOBAL>  ;
<variableClause_-_3> ::= <SESSION>  ;
<variableClause_-_3> ::= <LOCAL>  ;
<variableClause_-_1> ::= <variableClause_-_2>  <variableClause_-_3>  ;
<variableClause> ::= <variableClause_-_1>  <uid>  ;
# PARSER: showCommonEntity
<showCommonEntity> ::= <CHARACTER>  <SET>  ;
<showCommonEntity> ::= <COLLATION>  ;
<showCommonEntity> ::= <DATABASES>  ;
<showCommonEntity> ::= <SCHEMAS>  ;
<showCommonEntity> ::= <FUNCTION>  <STATUS>  ;
<showCommonEntity> ::= <PROCEDURE>  <STATUS>  ;
<showCommonEntity_-_1> ::= ;
<showCommonEntity_-_1> ::= <GLOBAL>  ;
<showCommonEntity_-_1> ::= <SESSION>  ;
<showCommonEntity_-_2> ::= <STATUS>  ;
<showCommonEntity_-_2> ::= <VARIABLES>  ;
<showCommonEntity> ::= <showCommonEntity_-_1>  <showCommonEntity_-_2>  ;
# PARSER: showFilter
<showFilter> ::= <LIKE>  <STRING_LITERAL>  ;
<showFilter> ::= <WHERE>  <expression>  ;
# PARSER: showGlobalInfoClause
<showGlobalInfoClause_-_1> ::= ;
<showGlobalInfoClause_-_1> ::= <STORAGE>  ;
<showGlobalInfoClause> ::= <showGlobalInfoClause_-_1>  <ENGINES>  ;
<showGlobalInfoClause> ::= <MASTER>  <STATUS>  ;
<showGlobalInfoClause> ::= <PLUGINS>  ;
<showGlobalInfoClause> ::= <PRIVILEGES>  ;
<showGlobalInfoClause_-_2> ::= ;
<showGlobalInfoClause_-_2> ::= <FULL>  ;
<showGlobalInfoClause> ::= <showGlobalInfoClause_-_2>  <PROCESSLIST>  ;
<showGlobalInfoClause> ::= <PROFILES>  ;
<showGlobalInfoClause> ::= <SLAVE>  <HOSTS>  ;
<showGlobalInfoClause> ::= <AUTHORS>  ;
<showGlobalInfoClause> ::= <CONTRIBUTORS>  ;
# PARSER: showSchemaEntity
<showSchemaEntity> ::= <EVENTS>  ;
<showSchemaEntity> ::= <TABLE>  <STATUS>  ;
<showSchemaEntity_-_1> ::= ;
<showSchemaEntity_-_1> ::= <FULL>  ;
<showSchemaEntity> ::= <showSchemaEntity_-_1>  <TABLES>  ;
<showSchemaEntity> ::= <TRIGGERS>  ;
# PARSER: showProfileType
<showProfileType> ::= <ALL>  ;
<showProfileType> ::= <BLOCK>  <IO>  ;
<showProfileType> ::= <CONTEXT>  <SWITCHES>  ;
<showProfileType> ::= <CPU>  ;
<showProfileType> ::= <IPC>  ;
<showProfileType> ::= <MEMORY>  ;
<showProfileType> ::= <PAGE>  <FAULTS>  ;
<showProfileType> ::= <SOURCE>  ;
<showProfileType> ::= <SWAPS>  ;
# PARSER: binlogStatement
<binlogStatement> ::= <BINLOG>  <STRING_LITERAL>  ;
# PARSER: cacheIndexStatement
<cacheIndexStatement_-_1> ::= <cacheIndexStatement_-_2>  ;
<cacheIndexStatement_-_2> ::= ;
<cacheIndexStatement_-_3> ::= ','  <tableIndexes>  ;
<cacheIndexStatement_-_2> ::= <cacheIndexStatement_-_3>  <cacheIndexStatement_-_2>  ;
<cacheIndexStatement_-_4> ::= ;
<cacheIndexStatement_-_5> ::= <uidList>  ;
<cacheIndexStatement_-_5> ::= <ALL>  ;
<cacheIndexStatement_-_4> ::= <PARTITION>  '('  <cacheIndexStatement_-_5>  ')'  ;
<cacheIndexStatement> ::= <CACHE>  <INDEX>  <tableIndexes>  <cacheIndexStatement_-_1>  <cacheIndexStatement_-_4>  <IN>  <uid>  ;
# PARSER: flushStatement
<flushStatement_-_1> ::= ;
<flushStatement_-_1> ::= <NO_WRITE_TO_BINLOG>  ;
<flushStatement_-_1> ::= <LOCAL>  ;
<flushStatement_-_2> ::= <flushStatement_-_3>  ;
<flushStatement_-_3> ::= ;
<flushStatement_-_4> ::= ','  <flushOption>  ;
<flushStatement_-_3> ::= <flushStatement_-_4>  <flushStatement_-_3>  ;
<flushStatement> ::= <FLUSH>  <flushStatement_-_1>  <flushOption>  <flushStatement_-_2>  ;
# PARSER: killStatement
<killStatement_-_1> ::= ;
<killStatement_-_1> ::= <CONNECTION>  ;
<killStatement_-_1> ::= <QUERY>  ;
<killStatement_-_2> ::= <killStatement_-_3>  ;
<killStatement_-_3> ::= <killStatement_-_4>  ;
<killStatement_-_3> ::= <killStatement_-_4>  <killStatement_-_3>  ;
<killStatement_-_4> ::= <decimalLiteral>  ;
<killStatement> ::= <KILL>  <killStatement_-_1>  <killStatement_-_2>  ;
# PARSER: loadIndexIntoCache
<loadIndexIntoCache_-_1> ::= <loadIndexIntoCache_-_2>  ;
<loadIndexIntoCache_-_2> ::= ;
<loadIndexIntoCache_-_3> ::= ','  <loadedTableIndexes>  ;
<loadIndexIntoCache_-_2> ::= <loadIndexIntoCache_-_3>  <loadIndexIntoCache_-_2>  ;
<loadIndexIntoCache> ::= <LOAD>  <INDEX>  <INTO>  <CACHE>  <loadedTableIndexes>  <loadIndexIntoCache_-_1>  ;
# PARSER: resetStatement
<resetStatement> ::= <RESET>  <QUERY>  <CACHE>  ;
# PARSER: shutdownStatement
<shutdownStatement> ::= <SHUTDOWN>  ;
# PARSER: tableIndexes
<tableIndexes_-_1> ::= ;
<tableIndexes_-_2> ::= ;
<tableIndexes_-_2> ::= <INDEX>  ;
<tableIndexes_-_2> ::= <KEY>  ;
<tableIndexes_-_1> ::= <tableIndexes_-_2>  '('  <uidList>  ')'  ;
<tableIndexes> ::= <tableName>  <tableIndexes_-_1>  ;
# PARSER: flushOption
<flushOption> ::= <DES_KEY_FILE>  ;
<flushOption> ::= <HOSTS>  ;
<flushOption_-_1> ::= ;
<flushOption_-_1> ::= <BINARY>  ;
<flushOption_-_1> ::= <ENGINE>  ;
<flushOption_-_1> ::= <ERROR>  ;
<flushOption_-_1> ::= <GENERAL>  ;
<flushOption_-_1> ::= <RELAY>  ;
<flushOption_-_1> ::= <SLOW>  ;
<flushOption> ::= <flushOption_-_1>  <LOGS>  ;
<flushOption> ::= <OPTIMIZER_COSTS>  ;
<flushOption> ::= <PRIVILEGES>  ;
<flushOption> ::= <QUERY>  <CACHE>  ;
<flushOption> ::= <STATUS>  ;
<flushOption> ::= <USER_RESOURCES>  ;
<flushOption_-_2> ::= ;
<flushOption_-_2> ::= <WITH>  <READ>  <LOCK>  ;
<flushOption> ::= <TABLES>  <flushOption_-_2>  ;
<flushOption_-_3> ::= ;
<flushOption_-_3> ::= <channelOption>  ;
<flushOption> ::= <RELAY>  <LOGS>  <flushOption_-_3>  ;
<flushOption_-_4> ::= ;
<flushOption_-_4> ::= <flushTableOption>  ;
<flushOption> ::= <TABLES>  <tables>  <flushOption_-_4>  ;
# PARSER: flushTableOption
<flushTableOption> ::= <WITH>  <READ>  <LOCK>  ;
<flushTableOption> ::= <FOR>  <EXPORT>  ;
# PARSER: loadedTableIndexes
<loadedTableIndexes_-_1> ::= ;
<loadedTableIndexes_-_2> ::= <uidList>  ;
<loadedTableIndexes_-_2> ::= <ALL>  ;
<loadedTableIndexes_-_1> ::= <PARTITION>  '('  <loadedTableIndexes_-_2>  ')'  ;
<loadedTableIndexes_-_3> ::= ;
<loadedTableIndexes_-_4> ::= ;
<loadedTableIndexes_-_4> ::= <INDEX>  ;
<loadedTableIndexes_-_4> ::= <KEY>  ;
<loadedTableIndexes_-_3> ::= <loadedTableIndexes_-_4>  '('  <uidList>  ')'  ;
<loadedTableIndexes_-_5> ::= ;
<loadedTableIndexes_-_5> ::= <IGNORE>  <LEAVES>  ;
<loadedTableIndexes> ::= <tableName>  <loadedTableIndexes_-_1>  <loadedTableIndexes_-_3>  <loadedTableIndexes_-_5>  ;
# PARSER: simpleDescribeStatement
<simpleDescribeStatement_-_1> ::= <EXPLAIN>  ;
<simpleDescribeStatement_-_1> ::= <DESCRIBE>  ;
<simpleDescribeStatement_-_1> ::= <DESC>  ;
<simpleDescribeStatement_-_2> ::= ;
<simpleDescribeStatement_-_2> ::= <uid>  ;
<simpleDescribeStatement_-_2> ::= <STRING_LITERAL>  ;
<simpleDescribeStatement> ::= <simpleDescribeStatement_-_1>  <tableName>  <simpleDescribeStatement_-_2>  ;
# PARSER: fullDescribeStatement
<fullDescribeStatement_-_1> ::= <EXPLAIN>  ;
<fullDescribeStatement_-_1> ::= <DESCRIBE>  ;
<fullDescribeStatement_-_1> ::= <DESC>  ;
<fullDescribeStatement_-_2> ::= ;
<fullDescribeStatement_-_3> ::= <EXTENDED>  ;
<fullDescribeStatement_-_3> ::= <PARTITIONS>  ;
<fullDescribeStatement_-_3> ::= <FORMAT>  ;
<fullDescribeStatement_-_4> ::= <TRADITIONAL>  ;
<fullDescribeStatement_-_4> ::= <JSON>  ;
<fullDescribeStatement_-_2> ::= <fullDescribeStatement_-_3>  '='  <fullDescribeStatement_-_4>  ;
<fullDescribeStatement> ::= <fullDescribeStatement_-_1>  <fullDescribeStatement_-_2>  <describeObjectClause>  ;
# PARSER: helpStatement
<helpStatement> ::= <HELP>  <STRING_LITERAL>  ;
# PARSER: useStatement
<useStatement> ::= <USE>  <uid>  ;
# PARSER: signalStatement
<signalStatement_-_2> ::= ;
<signalStatement_-_2> ::= <VALUE>  ;
<signalStatement_-_1> ::= <SQLSTATE>  <signalStatement_-_2>  <stringLiteral>  ;
<signalStatement_-_1> ::= <ID>  ;
<signalStatement_-_1> ::= <REVERSE_QUOTE_ID>  ;
<signalStatement_-_3> ::= ;
<signalStatement_-_4> ::= <signalStatement_-_5>  ;
<signalStatement_-_5> ::= ;
<signalStatement_-_6> ::= ','  <signalConditionInformation>  ;
<signalStatement_-_5> ::= <signalStatement_-_6>  <signalStatement_-_5>  ;
<signalStatement_-_3> ::= <SET>  <signalConditionInformation>  <signalStatement_-_4>  ;
<signalStatement> ::= <SIGNAL>  <signalStatement_-_1>  <signalStatement_-_3>  ;
# PARSER: resignalStatement
<resignalStatement_-_1> ::= ;
<resignalStatement_-_2> ::= ;
<resignalStatement_-_2> ::= <VALUE>  ;
<resignalStatement_-_1> ::= <SQLSTATE>  <resignalStatement_-_2>  <stringLiteral>  ;
<resignalStatement_-_1> ::= <ID>  ;
<resignalStatement_-_1> ::= <REVERSE_QUOTE_ID>  ;
<resignalStatement_-_3> ::= ;
<resignalStatement_-_4> ::= <resignalStatement_-_5>  ;
<resignalStatement_-_5> ::= ;
<resignalStatement_-_6> ::= ','  <signalConditionInformation>  ;
<resignalStatement_-_5> ::= <resignalStatement_-_6>  <resignalStatement_-_5>  ;
<resignalStatement_-_3> ::= <SET>  <signalConditionInformation>  <resignalStatement_-_4>  ;
<resignalStatement> ::= <RESIGNAL>  <resignalStatement_-_1>  <resignalStatement_-_3>  ;
# PARSER: signalConditionInformation
<signalConditionInformation_-_1> ::= <CLASS_ORIGIN>  ;
<signalConditionInformation_-_1> ::= <SUBCLASS_ORIGIN>  ;
<signalConditionInformation_-_1> ::= <MESSAGE_TEXT>  ;
<signalConditionInformation_-_1> ::= <MYSQL_ERRNO>  ;
<signalConditionInformation_-_1> ::= <CONSTRAINT_CATALOG>  ;
<signalConditionInformation_-_1> ::= <CONSTRAINT_SCHEMA>  ;
<signalConditionInformation_-_1> ::= <CONSTRAINT_NAME>  ;
<signalConditionInformation_-_1> ::= <CATALOG_NAME>  ;
<signalConditionInformation_-_1> ::= <SCHEMA_NAME>  ;
<signalConditionInformation_-_1> ::= <TABLE_NAME>  ;
<signalConditionInformation_-_1> ::= <COLUMN_NAME>  ;
<signalConditionInformation_-_1> ::= <CURSOR_NAME>  ;
<signalConditionInformation_-_2> ::= <stringLiteral>  ;
<signalConditionInformation_-_2> ::= <DECIMAL_LITERAL>  ;
<signalConditionInformation> ::= <signalConditionInformation_-_1>  '='  <signalConditionInformation_-_2>  ;
# PARSER: diagnosticsStatement
<diagnosticsStatement_-_1> ::= ;
<diagnosticsStatement_-_1> ::= <CURRENT>  ;
<diagnosticsStatement_-_1> ::= <STACKED>  ;
<diagnosticsStatement_-_3> ::= <NUMBER>  ;
<diagnosticsStatement_-_3> ::= <ROW_COUNT>  ;
<diagnosticsStatement_-_4> ::= <diagnosticsStatement_-_5>  ;
<diagnosticsStatement_-_5> ::= ;
<diagnosticsStatement_-_7> ::= <NUMBER>  ;
<diagnosticsStatement_-_7> ::= <ROW_COUNT>  ;
<diagnosticsStatement_-_6> ::= ','  <variableClause>  '='  <diagnosticsStatement_-_7>  ;
<diagnosticsStatement_-_5> ::= <diagnosticsStatement_-_6>  <diagnosticsStatement_-_5>  ;
<diagnosticsStatement_-_2> ::= <variableClause>  '='  <diagnosticsStatement_-_3>  <diagnosticsStatement_-_4>  ;
<diagnosticsStatement_-_8> ::= <decimalLiteral>  ;
<diagnosticsStatement_-_8> ::= <variableClause>  ;
<diagnosticsStatement_-_9> ::= <diagnosticsStatement_-_10>  ;
<diagnosticsStatement_-_10> ::= ;
<diagnosticsStatement_-_11> ::= ','  <variableClause>  '='  <diagnosticsConditionInformationName>  ;
<diagnosticsStatement_-_10> ::= <diagnosticsStatement_-_11>  <diagnosticsStatement_-_10>  ;
<diagnosticsStatement_-_2> ::= <CONDITION>  <diagnosticsStatement_-_8>  <variableClause>  '='  <diagnosticsConditionInformationName>  <diagnosticsStatement_-_9>  ;
<diagnosticsStatement> ::= <GET>  <diagnosticsStatement_-_1>  <DIAGNOSTICS>  <diagnosticsStatement_-_2>  ;
# PARSER: diagnosticsConditionInformationName
<diagnosticsConditionInformationName> ::= <CLASS_ORIGIN>  ;
<diagnosticsConditionInformationName> ::= <SUBCLASS_ORIGIN>  ;
<diagnosticsConditionInformationName> ::= <RETURNED_SQLSTATE>  ;
<diagnosticsConditionInformationName> ::= <MESSAGE_TEXT>  ;
<diagnosticsConditionInformationName> ::= <MYSQL_ERRNO>  ;
<diagnosticsConditionInformationName> ::= <CONSTRAINT_CATALOG>  ;
<diagnosticsConditionInformationName> ::= <CONSTRAINT_SCHEMA>  ;
<diagnosticsConditionInformationName> ::= <CONSTRAINT_NAME>  ;
<diagnosticsConditionInformationName> ::= <CATALOG_NAME>  ;
<diagnosticsConditionInformationName> ::= <SCHEMA_NAME>  ;
<diagnosticsConditionInformationName> ::= <TABLE_NAME>  ;
<diagnosticsConditionInformationName> ::= <COLUMN_NAME>  ;
<diagnosticsConditionInformationName> ::= <CURSOR_NAME>  ;
# PARSER: describeObjectClause
<describeObjectClause> ::= <selectStatement>  ;
<describeObjectClause> ::= <deleteStatement>  ;
<describeObjectClause> ::= <insertStatement>  ;
<describeObjectClause> ::= <replaceStatement>  ;
<describeObjectClause> ::= <updateStatement>  ;
<describeObjectClause> ::= <FOR>  <CONNECTION>  <uid>  ;
# PARSER: fullId
<fullId_-_1> ::= ;
<fullId_-_1> ::= <DOT_ID>  ;
<fullId_-_1> ::= '.'  <uid>  ;
<fullId> ::= <uid>  <fullId_-_1>  ;
# PARSER: tableName
<tableName> ::= <fullId>  ;
# PARSER: fullColumnName
<fullColumnName_-_1> ::= ;
<fullColumnName_-_2> ::= ;
<fullColumnName_-_2> ::= <dottedId>  ;
<fullColumnName_-_1> ::= <dottedId>  <fullColumnName_-_2>  ;
<fullColumnName> ::= <uid>  <fullColumnName_-_1>  ;
# PARSER: indexColumnName
<indexColumnName_-_1> ::= <uid>  ;
<indexColumnName_-_1> ::= <STRING_LITERAL>  ;
<indexColumnName_-_2> ::= ;
<indexColumnName_-_2> ::= '('  <decimalLiteral>  ')'  ;
<indexColumnName_-_3> ::= ;
<indexColumnName_-_3> ::= <ASC>  ;
<indexColumnName_-_3> ::= <DESC>  ;
<indexColumnName> ::= <indexColumnName_-_1>  <indexColumnName_-_2>  <indexColumnName_-_3>  ;
# PARSER: userName
<userName> ::= <STRING_USER_NAME>  ;
<userName> ::= <ID>  ;
<userName> ::= <STRING_LITERAL>  ;
# PARSER: mysqlVariable
<mysqlVariable> ::= <LOCAL_ID>  ;
<mysqlVariable> ::= <GLOBAL_ID>  ;
# PARSER: charsetName
<charsetName> ::= <BINARY>  ;
<charsetName> ::= <charsetNameBase>  ;
<charsetName> ::= <STRING_LITERAL>  ;
<charsetName> ::= <CHARSET_REVERSE_QOUTE_STRING>  ;
# PARSER: collationName
<collationName> ::= <uid>  ;
<collationName> ::= <STRING_LITERAL>  ;
# PARSER: engineName
<engineName> ::= <ARCHIVE>  ;
<engineName> ::= <BLACKHOLE>  ;
<engineName> ::= <CSV>  ;
<engineName> ::= <FEDERATED>  ;
<engineName> ::= <INNODB>  ;
<engineName> ::= <MEMORY>  ;
<engineName> ::= <MRG_MYISAM>  ;
<engineName> ::= <MYISAM>  ;
<engineName> ::= <NDB>  ;
<engineName> ::= <NDBCLUSTER>  ;
<engineName> ::= <PERFORMANCE_SCHEMA>  ;
<engineName> ::= <TOKUDB>  ;
<engineName> ::= <ID>  ;
<engineName> ::= <STRING_LITERAL>  ;
<engineName> ::= <REVERSE_QUOTE_ID>  ;
# PARSER: uuidSet
<uuidSet_-_1> ::= <uuidSet_-_2>  ;
<uuidSet_-_2> ::= <uuidSet_-_3>  ;
<uuidSet_-_2> ::= <uuidSet_-_3>  <uuidSet_-_2>  ;
<uuidSet_-_3> ::= ':'  <decimalLiteral>  '-'  <decimalLiteral>  ;
<uuidSet> ::= <decimalLiteral>  '-'  <decimalLiteral>  '-'  <decimalLiteral>  '-'  <decimalLiteral>  '-'  <decimalLiteral>  <uuidSet_-_1>  ;
# PARSER: xid
<xid_-_1> ::= ;
<xid_-_2> ::= ;
<xid_-_2> ::= ','  <decimalLiteral>  ;
<xid_-_1> ::= ','  <xuidStringId>  <xid_-_2>  ;
<xid> ::= <xuidStringId>  <xid_-_1>  ;
# PARSER: xuidStringId
<xuidStringId> ::= <STRING_LITERAL>  ;
<xuidStringId> ::= <BIT_STRING>  ;
<xuidStringId> ::= <xuidStringId_-_1>  ;
<xuidStringId_-_1> ::= <xuidStringId_-_2>  ;
<xuidStringId_-_1> ::= <xuidStringId_-_2>  <xuidStringId_-_1>  ;
<xuidStringId_-_2> ::= <HEXADECIMAL_LITERAL>  ;
# PARSER: authPlugin
<authPlugin> ::= <uid>  ;
<authPlugin> ::= <STRING_LITERAL>  ;
# PARSER: uid
<uid> ::= <simpleId>  ;
<uid> ::= <REVERSE_QUOTE_ID>  ;
<uid> ::= <CHARSET_REVERSE_QOUTE_STRING>  ;
# PARSER: simpleId
<simpleId> ::= <ID>  ;
<simpleId> ::= <charsetNameBase>  ;
<simpleId> ::= <transactionLevelBase>  ;
<simpleId> ::= <engineName>  ;
<simpleId> ::= <privilegesBase>  ;
<simpleId> ::= <intervalTypeBase>  ;
<simpleId> ::= <dataTypeBase>  ;
<simpleId> ::= <keywordsCanBeId>  ;
<simpleId> ::= <functionNameBase>  ;
# PARSER: dottedId
<dottedId> ::= <DOT_ID>  ;
<dottedId> ::= '.'  <uid>  ;
# PARSER: decimalLiteral
<decimalLiteral> ::= <DECIMAL_LITERAL>  ;
<decimalLiteral> ::= <ZERO_DECIMAL>  ;
<decimalLiteral> ::= <ONE_DECIMAL>  ;
<decimalLiteral> ::= <TWO_DECIMAL>  ;
# PARSER: fileSizeLiteral
<fileSizeLiteral> ::= <FILESIZE_LITERAL>  ;
<fileSizeLiteral> ::= <decimalLiteral>  ;
# PARSER: stringLiteral
<stringLiteral_-_2> ::= ;
<stringLiteral_-_2> ::= <STRING_CHARSET_NAME>  ;
<stringLiteral_-_1> ::= <stringLiteral_-_2>  <STRING_LITERAL>  ;
<stringLiteral_-_1> ::= <START_NATIONAL_STRING_LITERAL>  ;
<stringLiteral_-_3> ::= <stringLiteral_-_4>  ;
<stringLiteral_-_4> ::= <stringLiteral_-_5>  ;
<stringLiteral_-_4> ::= <stringLiteral_-_5>  <stringLiteral_-_4>  ;
<stringLiteral_-_5> ::= <STRING_LITERAL>  ;
<stringLiteral> ::= <stringLiteral_-_1>  <stringLiteral_-_3>  ;
<stringLiteral_-_7> ::= ;
<stringLiteral_-_7> ::= <STRING_CHARSET_NAME>  ;
<stringLiteral_-_6> ::= <stringLiteral_-_7>  <STRING_LITERAL>  ;
<stringLiteral_-_6> ::= <START_NATIONAL_STRING_LITERAL>  ;
<stringLiteral_-_8> ::= ;
<stringLiteral_-_8> ::= <COLLATE>  <collationName>  ;
<stringLiteral> ::= <stringLiteral_-_6>  <stringLiteral_-_8>  ;
# PARSER: booleanLiteral
<booleanLiteral> ::= <TRUE>  ;
<booleanLiteral> ::= <FALSE>  ;
# PARSER: hexadecimalLiteral
<hexadecimalLiteral_-_1> ::= ;
<hexadecimalLiteral_-_1> ::= <STRING_CHARSET_NAME>  ;
<hexadecimalLiteral> ::= <hexadecimalLiteral_-_1>  <HEXADECIMAL_LITERAL>  ;
# PARSER: nullNotnull
<nullNotnull_-_1> ::= ;
<nullNotnull_-_1> ::= <NOT>  ;
<nullNotnull_-_2> ::= <NULL_LITERAL>  ;
<nullNotnull_-_2> ::= <NULL_SPEC_LITERAL>  ;
<nullNotnull> ::= <nullNotnull_-_1>  <nullNotnull_-_2>  ;
# PARSER: constant
<constant> ::= <stringLiteral>  ;
<constant> ::= <decimalLiteral>  ;
<constant> ::= '-'  <decimalLiteral>  ;
<constant> ::= <hexadecimalLiteral>  ;
<constant> ::= <booleanLiteral>  ;
<constant> ::= <REAL_LITERAL>  ;
<constant> ::= <BIT_STRING>  ;
<constant_-_1> ::= ;
<constant_-_1> ::= <NOT>  ;
<constant_-_2> ::= <NULL_LITERAL>  ;
<constant_-_2> ::= <NULL_SPEC_LITERAL>  ;
<constant> ::= <constant_-_1>  <constant_-_2>  ;
# PARSER: dataType
<dataType_-_1> ::= <CHAR>  ;
<dataType_-_1> ::= <VARCHAR>  ;
<dataType_-_1> ::= <TINYTEXT>  ;
<dataType_-_1> ::= <TEXT>  ;
<dataType_-_1> ::= <MEDIUMTEXT>  ;
<dataType_-_1> ::= <LONGTEXT>  ;
<dataType_-_1> ::= <NCHAR>  ;
<dataType_-_1> ::= <NVARCHAR>  ;
<dataType_-_2> ::= ;
<dataType_-_2> ::= <lengthOneDimension>  ;
<dataType_-_3> ::= ;
<dataType_-_3> ::= <BINARY>  ;
<dataType_-_4> ::= ;
<dataType_-_5> ::= <CHARACTER>  <SET>  ;
<dataType_-_5> ::= <CHARSET>  ;
<dataType_-_4> ::= <dataType_-_5>  <charsetName>  ;
<dataType_-_6> ::= ;
<dataType_-_6> ::= <COLLATE>  <collationName>  ;
<dataType> ::= <dataType_-_1>  <dataType_-_2>  <dataType_-_3>  <dataType_-_4>  <dataType_-_6>  ;
<dataType_-_7> ::= <VARCHAR>  ;
<dataType_-_7> ::= <CHARACTER>  ;
<dataType_-_8> ::= ;
<dataType_-_8> ::= <lengthOneDimension>  ;
<dataType_-_9> ::= ;
<dataType_-_9> ::= <BINARY>  ;
<dataType> ::= <NATIONAL>  <dataType_-_7>  <dataType_-_8>  <dataType_-_9>  ;
<dataType_-_10> ::= ;
<dataType_-_10> ::= <lengthOneDimension>  ;
<dataType_-_11> ::= ;
<dataType_-_11> ::= <BINARY>  ;
<dataType> ::= <NCHAR>  <VARCHAR>  <dataType_-_10>  <dataType_-_11>  ;
<dataType_-_12> ::= <CHAR>  ;
<dataType_-_12> ::= <CHARACTER>  ;
<dataType_-_13> ::= ;
<dataType_-_13> ::= <lengthOneDimension>  ;
<dataType_-_14> ::= ;
<dataType_-_14> ::= <BINARY>  ;
<dataType> ::= <NATIONAL>  <dataType_-_12>  <VARYING>  <dataType_-_13>  <dataType_-_14>  ;
<dataType_-_15> ::= <TINYINT>  ;
<dataType_-_15> ::= <SMALLINT>  ;
<dataType_-_15> ::= <MEDIUMINT>  ;
<dataType_-_15> ::= <INT>  ;
<dataType_-_15> ::= <INTEGER>  ;
<dataType_-_15> ::= <BIGINT>  ;
<dataType_-_16> ::= ;
<dataType_-_16> ::= <lengthOneDimension>  ;
<dataType_-_17> ::= ;
<dataType_-_17> ::= <SIGNED>  ;
<dataType_-_17> ::= <UNSIGNED>  ;
<dataType_-_18> ::= ;
<dataType_-_18> ::= <ZEROFILL>  ;
<dataType> ::= <dataType_-_15>  <dataType_-_16>  <dataType_-_17>  <dataType_-_18>  ;
<dataType_-_19> ::= ;
<dataType_-_19> ::= <lengthTwoDimension>  ;
<dataType_-_20> ::= ;
<dataType_-_20> ::= <SIGNED>  ;
<dataType_-_20> ::= <UNSIGNED>  ;
<dataType_-_21> ::= ;
<dataType_-_21> ::= <ZEROFILL>  ;
<dataType> ::= <REAL>  <dataType_-_19>  <dataType_-_20>  <dataType_-_21>  ;
<dataType_-_22> ::= ;
<dataType_-_22> ::= <PRECISION>  ;
<dataType_-_23> ::= ;
<dataType_-_23> ::= <lengthTwoDimension>  ;
<dataType_-_24> ::= ;
<dataType_-_24> ::= <SIGNED>  ;
<dataType_-_24> ::= <UNSIGNED>  ;
<dataType_-_25> ::= ;
<dataType_-_25> ::= <ZEROFILL>  ;
<dataType> ::= <DOUBLE>  <dataType_-_22>  <dataType_-_23>  <dataType_-_24>  <dataType_-_25>  ;
<dataType_-_26> ::= <DECIMAL>  ;
<dataType_-_26> ::= <DEC>  ;
<dataType_-_26> ::= <FIXED>  ;
<dataType_-_26> ::= <NUMERIC>  ;
<dataType_-_26> ::= <FLOAT>  ;
<dataType_-_27> ::= ;
<dataType_-_27> ::= <lengthTwoOptionalDimension>  ;
<dataType_-_28> ::= ;
<dataType_-_28> ::= <SIGNED>  ;
<dataType_-_28> ::= <UNSIGNED>  ;
<dataType_-_29> ::= ;
<dataType_-_29> ::= <ZEROFILL>  ;
<dataType> ::= <dataType_-_26>  <dataType_-_27>  <dataType_-_28>  <dataType_-_29>  ;
<dataType> ::= <DATE>  ;
<dataType> ::= <TINYBLOB>  ;
<dataType> ::= <BLOB>  ;
<dataType> ::= <MEDIUMBLOB>  ;
<dataType> ::= <LONGBLOB>  ;
<dataType> ::= <BOOL>  ;
<dataType> ::= <BOOLEAN>  ;
<dataType> ::= <SERIAL>  ;
<dataType_-_30> ::= <BIT>  ;
<dataType_-_30> ::= <TIME>  ;
<dataType_-_30> ::= <TIMESTAMP>  ;
<dataType_-_30> ::= <DATETIME>  ;
<dataType_-_30> ::= <BINARY>  ;
<dataType_-_30> ::= <VARBINARY>  ;
<dataType_-_30> ::= <YEAR>  ;
<dataType_-_31> ::= ;
<dataType_-_31> ::= <lengthOneDimension>  ;
<dataType> ::= <dataType_-_30>  <dataType_-_31>  ;
<dataType_-_32> ::= <ENUM>  ;
<dataType_-_32> ::= <SET>  ;
<dataType_-_33> ::= ;
<dataType_-_33> ::= <BINARY>  ;
<dataType_-_34> ::= ;
<dataType_-_35> ::= <CHARACTER>  <SET>  ;
<dataType_-_35> ::= <CHARSET>  ;
<dataType_-_34> ::= <dataType_-_35>  <charsetName>  ;
<dataType> ::= <dataType_-_32>  <collectionOptions>  <dataType_-_33>  <dataType_-_34>  ;
<dataType> ::= <GEOMETRYCOLLECTION>  ;
<dataType> ::= <GEOMCOLLECTION>  ;
<dataType> ::= <LINESTRING>  ;
<dataType> ::= <MULTILINESTRING>  ;
<dataType> ::= <MULTIPOINT>  ;
<dataType> ::= <MULTIPOLYGON>  ;
<dataType> ::= <POINT>  ;
<dataType> ::= <POLYGON>  ;
<dataType> ::= <JSON>  ;
<dataType> ::= <GEOMETRY>  ;
# PARSER: collectionOptions
<collectionOptions_-_1> ::= <collectionOptions_-_2>  ;
<collectionOptions_-_2> ::= ;
<collectionOptions_-_3> ::= ','  <STRING_LITERAL>  ;
<collectionOptions_-_2> ::= <collectionOptions_-_3>  <collectionOptions_-_2>  ;
<collectionOptions> ::= '('  <STRING_LITERAL>  <collectionOptions_-_1>  ')'  ;
# PARSER: convertedDataType
<convertedDataType_-_1> ::= <BINARY>  ;
<convertedDataType_-_1> ::= <NCHAR>  ;
<convertedDataType_-_2> ::= ;
<convertedDataType_-_2> ::= <lengthOneDimension>  ;
<convertedDataType> ::= <convertedDataType_-_1>  <convertedDataType_-_2>  ;
<convertedDataType_-_3> ::= ;
<convertedDataType_-_3> ::= <lengthOneDimension>  ;
<convertedDataType_-_4> ::= ;
<convertedDataType_-_5> ::= <CHARACTER>  <SET>  ;
<convertedDataType_-_5> ::= <CHARSET>  ;
<convertedDataType_-_4> ::= <convertedDataType_-_5>  <charsetName>  ;
<convertedDataType> ::= <CHAR>  <convertedDataType_-_3>  <convertedDataType_-_4>  ;
<convertedDataType> ::= <DATE>  ;
<convertedDataType> ::= <DATETIME>  ;
<convertedDataType> ::= <TIME>  ;
<convertedDataType> ::= <JSON>  ;
<convertedDataType_-_6> ::= ;
<convertedDataType_-_6> ::= <lengthTwoDimension>  ;
<convertedDataType> ::= <DECIMAL>  <convertedDataType_-_6>  ;
<convertedDataType_-_7> ::= <SIGNED>  ;
<convertedDataType_-_7> ::= <UNSIGNED>  ;
<convertedDataType_-_8> ::= ;
<convertedDataType_-_8> ::= <INTEGER>  ;
<convertedDataType> ::= <convertedDataType_-_7>  <convertedDataType_-_8>  ;
# PARSER: lengthOneDimension
<lengthOneDimension> ::= '('  <decimalLiteral>  ')'  ;
# PARSER: lengthTwoDimension
<lengthTwoDimension> ::= '('  <decimalLiteral>  ','  <decimalLiteral>  ')'  ;
# PARSER: lengthTwoOptionalDimension
<lengthTwoOptionalDimension_-_1> ::= ;
<lengthTwoOptionalDimension_-_1> ::= ','  <decimalLiteral>  ;
<lengthTwoOptionalDimension> ::= '('  <decimalLiteral>  <lengthTwoOptionalDimension_-_1>  ')'  ;
# PARSER: uidList
<uidList_-_1> ::= <uidList_-_2>  ;
<uidList_-_2> ::= ;
<uidList_-_3> ::= ','  <uid>  ;
<uidList_-_2> ::= <uidList_-_3>  <uidList_-_2>  ;
<uidList> ::= <uid>  <uidList_-_1>  ;
# PARSER: tables
<tables_-_1> ::= <tables_-_2>  ;
<tables_-_2> ::= ;
<tables_-_3> ::= ','  <tableName>  ;
<tables_-_2> ::= <tables_-_3>  <tables_-_2>  ;
<tables> ::= <tableName>  <tables_-_1>  ;
# PARSER: indexColumnNames
<indexColumnNames_-_1> ::= <indexColumnNames_-_2>  ;
<indexColumnNames_-_2> ::= ;
<indexColumnNames_-_3> ::= ','  <indexColumnName>  ;
<indexColumnNames_-_2> ::= <indexColumnNames_-_3>  <indexColumnNames_-_2>  ;
<indexColumnNames> ::= '('  <indexColumnName>  <indexColumnNames_-_1>  ')'  ;
# PARSER: expressions
<expressions_-_1> ::= <expressions_-_2>  ;
<expressions_-_2> ::= ;
<expressions_-_3> ::= ','  <expression>  ;
<expressions_-_2> ::= <expressions_-_3>  <expressions_-_2>  ;
<expressions> ::= <expression>  <expressions_-_1>  ;
# PARSER: expressionsWithDefaults
<expressionsWithDefaults_-_1> ::= <expressionsWithDefaults_-_2>  ;
<expressionsWithDefaults_-_2> ::= ;
<expressionsWithDefaults_-_3> ::= ','  <expressionOrDefault>  ;
<expressionsWithDefaults_-_2> ::= <expressionsWithDefaults_-_3>  <expressionsWithDefaults_-_2>  ;
<expressionsWithDefaults> ::= <expressionOrDefault>  <expressionsWithDefaults_-_1>  ;
# PARSER: constants
<constants_-_1> ::= <constants_-_2>  ;
<constants_-_2> ::= ;
<constants_-_3> ::= ','  <constant>  ;
<constants_-_2> ::= <constants_-_3>  <constants_-_2>  ;
<constants> ::= <constant>  <constants_-_1>  ;
# PARSER: simpleStrings
<simpleStrings_-_1> ::= <simpleStrings_-_2>  ;
<simpleStrings_-_2> ::= ;
<simpleStrings_-_3> ::= ','  <STRING_LITERAL>  ;
<simpleStrings_-_2> ::= <simpleStrings_-_3>  <simpleStrings_-_2>  ;
<simpleStrings> ::= <STRING_LITERAL>  <simpleStrings_-_1>  ;
# PARSER: userVariables
<userVariables_-_1> ::= <userVariables_-_2>  ;
<userVariables_-_2> ::= ;
<userVariables_-_3> ::= ','  <LOCAL_ID>  ;
<userVariables_-_2> ::= <userVariables_-_3>  <userVariables_-_2>  ;
<userVariables> ::= <LOCAL_ID>  <userVariables_-_1>  ;
# PARSER: defaultValue
<defaultValue> ::= <NULL_LITERAL>  ;
<defaultValue_-_1> ::= ;
<defaultValue_-_1> ::= <unaryOperator>  ;
<defaultValue> ::= <defaultValue_-_1>  <constant>  ;
<defaultValue_-_2> ::= ;
<defaultValue_-_2> ::= <ON>  <UPDATE>  <currentTimestamp>  ;
<defaultValue> ::= <currentTimestamp>  <defaultValue_-_2>  ;
# PARSER: currentTimestamp
<currentTimestamp_-_1> ::= <CURRENT_TIMESTAMP>  ;
<currentTimestamp_-_1> ::= <LOCALTIME>  ;
<currentTimestamp_-_1> ::= <LOCALTIMESTAMP>  ;
<currentTimestamp_-_2> ::= ;
<currentTimestamp_-_3> ::= ;
<currentTimestamp_-_3> ::= <decimalLiteral>  ;
<currentTimestamp_-_2> ::= '('  <currentTimestamp_-_3>  ')'  ;
<currentTimestamp> ::= <currentTimestamp_-_1>  <currentTimestamp_-_2>  ;
<currentTimestamp_-_4> ::= ;
<currentTimestamp_-_4> ::= <decimalLiteral>  ;
<currentTimestamp> ::= <NOW>  '('  <currentTimestamp_-_4>  ')'  ;
# PARSER: expressionOrDefault
<expressionOrDefault> ::= <expression>  ;
<expressionOrDefault> ::= <DEFAULT>  ;
# PARSER: ifExists
<ifExists> ::= <IF>  <EXISTS>  ;
# PARSER: ifNotExists
<ifNotExists> ::= <IF>  <NOT>  <EXISTS>  ;
# PARSER: functionCall
<functionCall> ::= <specificFunction>  ;
<functionCall> ::= <aggregateWindowedFunction>  ;
<functionCall_-_1> ::= ;
<functionCall_-_1> ::= <functionArgs>  ;
<functionCall> ::= <scalarFunctionName>  '('  <functionCall_-_1>  ')'  ;
<functionCall_-_2> ::= ;
<functionCall_-_2> ::= <functionArgs>  ;
<functionCall> ::= <fullId>  '('  <functionCall_-_2>  ')'  ;
<functionCall> ::= <passwordFunctionClause>  ;
# PARSER: specificFunction
<specificFunction> ::= <CURRENT_DATE>  ;
<specificFunction> ::= <CURRENT_TIME>  ;
<specificFunction> ::= <CURRENT_TIMESTAMP>  ;
<specificFunction> ::= <CURRENT_USER>  ;
<specificFunction> ::= <LOCALTIME>  ;
<specificFunction> ::= <CONVERT>  '('  <expression>  ','  <convertedDataType>  ')'  ;
<specificFunction> ::= <CONVERT>  '('  <expression>  <USING>  <charsetName>  ')'  ;
<specificFunction> ::= <CAST>  '('  <expression>  <AS>  <convertedDataType>  ')'  ;
<specificFunction> ::= <VALUES>  '('  <fullColumnName>  ')'  ;
<specificFunction_-_1> ::= <specificFunction_-_2>  ;
<specificFunction_-_2> ::= <specificFunction_-_3>  ;
<specificFunction_-_2> ::= <specificFunction_-_3>  <specificFunction_-_2>  ;
<specificFunction_-_3> ::= <caseFuncAlternative>  ;
<specificFunction_-_4> ::= ;
<specificFunction_-_4> ::= <ELSE>  <functionArg>  ;
<specificFunction> ::= <CASE>  <expression>  <specificFunction_-_1>  <specificFunction_-_4>  <END>  ;
<specificFunction_-_5> ::= <specificFunction_-_6>  ;
<specificFunction_-_6> ::= <specificFunction_-_7>  ;
<specificFunction_-_6> ::= <specificFunction_-_7>  <specificFunction_-_6>  ;
<specificFunction_-_7> ::= <caseFuncAlternative>  ;
<specificFunction_-_8> ::= ;
<specificFunction_-_8> ::= <ELSE>  <functionArg>  ;
<specificFunction> ::= <CASE>  <specificFunction_-_5>  <specificFunction_-_8>  <END>  ;
<specificFunction_-_9> ::= ;
<specificFunction_-_9> ::= <USING>  <charsetName>  ;
<specificFunction> ::= <CHAR>  '('  <functionArgs>  <specificFunction_-_9>  ')'  ;
<specificFunction_-_10> ::= <stringLiteral>  ;
<specificFunction_-_10> ::= <expression>  ;
<specificFunction_-_11> ::= <stringLiteral>  ;
<specificFunction_-_11> ::= <expression>  ;
<specificFunction> ::= <POSITION>  '('  <specificFunction_-_10>  <IN>  <specificFunction_-_11>  ')'  ;
<specificFunction_-_12> ::= <SUBSTR>  ;
<specificFunction_-_12> ::= <SUBSTRING>  ;
<specificFunction_-_13> ::= <stringLiteral>  ;
<specificFunction_-_13> ::= <expression>  ;
<specificFunction_-_14> ::= <decimalLiteral>  ;
<specificFunction_-_14> ::= <expression>  ;
<specificFunction_-_15> ::= ;
<specificFunction_-_16> ::= <decimalLiteral>  ;
<specificFunction_-_16> ::= <expression>  ;
<specificFunction_-_15> ::= <FOR>  <specificFunction_-_16>  ;
<specificFunction> ::= <specificFunction_-_12>  '('  <specificFunction_-_13>  <FROM>  <specificFunction_-_14>  <specificFunction_-_15>  ')'  ;
<specificFunction_-_17> ::= <BOTH>  ;
<specificFunction_-_17> ::= <LEADING>  ;
<specificFunction_-_17> ::= <TRAILING>  ;
<specificFunction_-_18> ::= ;
<specificFunction_-_18> ::= <stringLiteral>  ;
<specificFunction_-_18> ::= <expression>  ;
<specificFunction_-_19> ::= <stringLiteral>  ;
<specificFunction_-_19> ::= <expression>  ;
<specificFunction> ::= <TRIM>  '('  <specificFunction_-_17>  <specificFunction_-_18>  <FROM>  <specificFunction_-_19>  ')'  ;
<specificFunction_-_20> ::= <stringLiteral>  ;
<specificFunction_-_20> ::= <expression>  ;
<specificFunction_-_21> ::= <stringLiteral>  ;
<specificFunction_-_21> ::= <expression>  ;
<specificFunction> ::= <TRIM>  '('  <specificFunction_-_20>  <FROM>  <specificFunction_-_21>  ')'  ;
<specificFunction_-_22> ::= <stringLiteral>  ;
<specificFunction_-_22> ::= <expression>  ;
<specificFunction_-_23> ::= ;
<specificFunction_-_24> ::= <CHAR>  ;
<specificFunction_-_24> ::= <BINARY>  ;
<specificFunction_-_23> ::= <AS>  <specificFunction_-_24>  '('  <decimalLiteral>  ')'  ;
<specificFunction_-_25> ::= ;
<specificFunction_-_25> ::= <levelsInWeightString>  ;
<specificFunction> ::= <WEIGHT_STRING>  '('  <specificFunction_-_22>  <specificFunction_-_23>  <specificFunction_-_25>  ')'  ;
<specificFunction_-_26> ::= <stringLiteral>  ;
<specificFunction_-_26> ::= <expression>  ;
<specificFunction> ::= <EXTRACT>  '('  <intervalType>  <FROM>  <specificFunction_-_26>  ')'  ;
<specificFunction_-_27> ::= <DATE>  ;
<specificFunction_-_27> ::= <TIME>  ;
<specificFunction_-_27> ::= <DATETIME>  ;
<specificFunction> ::= <GET_FORMAT>  '('  <specificFunction_-_27>  ','  <stringLiteral>  ')'  ;
# PARSER: caseFuncAlternative
<caseFuncAlternative> ::= <WHEN>  <functionArg>  <THEN>  <functionArg>  ;
# PARSER: levelsInWeightString
<levelsInWeightString_-_1> ::= <levelsInWeightString_-_2>  ;
<levelsInWeightString_-_2> ::= ;
<levelsInWeightString_-_3> ::= ','  <levelInWeightListElement>  ;
<levelsInWeightString_-_2> ::= <levelsInWeightString_-_3>  <levelsInWeightString_-_2>  ;
<levelsInWeightString> ::= <LEVEL>  <levelInWeightListElement>  <levelsInWeightString_-_1>  ;
<levelsInWeightString> ::= <LEVEL>  <decimalLiteral>  '-'  <decimalLiteral>  ;
# PARSER: levelInWeightListElement
<levelInWeightListElement_-_1> ::= ;
<levelInWeightListElement_-_1> ::= <ASC>  ;
<levelInWeightListElement_-_1> ::= <DESC>  ;
<levelInWeightListElement_-_1> ::= <REVERSE>  ;
<levelInWeightListElement> ::= <decimalLiteral>  <levelInWeightListElement_-_1>  ;
# PARSER: aggregateWindowedFunction
<aggregateWindowedFunction_-_1> ::= <AVG>  ;
<aggregateWindowedFunction_-_1> ::= <MAX>  ;
<aggregateWindowedFunction_-_1> ::= <MIN>  ;
<aggregateWindowedFunction_-_1> ::= <SUM>  ;
<aggregateWindowedFunction_-_2> ::= ;
<aggregateWindowedFunction_-_2> ::= <ALL>  ;
<aggregateWindowedFunction_-_2> ::= <DISTINCT>  ;
<aggregateWindowedFunction> ::= <aggregateWindowedFunction_-_1>  '('  <aggregateWindowedFunction_-_2>  <functionArg>  ')'  ;
<aggregateWindowedFunction_-_3> ::= '*'  ;
<aggregateWindowedFunction_-_4> ::= ;
<aggregateWindowedFunction_-_4> ::= <ALL>  ;
<aggregateWindowedFunction_-_3> ::= <aggregateWindowedFunction_-_4>  <functionArg>  ;
<aggregateWindowedFunction> ::= <COUNT>  '('  <aggregateWindowedFunction_-_3>  ')'  ;
<aggregateWindowedFunction> ::= <COUNT>  '('  <DISTINCT>  <functionArgs>  ')'  ;
<aggregateWindowedFunction_-_5> ::= <BIT_AND>  ;
<aggregateWindowedFunction_-_5> ::= <BIT_OR>  ;
<aggregateWindowedFunction_-_5> ::= <BIT_XOR>  ;
<aggregateWindowedFunction_-_5> ::= <STD>  ;
<aggregateWindowedFunction_-_5> ::= <STDDEV>  ;
<aggregateWindowedFunction_-_5> ::= <STDDEV_POP>  ;
<aggregateWindowedFunction_-_5> ::= <STDDEV_SAMP>  ;
<aggregateWindowedFunction_-_5> ::= <VAR_POP>  ;
<aggregateWindowedFunction_-_5> ::= <VAR_SAMP>  ;
<aggregateWindowedFunction_-_5> ::= <VARIANCE>  ;
<aggregateWindowedFunction_-_6> ::= ;
<aggregateWindowedFunction_-_6> ::= <ALL>  ;
<aggregateWindowedFunction> ::= <aggregateWindowedFunction_-_5>  '('  <aggregateWindowedFunction_-_6>  <functionArg>  ')'  ;
<aggregateWindowedFunction_-_7> ::= ;
<aggregateWindowedFunction_-_7> ::= <DISTINCT>  ;
<aggregateWindowedFunction_-_8> ::= ;
<aggregateWindowedFunction_-_9> ::= <aggregateWindowedFunction_-_10>  ;
<aggregateWindowedFunction_-_10> ::= ;
<aggregateWindowedFunction_-_11> ::= ','  <orderByExpression>  ;
<aggregateWindowedFunction_-_10> ::= <aggregateWindowedFunction_-_11>  <aggregateWindowedFunction_-_10>  ;
<aggregateWindowedFunction_-_8> ::= <ORDER>  <BY>  <orderByExpression>  <aggregateWindowedFunction_-_9>  ;
<aggregateWindowedFunction_-_12> ::= ;
<aggregateWindowedFunction_-_12> ::= <SEPARATOR>  <STRING_LITERAL>  ;
<aggregateWindowedFunction> ::= <GROUP_CONCAT>  '('  <aggregateWindowedFunction_-_7>  <functionArgs>  <aggregateWindowedFunction_-_8>  <aggregateWindowedFunction_-_12>  ')'  ;
# PARSER: scalarFunctionName
<scalarFunctionName> ::= <functionNameBase>  ;
<scalarFunctionName> ::= <ASCII>  ;
<scalarFunctionName> ::= <CURDATE>  ;
<scalarFunctionName> ::= <CURRENT_DATE>  ;
<scalarFunctionName> ::= <CURRENT_TIME>  ;
<scalarFunctionName> ::= <CURRENT_TIMESTAMP>  ;
<scalarFunctionName> ::= <CURTIME>  ;
<scalarFunctionName> ::= <DATE_ADD>  ;
<scalarFunctionName> ::= <DATE_SUB>  ;
<scalarFunctionName> ::= <IF>  ;
<scalarFunctionName> ::= <INSERT>  ;
<scalarFunctionName> ::= <LOCALTIME>  ;
<scalarFunctionName> ::= <LOCALTIMESTAMP>  ;
<scalarFunctionName> ::= <MID>  ;
<scalarFunctionName> ::= <NOW>  ;
<scalarFunctionName> ::= <REPLACE>  ;
<scalarFunctionName> ::= <SUBSTR>  ;
<scalarFunctionName> ::= <SUBSTRING>  ;
<scalarFunctionName> ::= <SYSDATE>  ;
<scalarFunctionName> ::= <TRIM>  ;
<scalarFunctionName> ::= <UTC_DATE>  ;
<scalarFunctionName> ::= <UTC_TIME>  ;
<scalarFunctionName> ::= <UTC_TIMESTAMP>  ;
# PARSER: passwordFunctionClause
<passwordFunctionClause_-_1> ::= <PASSWORD>  ;
<passwordFunctionClause_-_1> ::= <OLD_PASSWORD>  ;
<passwordFunctionClause> ::= <passwordFunctionClause_-_1>  '('  <functionArg>  ')'  ;
# PARSER: functionArgs
<functionArgs_-_1> ::= <constant>  ;
<functionArgs_-_1> ::= <fullColumnName>  ;
<functionArgs_-_1> ::= <functionCall>  ;
<functionArgs_-_1> ::= <expression>  ;
<functionArgs_-_2> ::= <functionArgs_-_3>  ;
<functionArgs_-_3> ::= ;
<functionArgs_-_5> ::= <constant>  ;
<functionArgs_-_5> ::= <fullColumnName>  ;
<functionArgs_-_5> ::= <functionCall>  ;
<functionArgs_-_5> ::= <expression>  ;
<functionArgs_-_4> ::= ','  <functionArgs_-_5>  ;
<functionArgs_-_3> ::= <functionArgs_-_4>  <functionArgs_-_3>  ;
<functionArgs> ::= <functionArgs_-_1>  <functionArgs_-_2>  ;
# PARSER: functionArg
<functionArg> ::= <constant>  ;
<functionArg> ::= <fullColumnName>  ;
<functionArg> ::= <functionCall>  ;
<functionArg> ::= <expression>  ;
# PARSER: expression
<expression_-_1> ::= <NOT>  ;
<expression_-_1> ::= '!'  ;
<expression> ::= <expression_-_1>  <expression>  ;
<expression> ::= <expression>  <logicalOperator>  <expression>  ;
<expression_-_2> ::= ;
<expression_-_2> ::= <NOT>  ;
<expression_-_3> ::= <TRUE>  ;
<expression_-_3> ::= <FALSE>  ;
<expression_-_3> ::= <UNKNOWN>  ;
<expression> ::= <predicate>  <IS>  <expression_-_2>  <expression_-_3>  ;
<expression> ::= <predicate>  ;
# PARSER: predicate
<predicate_-_1> ::= ;
<predicate_-_1> ::= <NOT>  ;
<predicate_-_2> ::= <selectStatement>  ;
<predicate_-_2> ::= <expressions>  ;
<predicate> ::= <predicate>  <predicate_-_1>  <IN>  '('  <predicate_-_2>  ')'  ;
<predicate> ::= <predicate>  <IS>  <nullNotnull>  ;
<predicate> ::= <predicate>  <comparisonOperator>  <predicate>  ;
<predicate_-_3> ::= <ALL>  ;
<predicate_-_3> ::= <ANY>  ;
<predicate_-_3> ::= <SOME>  ;
<predicate> ::= <predicate>  <comparisonOperator>  <predicate_-_3>  '('  <selectStatement>  ')'  ;
<predicate_-_4> ::= ;
<predicate_-_4> ::= <NOT>  ;
<predicate> ::= <predicate>  <predicate_-_4>  <BETWEEN>  <predicate>  <AND>  <predicate>  ;
<predicate> ::= <predicate>  <SOUNDS>  <LIKE>  <predicate>  ;
<predicate_-_5> ::= ;
<predicate_-_5> ::= <NOT>  ;
<predicate_-_6> ::= ;
<predicate_-_6> ::= <ESCAPE>  <STRING_LITERAL>  ;
<predicate> ::= <predicate>  <predicate_-_5>  <LIKE>  <predicate>  <predicate_-_6>  ;
<predicate_-_7> ::= ;
<predicate_-_7> ::= <NOT>  ;
<predicate_-_8> ::= <REGEXP>  ;
<predicate_-_8> ::= <RLIKE>  ;
<predicate> ::= <predicate>  <predicate_-_7>  <predicate_-_8>  <predicate>  ;
<predicate_-_9> ::= ;
<predicate_-_9> ::= <LOCAL_ID>  <VAR_ASSIGN>  ;
<predicate> ::= <predicate_-_9>  <expressionAtom>  ;
# PARSER: expressionAtom
<expressionAtom> ::= <constant>  ;
<expressionAtom> ::= <fullColumnName>  ;
<expressionAtom> ::= <functionCall>  ;
<expressionAtom> ::= <expressionAtom>  <COLLATE>  <collationName>  ;
<expressionAtom> ::= <mysqlVariable>  ;
<expressionAtom> ::= <unaryOperator>  <expressionAtom>  ;
<expressionAtom> ::= <BINARY>  <expressionAtom>  ;
<expressionAtom_-_1> ::= <expressionAtom_-_2>  ;
<expressionAtom_-_2> ::= ;
<expressionAtom_-_3> ::= ','  <expression>  ;
<expressionAtom_-_2> ::= <expressionAtom_-_3>  <expressionAtom_-_2>  ;
<expressionAtom> ::= '('  <expression>  <expressionAtom_-_1>  ')'  ;
<expressionAtom_-_4> ::= <expressionAtom_-_5>  ;
<expressionAtom_-_5> ::= <expressionAtom_-_6>  ;
<expressionAtom_-_5> ::= <expressionAtom_-_6>  <expressionAtom_-_5>  ;
<expressionAtom_-_6> ::= ','  <expression>  ;
<expressionAtom> ::= <ROW>  '('  <expression>  <expressionAtom_-_4>  ')'  ;
<expressionAtom> ::= <EXISTS>  '('  <selectStatement>  ')'  ;
<expressionAtom> ::= '('  <selectStatement>  ')'  ;
<expressionAtom> ::= <INTERVAL>  <expression>  <intervalType>  ;
<expressionAtom> ::= <expressionAtom>  <bitOperator>  <expressionAtom>  ;
<expressionAtom> ::= <expressionAtom>  <mathOperator>  <expressionAtom>  ;
# PARSER: unaryOperator
<unaryOperator> ::= '!'  ;
<unaryOperator> ::= '~'  ;
<unaryOperator> ::= '+'  ;
<unaryOperator> ::= '-'  ;
<unaryOperator> ::= <NOT>  ;
# PARSER: comparisonOperator
<comparisonOperator> ::= '='  ;
<comparisonOperator> ::= '>'  ;
<comparisonOperator> ::= '<'  ;
<comparisonOperator> ::= '<'  '='  ;
<comparisonOperator> ::= '>'  '='  ;
<comparisonOperator> ::= '<'  '>'  ;
<comparisonOperator> ::= '!'  '='  ;
<comparisonOperator> ::= '<'  '='  '>'  ;
# PARSER: logicalOperator
<logicalOperator> ::= <AND>  ;
<logicalOperator> ::= '&'  '&'  ;
<logicalOperator> ::= <XOR>  ;
<logicalOperator> ::= <OR>  ;
<logicalOperator> ::= '|'  '|'  ;
# PARSER: bitOperator
<bitOperator> ::= '<'  '<'  ;
<bitOperator> ::= '>'  '>'  ;
<bitOperator> ::= '&'  ;
<bitOperator> ::= '^'  ;
<bitOperator> ::= '|'  ;
# PARSER: mathOperator
<mathOperator> ::= '*'  ;
<mathOperator> ::= '/'  ;
<mathOperator> ::= '%'  ;
<mathOperator> ::= <DIV>  ;
<mathOperator> ::= <MOD>  ;
<mathOperator> ::= '+'  ;
<mathOperator> ::= '-'  ;
<mathOperator> ::= '--'  ;
# PARSER: charsetNameBase
<charsetNameBase> ::= <ARMSCII8>  ;
<charsetNameBase> ::= <ASCII>  ;
<charsetNameBase> ::= <BIG5>  ;
<charsetNameBase> ::= <CP1250>  ;
<charsetNameBase> ::= <CP1251>  ;
<charsetNameBase> ::= <CP1256>  ;
<charsetNameBase> ::= <CP1257>  ;
<charsetNameBase> ::= <CP850>  ;
<charsetNameBase> ::= <CP852>  ;
<charsetNameBase> ::= <CP866>  ;
<charsetNameBase> ::= <CP932>  ;
<charsetNameBase> ::= <DEC8>  ;
<charsetNameBase> ::= <EUCJPMS>  ;
<charsetNameBase> ::= <EUCKR>  ;
<charsetNameBase> ::= <GB2312>  ;
<charsetNameBase> ::= <GBK>  ;
<charsetNameBase> ::= <GEOSTD8>  ;
<charsetNameBase> ::= <GREEK>  ;
<charsetNameBase> ::= <HEBREW>  ;
<charsetNameBase> ::= <HP8>  ;
<charsetNameBase> ::= <KEYBCS2>  ;
<charsetNameBase> ::= <KOI8R>  ;
<charsetNameBase> ::= <KOI8U>  ;
<charsetNameBase> ::= <LATIN1>  ;
<charsetNameBase> ::= <LATIN2>  ;
<charsetNameBase> ::= <LATIN5>  ;
<charsetNameBase> ::= <LATIN7>  ;
<charsetNameBase> ::= <MACCE>  ;
<charsetNameBase> ::= <MACROMAN>  ;
<charsetNameBase> ::= <SJIS>  ;
<charsetNameBase> ::= <SWE7>  ;
<charsetNameBase> ::= <TIS620>  ;
<charsetNameBase> ::= <UCS2>  ;
<charsetNameBase> ::= <UJIS>  ;
<charsetNameBase> ::= <UTF16>  ;
<charsetNameBase> ::= <UTF16LE>  ;
<charsetNameBase> ::= <UTF32>  ;
<charsetNameBase> ::= <UTF8>  ;
<charsetNameBase> ::= <UTF8MB3>  ;
<charsetNameBase> ::= <UTF8MB4>  ;
# PARSER: transactionLevelBase
<transactionLevelBase> ::= <REPEATABLE>  ;
<transactionLevelBase> ::= <COMMITTED>  ;
<transactionLevelBase> ::= <UNCOMMITTED>  ;
<transactionLevelBase> ::= <SERIALIZABLE>  ;
# PARSER: privilegesBase
<privilegesBase> ::= <TABLES>  ;
<privilegesBase> ::= <ROUTINE>  ;
<privilegesBase> ::= <EXECUTE>  ;
<privilegesBase> ::= <FILE>  ;
<privilegesBase> ::= <PROCESS>  ;
<privilegesBase> ::= <RELOAD>  ;
<privilegesBase> ::= <SHUTDOWN>  ;
<privilegesBase> ::= <SUPER>  ;
<privilegesBase> ::= <PRIVILEGES>  ;
# PARSER: intervalTypeBase
<intervalTypeBase> ::= <QUARTER>  ;
<intervalTypeBase> ::= <MONTH>  ;
<intervalTypeBase> ::= <DAY>  ;
<intervalTypeBase> ::= <HOUR>  ;
<intervalTypeBase> ::= <MINUTE>  ;
<intervalTypeBase> ::= <WEEK>  ;
<intervalTypeBase> ::= <SECOND>  ;
<intervalTypeBase> ::= <MICROSECOND>  ;
# PARSER: dataTypeBase
<dataTypeBase> ::= <DATE>  ;
<dataTypeBase> ::= <TIME>  ;
<dataTypeBase> ::= <TIMESTAMP>  ;
<dataTypeBase> ::= <DATETIME>  ;
<dataTypeBase> ::= <YEAR>  ;
<dataTypeBase> ::= <ENUM>  ;
<dataTypeBase> ::= <TEXT>  ;
# PARSER: keywordsCanBeId
<keywordsCanBeId> ::= <ACCOUNT>  ;
<keywordsCanBeId> ::= <ACTION>  ;
<keywordsCanBeId> ::= <AFTER>  ;
<keywordsCanBeId> ::= <AGGREGATE>  ;
<keywordsCanBeId> ::= <ALGORITHM>  ;
<keywordsCanBeId> ::= <ANY>  ;
<keywordsCanBeId> ::= <AT>  ;
<keywordsCanBeId> ::= <AUTHORS>  ;
<keywordsCanBeId> ::= <AUTOCOMMIT>  ;
<keywordsCanBeId> ::= <AUTOEXTEND_SIZE>  ;
<keywordsCanBeId> ::= <AUTO_INCREMENT>  ;
<keywordsCanBeId> ::= <AVG_ROW_LENGTH>  ;
<keywordsCanBeId> ::= <BEGIN>  ;
<keywordsCanBeId> ::= <BINLOG>  ;
<keywordsCanBeId> ::= <BIT>  ;
<keywordsCanBeId> ::= <BLOCK>  ;
<keywordsCanBeId> ::= <BOOL>  ;
<keywordsCanBeId> ::= <BOOLEAN>  ;
<keywordsCanBeId> ::= <BTREE>  ;
<keywordsCanBeId> ::= <CACHE>  ;
<keywordsCanBeId> ::= <CASCADED>  ;
<keywordsCanBeId> ::= <CHAIN>  ;
<keywordsCanBeId> ::= <CHANGED>  ;
<keywordsCanBeId> ::= <CHANNEL>  ;
<keywordsCanBeId> ::= <CHECKSUM>  ;
<keywordsCanBeId> ::= <PAGE_CHECKSUM>  ;
<keywordsCanBeId> ::= <CATALOG_NAME>  ;
<keywordsCanBeId> ::= <CIPHER>  ;
<keywordsCanBeId> ::= <CLASS_ORIGIN>  ;
<keywordsCanBeId> ::= <CLIENT>  ;
<keywordsCanBeId> ::= <CLOSE>  ;
<keywordsCanBeId> ::= <COALESCE>  ;
<keywordsCanBeId> ::= <CODE>  ;
<keywordsCanBeId> ::= <COLUMNS>  ;
<keywordsCanBeId> ::= <COLUMN_FORMAT>  ;
<keywordsCanBeId> ::= <COLUMN_NAME>  ;
<keywordsCanBeId> ::= <COMMENT>  ;
<keywordsCanBeId> ::= <COMMIT>  ;
<keywordsCanBeId> ::= <COMPACT>  ;
<keywordsCanBeId> ::= <COMPLETION>  ;
<keywordsCanBeId> ::= <COMPRESSED>  ;
<keywordsCanBeId> ::= <COMPRESSION>  ;
<keywordsCanBeId> ::= <CONCURRENT>  ;
<keywordsCanBeId> ::= <CONNECTION>  ;
<keywordsCanBeId> ::= <CONSISTENT>  ;
<keywordsCanBeId> ::= <CONSTRAINT_CATALOG>  ;
<keywordsCanBeId> ::= <CONSTRAINT_NAME>  ;
<keywordsCanBeId> ::= <CONSTRAINT_SCHEMA>  ;
<keywordsCanBeId> ::= <CONTAINS>  ;
<keywordsCanBeId> ::= <CONTEXT>  ;
<keywordsCanBeId> ::= <CONTRIBUTORS>  ;
<keywordsCanBeId> ::= <COPY>  ;
<keywordsCanBeId> ::= <CPU>  ;
<keywordsCanBeId> ::= <CURRENT>  ;
<keywordsCanBeId> ::= <CURSOR_NAME>  ;
<keywordsCanBeId> ::= <DATA>  ;
<keywordsCanBeId> ::= <DATAFILE>  ;
<keywordsCanBeId> ::= <DEALLOCATE>  ;
<keywordsCanBeId> ::= <DEFAULT_AUTH>  ;
<keywordsCanBeId> ::= <DEFINER>  ;
<keywordsCanBeId> ::= <DELAY_KEY_WRITE>  ;
<keywordsCanBeId> ::= <DES_KEY_FILE>  ;
<keywordsCanBeId> ::= <DIAGNOSTICS>  ;
<keywordsCanBeId> ::= <DIRECTORY>  ;
<keywordsCanBeId> ::= <DISABLE>  ;
<keywordsCanBeId> ::= <DISCARD>  ;
<keywordsCanBeId> ::= <DISK>  ;
<keywordsCanBeId> ::= <DO>  ;
<keywordsCanBeId> ::= <DUMPFILE>  ;
<keywordsCanBeId> ::= <DUPLICATE>  ;
<keywordsCanBeId> ::= <DYNAMIC>  ;
<keywordsCanBeId> ::= <ENABLE>  ;
<keywordsCanBeId> ::= <ENCRYPTION>  ;
<keywordsCanBeId> ::= <END>  ;
<keywordsCanBeId> ::= <ENDS>  ;
<keywordsCanBeId> ::= <ENGINE>  ;
<keywordsCanBeId> ::= <ENGINES>  ;
<keywordsCanBeId> ::= <ERROR>  ;
<keywordsCanBeId> ::= <ERRORS>  ;
<keywordsCanBeId> ::= <ESCAPE>  ;
<keywordsCanBeId> ::= <EVEN>  ;
<keywordsCanBeId> ::= <EVENT>  ;
<keywordsCanBeId> ::= <EVENTS>  ;
<keywordsCanBeId> ::= <EVERY>  ;
<keywordsCanBeId> ::= <EXCHANGE>  ;
<keywordsCanBeId> ::= <EXCLUSIVE>  ;
<keywordsCanBeId> ::= <EXPIRE>  ;
<keywordsCanBeId> ::= <EXPORT>  ;
<keywordsCanBeId> ::= <EXTENDED>  ;
<keywordsCanBeId> ::= <EXTENT_SIZE>  ;
<keywordsCanBeId> ::= <FAST>  ;
<keywordsCanBeId> ::= <FAULTS>  ;
<keywordsCanBeId> ::= <FIELDS>  ;
<keywordsCanBeId> ::= <FILE_BLOCK_SIZE>  ;
<keywordsCanBeId> ::= <FILTER>  ;
<keywordsCanBeId> ::= <FIRST>  ;
<keywordsCanBeId> ::= <FIXED>  ;
<keywordsCanBeId> ::= <FLUSH>  ;
<keywordsCanBeId> ::= <FOLLOWS>  ;
<keywordsCanBeId> ::= <FOUND>  ;
<keywordsCanBeId> ::= <FULL>  ;
<keywordsCanBeId> ::= <FUNCTION>  ;
<keywordsCanBeId> ::= <GENERAL>  ;
<keywordsCanBeId> ::= <GLOBAL>  ;
<keywordsCanBeId> ::= <GRANTS>  ;
<keywordsCanBeId> ::= <GROUP_REPLICATION>  ;
<keywordsCanBeId> ::= <HANDLER>  ;
<keywordsCanBeId> ::= <HASH>  ;
<keywordsCanBeId> ::= <HELP>  ;
<keywordsCanBeId> ::= <HOST>  ;
<keywordsCanBeId> ::= <HOSTS>  ;
<keywordsCanBeId> ::= <IDENTIFIED>  ;
<keywordsCanBeId> ::= <IGNORE_SERVER_IDS>  ;
<keywordsCanBeId> ::= <IMPORT>  ;
<keywordsCanBeId> ::= <INDEXES>  ;
<keywordsCanBeId> ::= <INITIAL_SIZE>  ;
<keywordsCanBeId> ::= <INPLACE>  ;
<keywordsCanBeId> ::= <INSERT_METHOD>  ;
<keywordsCanBeId> ::= <INSTALL>  ;
<keywordsCanBeId> ::= <INSTANCE>  ;
<keywordsCanBeId> ::= <INTERNAL>  ;
<keywordsCanBeId> ::= <INVOKER>  ;
<keywordsCanBeId> ::= <IO>  ;
<keywordsCanBeId> ::= <IO_THREAD>  ;
<keywordsCanBeId> ::= <IPC>  ;
<keywordsCanBeId> ::= <ISOLATION>  ;
<keywordsCanBeId> ::= <ISSUER>  ;
<keywordsCanBeId> ::= <JSON>  ;
<keywordsCanBeId> ::= <KEY_BLOCK_SIZE>  ;
<keywordsCanBeId> ::= <LANGUAGE>  ;
<keywordsCanBeId> ::= <LAST>  ;
<keywordsCanBeId> ::= <LEAVES>  ;
<keywordsCanBeId> ::= <LESS>  ;
<keywordsCanBeId> ::= <LEVEL>  ;
<keywordsCanBeId> ::= <LIST>  ;
<keywordsCanBeId> ::= <LOCAL>  ;
<keywordsCanBeId> ::= <LOGFILE>  ;
<keywordsCanBeId> ::= <LOGS>  ;
<keywordsCanBeId> ::= <MASTER>  ;
<keywordsCanBeId> ::= <MASTER_AUTO_POSITION>  ;
<keywordsCanBeId> ::= <MASTER_CONNECT_RETRY>  ;
<keywordsCanBeId> ::= <MASTER_DELAY>  ;
<keywordsCanBeId> ::= <MASTER_HEARTBEAT_PERIOD>  ;
<keywordsCanBeId> ::= <MASTER_HOST>  ;
<keywordsCanBeId> ::= <MASTER_LOG_FILE>  ;
<keywordsCanBeId> ::= <MASTER_LOG_POS>  ;
<keywordsCanBeId> ::= <MASTER_PASSWORD>  ;
<keywordsCanBeId> ::= <MASTER_PORT>  ;
<keywordsCanBeId> ::= <MASTER_RETRY_COUNT>  ;
<keywordsCanBeId> ::= <MASTER_SSL>  ;
<keywordsCanBeId> ::= <MASTER_SSL_CA>  ;
<keywordsCanBeId> ::= <MASTER_SSL_CAPATH>  ;
<keywordsCanBeId> ::= <MASTER_SSL_CERT>  ;
<keywordsCanBeId> ::= <MASTER_SSL_CIPHER>  ;
<keywordsCanBeId> ::= <MASTER_SSL_CRL>  ;
<keywordsCanBeId> ::= <MASTER_SSL_CRLPATH>  ;
<keywordsCanBeId> ::= <MASTER_SSL_KEY>  ;
<keywordsCanBeId> ::= <MASTER_TLS_VERSION>  ;
<keywordsCanBeId> ::= <MASTER_USER>  ;
<keywordsCanBeId> ::= <MAX_CONNECTIONS_PER_HOUR>  ;
<keywordsCanBeId> ::= <MAX_QUERIES_PER_HOUR>  ;
<keywordsCanBeId> ::= <MAX_ROWS>  ;
<keywordsCanBeId> ::= <MAX_SIZE>  ;
<keywordsCanBeId> ::= <MAX_UPDATES_PER_HOUR>  ;
<keywordsCanBeId> ::= <MAX_USER_CONNECTIONS>  ;
<keywordsCanBeId> ::= <MEDIUM>  ;
<keywordsCanBeId> ::= <MEMORY>  ;
<keywordsCanBeId> ::= <MERGE>  ;
<keywordsCanBeId> ::= <MESSAGE_TEXT>  ;
<keywordsCanBeId> ::= <MID>  ;
<keywordsCanBeId> ::= <MIGRATE>  ;
<keywordsCanBeId> ::= <MIN_ROWS>  ;
<keywordsCanBeId> ::= <MODE>  ;
<keywordsCanBeId> ::= <MODIFY>  ;
<keywordsCanBeId> ::= <MUTEX>  ;
<keywordsCanBeId> ::= <MYSQL>  ;
<keywordsCanBeId> ::= <MYSQL_ERRNO>  ;
<keywordsCanBeId> ::= <NAME>  ;
<keywordsCanBeId> ::= <NAMES>  ;
<keywordsCanBeId> ::= <NCHAR>  ;
<keywordsCanBeId> ::= <NEVER>  ;
<keywordsCanBeId> ::= <NEXT>  ;
<keywordsCanBeId> ::= <NO>  ;
<keywordsCanBeId> ::= <NODEGROUP>  ;
<keywordsCanBeId> ::= <NONE>  ;
<keywordsCanBeId> ::= <NUMBER>  ;
<keywordsCanBeId> ::= <OFFLINE>  ;
<keywordsCanBeId> ::= <OFFSET>  ;
<keywordsCanBeId> ::= <OJ>  ;
<keywordsCanBeId> ::= <OLD_PASSWORD>  ;
<keywordsCanBeId> ::= <ONE>  ;
<keywordsCanBeId> ::= <ONLINE>  ;
<keywordsCanBeId> ::= <ONLY>  ;
<keywordsCanBeId> ::= <OPEN>  ;
<keywordsCanBeId> ::= <OPTIMIZER_COSTS>  ;
<keywordsCanBeId> ::= <OPTIONS>  ;
<keywordsCanBeId> ::= <OWNER>  ;
<keywordsCanBeId> ::= <PACK_KEYS>  ;
<keywordsCanBeId> ::= <PAGE>  ;
<keywordsCanBeId> ::= <PARSER>  ;
<keywordsCanBeId> ::= <PARTIAL>  ;
<keywordsCanBeId> ::= <PARTITIONING>  ;
<keywordsCanBeId> ::= <PARTITIONS>  ;
<keywordsCanBeId> ::= <PASSWORD>  ;
<keywordsCanBeId> ::= <PHASE>  ;
<keywordsCanBeId> ::= <PLUGINS>  ;
<keywordsCanBeId> ::= <PLUGIN_DIR>  ;
<keywordsCanBeId> ::= <PLUGIN>  ;
<keywordsCanBeId> ::= <PORT>  ;
<keywordsCanBeId> ::= <PRECEDES>  ;
<keywordsCanBeId> ::= <PREPARE>  ;
<keywordsCanBeId> ::= <PRESERVE>  ;
<keywordsCanBeId> ::= <PREV>  ;
<keywordsCanBeId> ::= <PROCESSLIST>  ;
<keywordsCanBeId> ::= <PROFILE>  ;
<keywordsCanBeId> ::= <PROFILES>  ;
<keywordsCanBeId> ::= <PROXY>  ;
<keywordsCanBeId> ::= <QUERY>  ;
<keywordsCanBeId> ::= <QUICK>  ;
<keywordsCanBeId> ::= <REBUILD>  ;
<keywordsCanBeId> ::= <RECOVER>  ;
<keywordsCanBeId> ::= <REDO_BUFFER_SIZE>  ;
<keywordsCanBeId> ::= <REDUNDANT>  ;
<keywordsCanBeId> ::= <RELAY>  ;
<keywordsCanBeId> ::= <RELAYLOG>  ;
<keywordsCanBeId> ::= <RELAY_LOG_FILE>  ;
<keywordsCanBeId> ::= <RELAY_LOG_POS>  ;
<keywordsCanBeId> ::= <REMOVE>  ;
<keywordsCanBeId> ::= <REORGANIZE>  ;
<keywordsCanBeId> ::= <REPAIR>  ;
<keywordsCanBeId> ::= <REPLICATE_DO_DB>  ;
<keywordsCanBeId> ::= <REPLICATE_DO_TABLE>  ;
<keywordsCanBeId> ::= <REPLICATE_IGNORE_DB>  ;
<keywordsCanBeId> ::= <REPLICATE_IGNORE_TABLE>  ;
<keywordsCanBeId> ::= <REPLICATE_REWRITE_DB>  ;
<keywordsCanBeId> ::= <REPLICATE_WILD_DO_TABLE>  ;
<keywordsCanBeId> ::= <REPLICATE_WILD_IGNORE_TABLE>  ;
<keywordsCanBeId> ::= <REPLICATION>  ;
<keywordsCanBeId> ::= <RESET>  ;
<keywordsCanBeId> ::= <RESUME>  ;
<keywordsCanBeId> ::= <RETURNED_SQLSTATE>  ;
<keywordsCanBeId> ::= <RETURNS>  ;
<keywordsCanBeId> ::= <ROLLBACK>  ;
<keywordsCanBeId> ::= <ROLLUP>  ;
<keywordsCanBeId> ::= <ROTATE>  ;
<keywordsCanBeId> ::= <ROW>  ;
<keywordsCanBeId> ::= <ROWS>  ;
<keywordsCanBeId> ::= <ROW_FORMAT>  ;
<keywordsCanBeId> ::= <SAVEPOINT>  ;
<keywordsCanBeId> ::= <SCHEDULE>  ;
<keywordsCanBeId> ::= <SCHEMA_NAME>  ;
<keywordsCanBeId> ::= <SECURITY>  ;
<keywordsCanBeId> ::= <SERIAL>  ;
<keywordsCanBeId> ::= <SERVER>  ;
<keywordsCanBeId> ::= <SESSION>  ;
<keywordsCanBeId> ::= <SHARE>  ;
<keywordsCanBeId> ::= <SHARED>  ;
<keywordsCanBeId> ::= <SIGNED>  ;
<keywordsCanBeId> ::= <SIMPLE>  ;
<keywordsCanBeId> ::= <SLAVE>  ;
<keywordsCanBeId> ::= <SLOW>  ;
<keywordsCanBeId> ::= <SNAPSHOT>  ;
<keywordsCanBeId> ::= <SOCKET>  ;
<keywordsCanBeId> ::= <SOME>  ;
<keywordsCanBeId> ::= <SONAME>  ;
<keywordsCanBeId> ::= <SOUNDS>  ;
<keywordsCanBeId> ::= <SOURCE>  ;
<keywordsCanBeId> ::= <SQL_AFTER_GTIDS>  ;
<keywordsCanBeId> ::= <SQL_AFTER_MTS_GAPS>  ;
<keywordsCanBeId> ::= <SQL_BEFORE_GTIDS>  ;
<keywordsCanBeId> ::= <SQL_BUFFER_RESULT>  ;
<keywordsCanBeId> ::= <SQL_CACHE>  ;
<keywordsCanBeId> ::= <SQL_NO_CACHE>  ;
<keywordsCanBeId> ::= <SQL_THREAD>  ;
<keywordsCanBeId> ::= <STACKED>  ;
<keywordsCanBeId> ::= <START>  ;
<keywordsCanBeId> ::= <STARTS>  ;
<keywordsCanBeId> ::= <STATS_AUTO_RECALC>  ;
<keywordsCanBeId> ::= <STATS_PERSISTENT>  ;
<keywordsCanBeId> ::= <STATS_SAMPLE_PAGES>  ;
<keywordsCanBeId> ::= <STATUS>  ;
<keywordsCanBeId> ::= <STOP>  ;
<keywordsCanBeId> ::= <STORAGE>  ;
<keywordsCanBeId> ::= <STRING>  ;
<keywordsCanBeId> ::= <SUBCLASS_ORIGIN>  ;
<keywordsCanBeId> ::= <SUBJECT>  ;
<keywordsCanBeId> ::= <SUBPARTITION>  ;
<keywordsCanBeId> ::= <SUBPARTITIONS>  ;
<keywordsCanBeId> ::= <SUSPEND>  ;
<keywordsCanBeId> ::= <SWAPS>  ;
<keywordsCanBeId> ::= <SWITCHES>  ;
<keywordsCanBeId> ::= <TABLE_NAME>  ;
<keywordsCanBeId> ::= <TABLESPACE>  ;
<keywordsCanBeId> ::= <TEMPORARY>  ;
<keywordsCanBeId> ::= <TEMPTABLE>  ;
<keywordsCanBeId> ::= <THAN>  ;
<keywordsCanBeId> ::= <TRADITIONAL>  ;
<keywordsCanBeId> ::= <TRANSACTION>  ;
<keywordsCanBeId> ::= <TRIGGERS>  ;
<keywordsCanBeId> ::= <TRUNCATE>  ;
<keywordsCanBeId> ::= <UNDEFINED>  ;
<keywordsCanBeId> ::= <UNDOFILE>  ;
<keywordsCanBeId> ::= <UNDO_BUFFER_SIZE>  ;
<keywordsCanBeId> ::= <UNINSTALL>  ;
<keywordsCanBeId> ::= <UNKNOWN>  ;
<keywordsCanBeId> ::= <UNTIL>  ;
<keywordsCanBeId> ::= <UPGRADE>  ;
<keywordsCanBeId> ::= <USER>  ;
<keywordsCanBeId> ::= <USE_FRM>  ;
<keywordsCanBeId> ::= <USER_RESOURCES>  ;
<keywordsCanBeId> ::= <VALIDATION>  ;
<keywordsCanBeId> ::= <VALUE>  ;
<keywordsCanBeId> ::= <VARIABLES>  ;
<keywordsCanBeId> ::= <VIEW>  ;
<keywordsCanBeId> ::= <WAIT>  ;
<keywordsCanBeId> ::= <WARNINGS>  ;
<keywordsCanBeId> ::= <WITHOUT>  ;
<keywordsCanBeId> ::= <WORK>  ;
<keywordsCanBeId> ::= <WRAPPER>  ;
<keywordsCanBeId> ::= <X509>  ;
<keywordsCanBeId> ::= <XA>  ;
<keywordsCanBeId> ::= <XML>  ;
# PARSER: functionNameBase
<functionNameBase> ::= <ABS>  ;
<functionNameBase> ::= <ACOS>  ;
<functionNameBase> ::= <ADDDATE>  ;
<functionNameBase> ::= <ADDTIME>  ;
<functionNameBase> ::= <AES_DECRYPT>  ;
<functionNameBase> ::= <AES_ENCRYPT>  ;
<functionNameBase> ::= <AREA>  ;
<functionNameBase> ::= <ASBINARY>  ;
<functionNameBase> ::= <ASIN>  ;
<functionNameBase> ::= <ASTEXT>  ;
<functionNameBase> ::= <ASWKB>  ;
<functionNameBase> ::= <ASWKT>  ;
<functionNameBase> ::= <ASYMMETRIC_DECRYPT>  ;
<functionNameBase> ::= <ASYMMETRIC_DERIVE>  ;
<functionNameBase> ::= <ASYMMETRIC_ENCRYPT>  ;
<functionNameBase> ::= <ASYMMETRIC_SIGN>  ;
<functionNameBase> ::= <ASYMMETRIC_VERIFY>  ;
<functionNameBase> ::= <ATAN>  ;
<functionNameBase> ::= <ATAN2>  ;
<functionNameBase> ::= <BENCHMARK>  ;
<functionNameBase> ::= <BIN>  ;
<functionNameBase> ::= <BIT_COUNT>  ;
<functionNameBase> ::= <BIT_LENGTH>  ;
<functionNameBase> ::= <BUFFER>  ;
<functionNameBase> ::= <CEIL>  ;
<functionNameBase> ::= <CEILING>  ;
<functionNameBase> ::= <CENTROID>  ;
<functionNameBase> ::= <CHARACTER_LENGTH>  ;
<functionNameBase> ::= <CHARSET>  ;
<functionNameBase> ::= <CHAR_LENGTH>  ;
<functionNameBase> ::= <COERCIBILITY>  ;
<functionNameBase> ::= <COLLATION>  ;
<functionNameBase> ::= <COMPRESS>  ;
<functionNameBase> ::= <CONCAT>  ;
<functionNameBase> ::= <CONCAT_WS>  ;
<functionNameBase> ::= <CONNECTION_ID>  ;
<functionNameBase> ::= <CONV>  ;
<functionNameBase> ::= <CONVERT_TZ>  ;
<functionNameBase> ::= <COS>  ;
<functionNameBase> ::= <COT>  ;
<functionNameBase> ::= <COUNT>  ;
<functionNameBase> ::= <CRC32>  ;
<functionNameBase> ::= <CREATE_ASYMMETRIC_PRIV_KEY>  ;
<functionNameBase> ::= <CREATE_ASYMMETRIC_PUB_KEY>  ;
<functionNameBase> ::= <CREATE_DH_PARAMETERS>  ;
<functionNameBase> ::= <CREATE_DIGEST>  ;
<functionNameBase> ::= <CROSSES>  ;
<functionNameBase> ::= <DATABASE>  ;
<functionNameBase> ::= <DATE>  ;
<functionNameBase> ::= <DATEDIFF>  ;
<functionNameBase> ::= <DATE_FORMAT>  ;
<functionNameBase> ::= <DAY>  ;
<functionNameBase> ::= <DAYNAME>  ;
<functionNameBase> ::= <DAYOFMONTH>  ;
<functionNameBase> ::= <DAYOFWEEK>  ;
<functionNameBase> ::= <DAYOFYEAR>  ;
<functionNameBase> ::= <DECODE>  ;
<functionNameBase> ::= <DEGREES>  ;
<functionNameBase> ::= <DES_DECRYPT>  ;
<functionNameBase> ::= <DES_ENCRYPT>  ;
<functionNameBase> ::= <DIMENSION>  ;
<functionNameBase> ::= <DISJOINT>  ;
<functionNameBase> ::= <ELT>  ;
<functionNameBase> ::= <ENCODE>  ;
<functionNameBase> ::= <ENCRYPT>  ;
<functionNameBase> ::= <ENDPOINT>  ;
<functionNameBase> ::= <ENVELOPE>  ;
<functionNameBase> ::= <EQUALS>  ;
<functionNameBase> ::= <EXP>  ;
<functionNameBase> ::= <EXPORT_SET>  ;
<functionNameBase> ::= <EXTERIORRING>  ;
<functionNameBase> ::= <EXTRACTVALUE>  ;
<functionNameBase> ::= <FIELD>  ;
<functionNameBase> ::= <FIND_IN_SET>  ;
<functionNameBase> ::= <FLOOR>  ;
<functionNameBase> ::= <FORMAT>  ;
<functionNameBase> ::= <FOUND_ROWS>  ;
<functionNameBase> ::= <FROM_BASE64>  ;
<functionNameBase> ::= <FROM_DAYS>  ;
<functionNameBase> ::= <FROM_UNIXTIME>  ;
<functionNameBase> ::= <GEOMCOLLFROMTEXT>  ;
<functionNameBase> ::= <GEOMCOLLFROMWKB>  ;
<functionNameBase> ::= <GEOMETRYCOLLECTION>  ;
<functionNameBase> ::= <GEOMETRYCOLLECTIONFROMTEXT>  ;
<functionNameBase> ::= <GEOMETRYCOLLECTIONFROMWKB>  ;
<functionNameBase> ::= <GEOMETRYFROMTEXT>  ;
<functionNameBase> ::= <GEOMETRYFROMWKB>  ;
<functionNameBase> ::= <GEOMETRYN>  ;
<functionNameBase> ::= <GEOMETRYTYPE>  ;
<functionNameBase> ::= <GEOMFROMTEXT>  ;
<functionNameBase> ::= <GEOMFROMWKB>  ;
<functionNameBase> ::= <GET_FORMAT>  ;
<functionNameBase> ::= <GET_LOCK>  ;
<functionNameBase> ::= <GLENGTH>  ;
<functionNameBase> ::= <GREATEST>  ;
<functionNameBase> ::= <GTID_SUBSET>  ;
<functionNameBase> ::= <GTID_SUBTRACT>  ;
<functionNameBase> ::= <HEX>  ;
<functionNameBase> ::= <HOUR>  ;
<functionNameBase> ::= <IFNULL>  ;
<functionNameBase> ::= <INET6_ATON>  ;
<functionNameBase> ::= <INET6_NTOA>  ;
<functionNameBase> ::= <INET_ATON>  ;
<functionNameBase> ::= <INET_NTOA>  ;
<functionNameBase> ::= <INSTR>  ;
<functionNameBase> ::= <INTERIORRINGN>  ;
<functionNameBase> ::= <INTERSECTS>  ;
<functionNameBase> ::= <INVISIBLE>  ;
<functionNameBase> ::= <ISCLOSED>  ;
<functionNameBase> ::= <ISEMPTY>  ;
<functionNameBase> ::= <ISNULL>  ;
<functionNameBase> ::= <ISSIMPLE>  ;
<functionNameBase> ::= <IS_FREE_LOCK>  ;
<functionNameBase> ::= <IS_IPV4>  ;
<functionNameBase> ::= <IS_IPV4_COMPAT>  ;
<functionNameBase> ::= <IS_IPV4_MAPPED>  ;
<functionNameBase> ::= <IS_IPV6>  ;
<functionNameBase> ::= <IS_USED_LOCK>  ;
<functionNameBase> ::= <LAST_INSERT_ID>  ;
<functionNameBase> ::= <LCASE>  ;
<functionNameBase> ::= <LEAST>  ;
<functionNameBase> ::= <LEFT>  ;
<functionNameBase> ::= <LENGTH>  ;
<functionNameBase> ::= <LINEFROMTEXT>  ;
<functionNameBase> ::= <LINEFROMWKB>  ;
<functionNameBase> ::= <LINESTRING>  ;
<functionNameBase> ::= <LINESTRINGFROMTEXT>  ;
<functionNameBase> ::= <LINESTRINGFROMWKB>  ;
<functionNameBase> ::= <LN>  ;
<functionNameBase> ::= <LOAD_FILE>  ;
<functionNameBase> ::= <LOCATE>  ;
<functionNameBase> ::= <LOG>  ;
<functionNameBase> ::= <LOG10>  ;
<functionNameBase> ::= <LOG2>  ;
<functionNameBase> ::= <LOWER>  ;
<functionNameBase> ::= <LPAD>  ;
<functionNameBase> ::= <LTRIM>  ;
<functionNameBase> ::= <MAKEDATE>  ;
<functionNameBase> ::= <MAKETIME>  ;
<functionNameBase> ::= <MAKE_SET>  ;
<functionNameBase> ::= <MASTER_POS_WAIT>  ;
<functionNameBase> ::= <MBRCONTAINS>  ;
<functionNameBase> ::= <MBRDISJOINT>  ;
<functionNameBase> ::= <MBREQUAL>  ;
<functionNameBase> ::= <MBRINTERSECTS>  ;
<functionNameBase> ::= <MBROVERLAPS>  ;
<functionNameBase> ::= <MBRTOUCHES>  ;
<functionNameBase> ::= <MBRWITHIN>  ;
<functionNameBase> ::= <MD5>  ;
<functionNameBase> ::= <MICROSECOND>  ;
<functionNameBase> ::= <MINUTE>  ;
<functionNameBase> ::= <MLINEFROMTEXT>  ;
<functionNameBase> ::= <MLINEFROMWKB>  ;
<functionNameBase> ::= <MONTH>  ;
<functionNameBase> ::= <MONTHNAME>  ;
<functionNameBase> ::= <MPOINTFROMTEXT>  ;
<functionNameBase> ::= <MPOINTFROMWKB>  ;
<functionNameBase> ::= <MPOLYFROMTEXT>  ;
<functionNameBase> ::= <MPOLYFROMWKB>  ;
<functionNameBase> ::= <MULTILINESTRING>  ;
<functionNameBase> ::= <MULTILINESTRINGFROMTEXT>  ;
<functionNameBase> ::= <MULTILINESTRINGFROMWKB>  ;
<functionNameBase> ::= <MULTIPOINT>  ;
<functionNameBase> ::= <MULTIPOINTFROMTEXT>  ;
<functionNameBase> ::= <MULTIPOINTFROMWKB>  ;
<functionNameBase> ::= <MULTIPOLYGON>  ;
<functionNameBase> ::= <MULTIPOLYGONFROMTEXT>  ;
<functionNameBase> ::= <MULTIPOLYGONFROMWKB>  ;
<functionNameBase> ::= <NAME_CONST>  ;
<functionNameBase> ::= <NULLIF>  ;
<functionNameBase> ::= <NUMGEOMETRIES>  ;
<functionNameBase> ::= <NUMINTERIORRINGS>  ;
<functionNameBase> ::= <NUMPOINTS>  ;
<functionNameBase> ::= <OCT>  ;
<functionNameBase> ::= <OCTET_LENGTH>  ;
<functionNameBase> ::= <ORD>  ;
<functionNameBase> ::= <OVERLAPS>  ;
<functionNameBase> ::= <PERIOD_ADD>  ;
<functionNameBase> ::= <PERIOD_DIFF>  ;
<functionNameBase> ::= <PI>  ;
<functionNameBase> ::= <POINT>  ;
<functionNameBase> ::= <POINTFROMTEXT>  ;
<functionNameBase> ::= <POINTFROMWKB>  ;
<functionNameBase> ::= <POINTN>  ;
<functionNameBase> ::= <POLYFROMTEXT>  ;
<functionNameBase> ::= <POLYFROMWKB>  ;
<functionNameBase> ::= <POLYGON>  ;
<functionNameBase> ::= <POLYGONFROMTEXT>  ;
<functionNameBase> ::= <POLYGONFROMWKB>  ;
<functionNameBase> ::= <POSITION>  ;
<functionNameBase> ::= <POW>  ;
<functionNameBase> ::= <POWER>  ;
<functionNameBase> ::= <QUARTER>  ;
<functionNameBase> ::= <QUOTE>  ;
<functionNameBase> ::= <RADIANS>  ;
<functionNameBase> ::= <RAND>  ;
<functionNameBase> ::= <RANDOM_BYTES>  ;
<functionNameBase> ::= <RELEASE_LOCK>  ;
<functionNameBase> ::= <REVERSE>  ;
<functionNameBase> ::= <RIGHT>  ;
<functionNameBase> ::= <ROUND>  ;
<functionNameBase> ::= <ROW_COUNT>  ;
<functionNameBase> ::= <RPAD>  ;
<functionNameBase> ::= <RTRIM>  ;
<functionNameBase> ::= <SECOND>  ;
<functionNameBase> ::= <SEC_TO_TIME>  ;
<functionNameBase> ::= <SESSION_USER>  ;
<functionNameBase> ::= <SESSION_VARIABLES_ADMIN>  ;
<functionNameBase> ::= <SHA>  ;
<functionNameBase> ::= <SHA1>  ;
<functionNameBase> ::= <SHA2>  ;
<functionNameBase> ::= <SIGN>  ;
<functionNameBase> ::= <SIN>  ;
<functionNameBase> ::= <SLEEP>  ;
<functionNameBase> ::= <SOUNDEX>  ;
<functionNameBase> ::= <SQL_THREAD_WAIT_AFTER_GTIDS>  ;
<functionNameBase> ::= <SQRT>  ;
<functionNameBase> ::= <SRID>  ;
<functionNameBase> ::= <STARTPOINT>  ;
<functionNameBase> ::= <STRCMP>  ;
<functionNameBase> ::= <STR_TO_DATE>  ;
<functionNameBase> ::= <ST_AREA>  ;
<functionNameBase> ::= <ST_ASBINARY>  ;
<functionNameBase> ::= <ST_ASTEXT>  ;
<functionNameBase> ::= <ST_ASWKB>  ;
<functionNameBase> ::= <ST_ASWKT>  ;
<functionNameBase> ::= <ST_BUFFER>  ;
<functionNameBase> ::= <ST_CENTROID>  ;
<functionNameBase> ::= <ST_CONTAINS>  ;
<functionNameBase> ::= <ST_CROSSES>  ;
<functionNameBase> ::= <ST_DIFFERENCE>  ;
<functionNameBase> ::= <ST_DIMENSION>  ;
<functionNameBase> ::= <ST_DISJOINT>  ;
<functionNameBase> ::= <ST_DISTANCE>  ;
<functionNameBase> ::= <ST_ENDPOINT>  ;
<functionNameBase> ::= <ST_ENVELOPE>  ;
<functionNameBase> ::= <ST_EQUALS>  ;
<functionNameBase> ::= <ST_EXTERIORRING>  ;
<functionNameBase> ::= <ST_GEOMCOLLFROMTEXT>  ;
<functionNameBase> ::= <ST_GEOMCOLLFROMTXT>  ;
<functionNameBase> ::= <ST_GEOMCOLLFROMWKB>  ;
<functionNameBase> ::= <ST_GEOMETRYCOLLECTIONFROMTEXT>  ;
<functionNameBase> ::= <ST_GEOMETRYCOLLECTIONFROMWKB>  ;
<functionNameBase> ::= <ST_GEOMETRYFROMTEXT>  ;
<functionNameBase> ::= <ST_GEOMETRYFROMWKB>  ;
<functionNameBase> ::= <ST_GEOMETRYN>  ;
<functionNameBase> ::= <ST_GEOMETRYTYPE>  ;
<functionNameBase> ::= <ST_GEOMFROMTEXT>  ;
<functionNameBase> ::= <ST_GEOMFROMWKB>  ;
<functionNameBase> ::= <ST_INTERIORRINGN>  ;
<functionNameBase> ::= <ST_INTERSECTION>  ;
<functionNameBase> ::= <ST_INTERSECTS>  ;
<functionNameBase> ::= <ST_ISCLOSED>  ;
<functionNameBase> ::= <ST_ISEMPTY>  ;
<functionNameBase> ::= <ST_ISSIMPLE>  ;
<functionNameBase> ::= <ST_LINEFROMTEXT>  ;
<functionNameBase> ::= <ST_LINEFROMWKB>  ;
<functionNameBase> ::= <ST_LINESTRINGFROMTEXT>  ;
<functionNameBase> ::= <ST_LINESTRINGFROMWKB>  ;
<functionNameBase> ::= <ST_NUMGEOMETRIES>  ;
<functionNameBase> ::= <ST_NUMINTERIORRING>  ;
<functionNameBase> ::= <ST_NUMINTERIORRINGS>  ;
<functionNameBase> ::= <ST_NUMPOINTS>  ;
<functionNameBase> ::= <ST_OVERLAPS>  ;
<functionNameBase> ::= <ST_POINTFROMTEXT>  ;
<functionNameBase> ::= <ST_POINTFROMWKB>  ;
<functionNameBase> ::= <ST_POINTN>  ;
<functionNameBase> ::= <ST_POLYFROMTEXT>  ;
<functionNameBase> ::= <ST_POLYFROMWKB>  ;
<functionNameBase> ::= <ST_POLYGONFROMTEXT>  ;
<functionNameBase> ::= <ST_POLYGONFROMWKB>  ;
<functionNameBase> ::= <ST_SRID>  ;
<functionNameBase> ::= <ST_STARTPOINT>  ;
<functionNameBase> ::= <ST_SYMDIFFERENCE>  ;
<functionNameBase> ::= <ST_TOUCHES>  ;
<functionNameBase> ::= <ST_UNION>  ;
<functionNameBase> ::= <ST_WITHIN>  ;
<functionNameBase> ::= <ST_X>  ;
<functionNameBase> ::= <ST_Y>  ;
<functionNameBase> ::= <SUBDATE>  ;
<functionNameBase> ::= <SUBSTRING_INDEX>  ;
<functionNameBase> ::= <SUBTIME>  ;
<functionNameBase> ::= <SYSTEM_USER>  ;
<functionNameBase> ::= <TAN>  ;
<functionNameBase> ::= <TIME>  ;
<functionNameBase> ::= <TIMEDIFF>  ;
<functionNameBase> ::= <TIMESTAMP>  ;
<functionNameBase> ::= <TIMESTAMPADD>  ;
<functionNameBase> ::= <TIMESTAMPDIFF>  ;
<functionNameBase> ::= <TIME_FORMAT>  ;
<functionNameBase> ::= <TIME_TO_SEC>  ;
<functionNameBase> ::= <TOUCHES>  ;
<functionNameBase> ::= <TO_BASE64>  ;
<functionNameBase> ::= <TO_DAYS>  ;
<functionNameBase> ::= <TO_SECONDS>  ;
<functionNameBase> ::= <UCASE>  ;
<functionNameBase> ::= <UNCOMPRESS>  ;
<functionNameBase> ::= <UNCOMPRESSED_LENGTH>  ;
<functionNameBase> ::= <UNHEX>  ;
<functionNameBase> ::= <UNIX_TIMESTAMP>  ;
<functionNameBase> ::= <UPDATEXML>  ;
<functionNameBase> ::= <UPPER>  ;
<functionNameBase> ::= <UUID>  ;
<functionNameBase> ::= <UUID_SHORT>  ;
<functionNameBase> ::= <VALIDATE_PASSWORD_STRENGTH>  ;
<functionNameBase> ::= <VERSION>  ;
<functionNameBase> ::= <VISIBLE>  ;
<functionNameBase> ::= <WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS>  ;
<functionNameBase> ::= <WEEK>  ;
<functionNameBase> ::= <WEEKDAY>  ;
<functionNameBase> ::= <WEEKOFYEAR>  ;
<functionNameBase> ::= <WEIGHT_STRING>  ;
<functionNameBase> ::= <WITHIN>  ;
<functionNameBase> ::= <YEAR>  ;
<functionNameBase> ::= <YEARWEEK>  ;
<functionNameBase> ::= <Y_FUNCTION>  ;
<functionNameBase> ::= <X_FUNCTION>  ;
# Grammar LEXER= lexer
# Grammar PARSER= None
# Grammar GRAMMAR= grammar
# Grammar name:  ('token', 'MySqlLexer')
# LEXER: SPACE
# BEGIN LEXER FOR  SPACE +
<SPACE> ::= <SPACE_-_1> ' ' ;
<SPACE_-_1> ::= <SPACE_-_2> ' ' ;
<SPACE_-_1> ::= <SPACE_-_2> <SPACE_-_1> ' ' ;
# BEGIN LEXER FOR  SPACE char_set
<SPACE_-_2> ::= ' ' ;
<SPACE_-_2> ::=  9 ;
<SPACE_-_2> ::=  13 ;
<SPACE_-_2> ::=  10 ;
# END
# END
# LEXER: SPEC_MYSQL_COMMENT
# BEGIN LEXER FOR  SPEC_MYSQL_COMMENT and
# BEGIN LEXER FOR  SPEC_MYSQL_COMMENT ?
<SPEC_MYSQL_COMMENT_-_1> ::= ;
# BEGIN LEXER FOR  SPEC_MYSQL_COMMENT .
<SPEC_MYSQL_COMMENT_-_1> ::= ' '  ;
<SPEC_MYSQL_COMMENT_-_1> ::= '!'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= '"'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= '#'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= '$'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= '%'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= '&'  ;
<SPEC_MYSQL_COMMENT_-_1> ::=  39   ;
<SPEC_MYSQL_COMMENT_-_1> ::= '('  ;
<SPEC_MYSQL_COMMENT_-_1> ::= ')'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= '*'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= '+'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= ','  ;
<SPEC_MYSQL_COMMENT_-_1> ::= '-'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= '.'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= '/'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= '0'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= '1'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= '2'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= '3'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= '4'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= '5'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= '6'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= '7'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= '8'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= '9'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= ':'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= ';'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= '<'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= '='  ;
<SPEC_MYSQL_COMMENT_-_1> ::= '>'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= '?'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= '@'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'A'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'B'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'C'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'D'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'E'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'F'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'G'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'H'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'I'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'J'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'K'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'L'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'M'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'N'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'O'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'P'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'Q'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'R'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'S'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'T'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'U'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'V'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'W'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'X'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'Y'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'Z'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= '['  ;
<SPEC_MYSQL_COMMENT_-_1> ::= '\'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= ']'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= '^'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= '_'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= '`'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'a'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'b'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'c'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'd'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'e'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'f'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'g'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'h'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'i'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'j'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'k'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'l'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'm'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'n'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'o'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'p'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'q'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'r'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 's'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 't'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'u'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'v'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'w'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'x'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'y'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= 'z'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= '{'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= '|'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= '}'  ;
<SPEC_MYSQL_COMMENT_-_1> ::= '~'  ;
# END
# END
<SPEC_MYSQL_COMMENT> ::= '/*!' <SPEC_MYSQL_COMMENT_-_1> '*/' ' ' ;
# END
# LEXER: COMMENT_INPUT
# BEGIN LEXER FOR  COMMENT_INPUT and
# BEGIN LEXER FOR  COMMENT_INPUT ?
<COMMENT_INPUT_-_1> ::= ;
# BEGIN LEXER FOR  COMMENT_INPUT .
<COMMENT_INPUT_-_1> ::= ' '  ;
<COMMENT_INPUT_-_1> ::= '!'  ;
<COMMENT_INPUT_-_1> ::= '"'  ;
<COMMENT_INPUT_-_1> ::= '#'  ;
<COMMENT_INPUT_-_1> ::= '$'  ;
<COMMENT_INPUT_-_1> ::= '%'  ;
<COMMENT_INPUT_-_1> ::= '&'  ;
<COMMENT_INPUT_-_1> ::=  39   ;
<COMMENT_INPUT_-_1> ::= '('  ;
<COMMENT_INPUT_-_1> ::= ')'  ;
<COMMENT_INPUT_-_1> ::= '*'  ;
<COMMENT_INPUT_-_1> ::= '+'  ;
<COMMENT_INPUT_-_1> ::= ','  ;
<COMMENT_INPUT_-_1> ::= '-'  ;
<COMMENT_INPUT_-_1> ::= '.'  ;
<COMMENT_INPUT_-_1> ::= '/'  ;
<COMMENT_INPUT_-_1> ::= '0'  ;
<COMMENT_INPUT_-_1> ::= '1'  ;
<COMMENT_INPUT_-_1> ::= '2'  ;
<COMMENT_INPUT_-_1> ::= '3'  ;
<COMMENT_INPUT_-_1> ::= '4'  ;
<COMMENT_INPUT_-_1> ::= '5'  ;
<COMMENT_INPUT_-_1> ::= '6'  ;
<COMMENT_INPUT_-_1> ::= '7'  ;
<COMMENT_INPUT_-_1> ::= '8'  ;
<COMMENT_INPUT_-_1> ::= '9'  ;
<COMMENT_INPUT_-_1> ::= ':'  ;
<COMMENT_INPUT_-_1> ::= ';'  ;
<COMMENT_INPUT_-_1> ::= '<'  ;
<COMMENT_INPUT_-_1> ::= '='  ;
<COMMENT_INPUT_-_1> ::= '>'  ;
<COMMENT_INPUT_-_1> ::= '?'  ;
<COMMENT_INPUT_-_1> ::= '@'  ;
<COMMENT_INPUT_-_1> ::= 'A'  ;
<COMMENT_INPUT_-_1> ::= 'B'  ;
<COMMENT_INPUT_-_1> ::= 'C'  ;
<COMMENT_INPUT_-_1> ::= 'D'  ;
<COMMENT_INPUT_-_1> ::= 'E'  ;
<COMMENT_INPUT_-_1> ::= 'F'  ;
<COMMENT_INPUT_-_1> ::= 'G'  ;
<COMMENT_INPUT_-_1> ::= 'H'  ;
<COMMENT_INPUT_-_1> ::= 'I'  ;
<COMMENT_INPUT_-_1> ::= 'J'  ;
<COMMENT_INPUT_-_1> ::= 'K'  ;
<COMMENT_INPUT_-_1> ::= 'L'  ;
<COMMENT_INPUT_-_1> ::= 'M'  ;
<COMMENT_INPUT_-_1> ::= 'N'  ;
<COMMENT_INPUT_-_1> ::= 'O'  ;
<COMMENT_INPUT_-_1> ::= 'P'  ;
<COMMENT_INPUT_-_1> ::= 'Q'  ;
<COMMENT_INPUT_-_1> ::= 'R'  ;
<COMMENT_INPUT_-_1> ::= 'S'  ;
<COMMENT_INPUT_-_1> ::= 'T'  ;
<COMMENT_INPUT_-_1> ::= 'U'  ;
<COMMENT_INPUT_-_1> ::= 'V'  ;
<COMMENT_INPUT_-_1> ::= 'W'  ;
<COMMENT_INPUT_-_1> ::= 'X'  ;
<COMMENT_INPUT_-_1> ::= 'Y'  ;
<COMMENT_INPUT_-_1> ::= 'Z'  ;
<COMMENT_INPUT_-_1> ::= '['  ;
<COMMENT_INPUT_-_1> ::= '\'  ;
<COMMENT_INPUT_-_1> ::= ']'  ;
<COMMENT_INPUT_-_1> ::= '^'  ;
<COMMENT_INPUT_-_1> ::= '_'  ;
<COMMENT_INPUT_-_1> ::= '`'  ;
<COMMENT_INPUT_-_1> ::= 'a'  ;
<COMMENT_INPUT_-_1> ::= 'b'  ;
<COMMENT_INPUT_-_1> ::= 'c'  ;
<COMMENT_INPUT_-_1> ::= 'd'  ;
<COMMENT_INPUT_-_1> ::= 'e'  ;
<COMMENT_INPUT_-_1> ::= 'f'  ;
<COMMENT_INPUT_-_1> ::= 'g'  ;
<COMMENT_INPUT_-_1> ::= 'h'  ;
<COMMENT_INPUT_-_1> ::= 'i'  ;
<COMMENT_INPUT_-_1> ::= 'j'  ;
<COMMENT_INPUT_-_1> ::= 'k'  ;
<COMMENT_INPUT_-_1> ::= 'l'  ;
<COMMENT_INPUT_-_1> ::= 'm'  ;
<COMMENT_INPUT_-_1> ::= 'n'  ;
<COMMENT_INPUT_-_1> ::= 'o'  ;
<COMMENT_INPUT_-_1> ::= 'p'  ;
<COMMENT_INPUT_-_1> ::= 'q'  ;
<COMMENT_INPUT_-_1> ::= 'r'  ;
<COMMENT_INPUT_-_1> ::= 's'  ;
<COMMENT_INPUT_-_1> ::= 't'  ;
<COMMENT_INPUT_-_1> ::= 'u'  ;
<COMMENT_INPUT_-_1> ::= 'v'  ;
<COMMENT_INPUT_-_1> ::= 'w'  ;
<COMMENT_INPUT_-_1> ::= 'x'  ;
<COMMENT_INPUT_-_1> ::= 'y'  ;
<COMMENT_INPUT_-_1> ::= 'z'  ;
<COMMENT_INPUT_-_1> ::= '{'  ;
<COMMENT_INPUT_-_1> ::= '|'  ;
<COMMENT_INPUT_-_1> ::= '}'  ;
<COMMENT_INPUT_-_1> ::= '~'  ;
# END
# END
<COMMENT_INPUT> ::= '/*' <COMMENT_INPUT_-_1> '*/' ' ' ;
# END
# LEXER: LINE_COMMENT
# BEGIN LEXER FOR  LINE_COMMENT or
# BEGIN LEXER FOR  LINE_COMMENT and
# BEGIN LEXER FOR  LINE_COMMENT or
# BEGIN LEXER FOR  LINE_COMMENT string
<LINE_COMMENT_-_1> ::= '-- ' ;
# END
# BEGIN LEXER FOR  LINE_COMMENT string
<LINE_COMMENT_-_1> ::= '#' ;
# END
# END
# BEGIN LEXER FOR  LINE_COMMENT *
<LINE_COMMENT_-_2> ::= <LINE_COMMENT_-_3> ;
<LINE_COMMENT_-_3> ::= ;
# BEGIN LEXER FOR  LINE_COMMENT and
# BEGIN LEXER FOR  LINE_COMMENT not
<LINE_COMMENT_-_4> ::= ' '  ;
<LINE_COMMENT_-_4> ::= '!'  ;
<LINE_COMMENT_-_4> ::= '"'  ;
<LINE_COMMENT_-_4> ::= '#'  ;
<LINE_COMMENT_-_4> ::= '$'  ;
<LINE_COMMENT_-_4> ::= '%'  ;
<LINE_COMMENT_-_4> ::= '&'  ;
<LINE_COMMENT_-_4> ::=  39   ;
<LINE_COMMENT_-_4> ::= '('  ;
<LINE_COMMENT_-_4> ::= ')'  ;
<LINE_COMMENT_-_4> ::= '*'  ;
<LINE_COMMENT_-_4> ::= '+'  ;
<LINE_COMMENT_-_4> ::= ','  ;
<LINE_COMMENT_-_4> ::= '-'  ;
<LINE_COMMENT_-_4> ::= '.'  ;
<LINE_COMMENT_-_4> ::= '/'  ;
<LINE_COMMENT_-_4> ::= '0'  ;
<LINE_COMMENT_-_4> ::= '1'  ;
<LINE_COMMENT_-_4> ::= '2'  ;
<LINE_COMMENT_-_4> ::= '3'  ;
<LINE_COMMENT_-_4> ::= '4'  ;
<LINE_COMMENT_-_4> ::= '5'  ;
<LINE_COMMENT_-_4> ::= '6'  ;
<LINE_COMMENT_-_4> ::= '7'  ;
<LINE_COMMENT_-_4> ::= '8'  ;
<LINE_COMMENT_-_4> ::= '9'  ;
<LINE_COMMENT_-_4> ::= ':'  ;
<LINE_COMMENT_-_4> ::= ';'  ;
<LINE_COMMENT_-_4> ::= '<'  ;
<LINE_COMMENT_-_4> ::= '='  ;
<LINE_COMMENT_-_4> ::= '>'  ;
<LINE_COMMENT_-_4> ::= '?'  ;
<LINE_COMMENT_-_4> ::= '@'  ;
<LINE_COMMENT_-_4> ::= 'A'  ;
<LINE_COMMENT_-_4> ::= 'B'  ;
<LINE_COMMENT_-_4> ::= 'C'  ;
<LINE_COMMENT_-_4> ::= 'D'  ;
<LINE_COMMENT_-_4> ::= 'E'  ;
<LINE_COMMENT_-_4> ::= 'F'  ;
<LINE_COMMENT_-_4> ::= 'G'  ;
<LINE_COMMENT_-_4> ::= 'H'  ;
<LINE_COMMENT_-_4> ::= 'I'  ;
<LINE_COMMENT_-_4> ::= 'J'  ;
<LINE_COMMENT_-_4> ::= 'K'  ;
<LINE_COMMENT_-_4> ::= 'L'  ;
<LINE_COMMENT_-_4> ::= 'M'  ;
<LINE_COMMENT_-_4> ::= 'N'  ;
<LINE_COMMENT_-_4> ::= 'O'  ;
<LINE_COMMENT_-_4> ::= 'P'  ;
<LINE_COMMENT_-_4> ::= 'Q'  ;
<LINE_COMMENT_-_4> ::= 'R'  ;
<LINE_COMMENT_-_4> ::= 'S'  ;
<LINE_COMMENT_-_4> ::= 'T'  ;
<LINE_COMMENT_-_4> ::= 'U'  ;
<LINE_COMMENT_-_4> ::= 'V'  ;
<LINE_COMMENT_-_4> ::= 'W'  ;
<LINE_COMMENT_-_4> ::= 'X'  ;
<LINE_COMMENT_-_4> ::= 'Y'  ;
<LINE_COMMENT_-_4> ::= 'Z'  ;
<LINE_COMMENT_-_4> ::= '['  ;
<LINE_COMMENT_-_4> ::= '\'  ;
<LINE_COMMENT_-_4> ::= ']'  ;
<LINE_COMMENT_-_4> ::= '^'  ;
<LINE_COMMENT_-_4> ::= '_'  ;
<LINE_COMMENT_-_4> ::= '`'  ;
<LINE_COMMENT_-_4> ::= 'a'  ;
<LINE_COMMENT_-_4> ::= 'b'  ;
<LINE_COMMENT_-_4> ::= 'c'  ;
<LINE_COMMENT_-_4> ::= 'd'  ;
<LINE_COMMENT_-_4> ::= 'e'  ;
<LINE_COMMENT_-_4> ::= 'f'  ;
<LINE_COMMENT_-_4> ::= 'g'  ;
<LINE_COMMENT_-_4> ::= 'h'  ;
<LINE_COMMENT_-_4> ::= 'i'  ;
<LINE_COMMENT_-_4> ::= 'j'  ;
<LINE_COMMENT_-_4> ::= 'k'  ;
<LINE_COMMENT_-_4> ::= 'l'  ;
<LINE_COMMENT_-_4> ::= 'm'  ;
<LINE_COMMENT_-_4> ::= 'o'  ;
<LINE_COMMENT_-_4> ::= 'p'  ;
<LINE_COMMENT_-_4> ::= 'q'  ;
<LINE_COMMENT_-_4> ::= 's'  ;
<LINE_COMMENT_-_4> ::= 't'  ;
<LINE_COMMENT_-_4> ::= 'u'  ;
<LINE_COMMENT_-_4> ::= 'v'  ;
<LINE_COMMENT_-_4> ::= 'w'  ;
<LINE_COMMENT_-_4> ::= 'x'  ;
<LINE_COMMENT_-_4> ::= 'y'  ;
<LINE_COMMENT_-_4> ::= 'z'  ;
<LINE_COMMENT_-_4> ::= '{'  ;
<LINE_COMMENT_-_4> ::= '|'  ;
<LINE_COMMENT_-_4> ::= '}'  ;
<LINE_COMMENT_-_4> ::= '~'  ;
# END
<LINE_COMMENT_-_3> ::= <LINE_COMMENT_-_4> <LINE_COMMENT_-_3> ;
# END
# END
# BEGIN LEXER FOR  LINE_COMMENT or
# BEGIN LEXER FOR  LINE_COMMENT and
# BEGIN LEXER FOR  LINE_COMMENT ?
<LINE_COMMENT_-_6> ::= ;
# BEGIN LEXER FOR  LINE_COMMENT string
<LINE_COMMENT_-_6> ::=  13 ;
# END
# END
<LINE_COMMENT_-_5> ::= <LINE_COMMENT_-_6>  10 ;
# END
# BEGIN LEXER FOR  LINE_COMMENT token
<LINE_COMMENT_-_5> ::= <EOF> ;
# END
# END
<LINE_COMMENT> ::= <LINE_COMMENT_-_1> <LINE_COMMENT_-_2> <LINE_COMMENT_-_5> ' ' ;
# END
# BEGIN LEXER FOR  LINE_COMMENT and
# BEGIN LEXER FOR  LINE_COMMENT or
# BEGIN LEXER FOR  LINE_COMMENT and
# BEGIN LEXER FOR  LINE_COMMENT ?
<LINE_COMMENT_-_8> ::= ;
# BEGIN LEXER FOR  LINE_COMMENT string
<LINE_COMMENT_-_8> ::=  13 ;
# END
# END
<LINE_COMMENT_-_7> ::= <LINE_COMMENT_-_8>  10 ;
# END
# BEGIN LEXER FOR  LINE_COMMENT token
<LINE_COMMENT_-_7> ::= <EOF> ;
# END
# END
<LINE_COMMENT> ::= '--' <LINE_COMMENT_-_7> ' ' ;
# END
# END
# LEXER: ADD
# BEGIN LEXER FOR  ADD string
<ADD> ::= 'ADD' ' ' ;
# END
# LEXER: ALL
# BEGIN LEXER FOR  ALL string
<ALL> ::= 'ALL' ' ' ;
# END
# LEXER: ALTER
# BEGIN LEXER FOR  ALTER string
<ALTER> ::= 'ALTER' ' ' ;
# END
# LEXER: ALWAYS
# BEGIN LEXER FOR  ALWAYS string
<ALWAYS> ::= 'ALWAYS' ' ' ;
# END
# LEXER: ANALYZE
# BEGIN LEXER FOR  ANALYZE string
<ANALYZE> ::= 'ANALYZE' ' ' ;
# END
# LEXER: AND
# BEGIN LEXER FOR  AND string
<AND> ::= 'AND' ' ' ;
# END
# LEXER: AS
# BEGIN LEXER FOR  AS string
<AS> ::= 'AS' ' ' ;
# END
# LEXER: ASC
# BEGIN LEXER FOR  ASC string
<ASC> ::= 'ASC' ' ' ;
# END
# LEXER: BEFORE
# BEGIN LEXER FOR  BEFORE string
<BEFORE> ::= 'BEFORE' ' ' ;
# END
# LEXER: BETWEEN
# BEGIN LEXER FOR  BETWEEN string
<BETWEEN> ::= 'BETWEEN' ' ' ;
# END
# LEXER: BOTH
# BEGIN LEXER FOR  BOTH string
<BOTH> ::= 'BOTH' ' ' ;
# END
# LEXER: BY
# BEGIN LEXER FOR  BY string
<BY> ::= 'BY' ' ' ;
# END
# LEXER: CALL
# BEGIN LEXER FOR  CALL string
<CALL> ::= 'CALL' ' ' ;
# END
# LEXER: CASCADE
# BEGIN LEXER FOR  CASCADE string
<CASCADE> ::= 'CASCADE' ' ' ;
# END
# LEXER: CASE
# BEGIN LEXER FOR  CASE string
<CASE> ::= 'CASE' ' ' ;
# END
# LEXER: CAST
# BEGIN LEXER FOR  CAST string
<CAST> ::= 'CAST' ' ' ;
# END
# LEXER: CHANGE
# BEGIN LEXER FOR  CHANGE string
<CHANGE> ::= 'CHANGE' ' ' ;
# END
# LEXER: CHARACTER
# BEGIN LEXER FOR  CHARACTER string
<CHARACTER> ::= 'CHARACTER' ' ' ;
# END
# LEXER: CHECK
# BEGIN LEXER FOR  CHECK string
<CHECK> ::= 'CHECK' ' ' ;
# END
# LEXER: COLLATE
# BEGIN LEXER FOR  COLLATE string
<COLLATE> ::= 'COLLATE' ' ' ;
# END
# LEXER: COLUMN
# BEGIN LEXER FOR  COLUMN string
<COLUMN> ::= 'COLUMN' ' ' ;
# END
# LEXER: CONDITION
# BEGIN LEXER FOR  CONDITION string
<CONDITION> ::= 'CONDITION' ' ' ;
# END
# LEXER: CONSTRAINT
# BEGIN LEXER FOR  CONSTRAINT string
<CONSTRAINT> ::= 'CONSTRAINT' ' ' ;
# END
# LEXER: CONTINUE
# BEGIN LEXER FOR  CONTINUE string
<CONTINUE> ::= 'CONTINUE' ' ' ;
# END
# LEXER: CONVERT
# BEGIN LEXER FOR  CONVERT string
<CONVERT> ::= 'CONVERT' ' ' ;
# END
# LEXER: CREATE
# BEGIN LEXER FOR  CREATE string
<CREATE> ::= 'CREATE' ' ' ;
# END
# LEXER: CROSS
# BEGIN LEXER FOR  CROSS string
<CROSS> ::= 'CROSS' ' ' ;
# END
# LEXER: CURRENT
# BEGIN LEXER FOR  CURRENT string
<CURRENT> ::= 'CURRENT' ' ' ;
# END
# LEXER: CURRENT_USER
# BEGIN LEXER FOR  CURRENT_USER string
<CURRENT_USER> ::= 'CURRENT_USER' ' ' ;
# END
# LEXER: CURSOR
# BEGIN LEXER FOR  CURSOR string
<CURSOR> ::= 'CURSOR' ' ' ;
# END
# LEXER: DATABASE
# BEGIN LEXER FOR  DATABASE string
<DATABASE> ::= 'DATABASE' ' ' ;
# END
# LEXER: DATABASES
# BEGIN LEXER FOR  DATABASES string
<DATABASES> ::= 'DATABASES' ' ' ;
# END
# LEXER: DECLARE
# BEGIN LEXER FOR  DECLARE string
<DECLARE> ::= 'DECLARE' ' ' ;
# END
# LEXER: DEFAULT
# BEGIN LEXER FOR  DEFAULT string
<DEFAULT> ::= 'DEFAULT' ' ' ;
# END
# LEXER: DELAYED
# BEGIN LEXER FOR  DELAYED string
<DELAYED> ::= 'DELAYED' ' ' ;
# END
# LEXER: DELETE
# BEGIN LEXER FOR  DELETE string
<DELETE> ::= 'DELETE' ' ' ;
# END
# LEXER: DESC
# BEGIN LEXER FOR  DESC string
<DESC> ::= 'DESC' ' ' ;
# END
# LEXER: DESCRIBE
# BEGIN LEXER FOR  DESCRIBE string
<DESCRIBE> ::= 'DESCRIBE' ' ' ;
# END
# LEXER: DETERMINISTIC
# BEGIN LEXER FOR  DETERMINISTIC string
<DETERMINISTIC> ::= 'DETERMINISTIC' ' ' ;
# END
# LEXER: DIAGNOSTICS
# BEGIN LEXER FOR  DIAGNOSTICS string
<DIAGNOSTICS> ::= 'DIAGNOSTICS' ' ' ;
# END
# LEXER: DISTINCT
# BEGIN LEXER FOR  DISTINCT string
<DISTINCT> ::= 'DISTINCT' ' ' ;
# END
# LEXER: DISTINCTROW
# BEGIN LEXER FOR  DISTINCTROW string
<DISTINCTROW> ::= 'DISTINCTROW' ' ' ;
# END
# LEXER: DROP
# BEGIN LEXER FOR  DROP string
<DROP> ::= 'DROP' ' ' ;
# END
# LEXER: EACH
# BEGIN LEXER FOR  EACH string
<EACH> ::= 'EACH' ' ' ;
# END
# LEXER: ELSE
# BEGIN LEXER FOR  ELSE string
<ELSE> ::= 'ELSE' ' ' ;
# END
# LEXER: ELSEIF
# BEGIN LEXER FOR  ELSEIF string
<ELSEIF> ::= 'ELSEIF' ' ' ;
# END
# LEXER: ENCLOSED
# BEGIN LEXER FOR  ENCLOSED string
<ENCLOSED> ::= 'ENCLOSED' ' ' ;
# END
# LEXER: ESCAPED
# BEGIN LEXER FOR  ESCAPED string
<ESCAPED> ::= 'ESCAPED' ' ' ;
# END
# LEXER: EXISTS
# BEGIN LEXER FOR  EXISTS string
<EXISTS> ::= 'EXISTS' ' ' ;
# END
# LEXER: EXIT
# BEGIN LEXER FOR  EXIT string
<EXIT> ::= 'EXIT' ' ' ;
# END
# LEXER: EXPLAIN
# BEGIN LEXER FOR  EXPLAIN string
<EXPLAIN> ::= 'EXPLAIN' ' ' ;
# END
# LEXER: FALSE
# BEGIN LEXER FOR  FALSE string
<FALSE> ::= 'FALSE' ' ' ;
# END
# LEXER: FETCH
# BEGIN LEXER FOR  FETCH string
<FETCH> ::= 'FETCH' ' ' ;
# END
# LEXER: FOR
# BEGIN LEXER FOR  FOR string
<FOR> ::= 'FOR' ' ' ;
# END
# LEXER: FORCE
# BEGIN LEXER FOR  FORCE string
<FORCE> ::= 'FORCE' ' ' ;
# END
# LEXER: FOREIGN
# BEGIN LEXER FOR  FOREIGN string
<FOREIGN> ::= 'FOREIGN' ' ' ;
# END
# LEXER: FROM
# BEGIN LEXER FOR  FROM string
<FROM> ::= 'FROM' ' ' ;
# END
# LEXER: FULLTEXT
# BEGIN LEXER FOR  FULLTEXT string
<FULLTEXT> ::= 'FULLTEXT' ' ' ;
# END
# LEXER: GENERATED
# BEGIN LEXER FOR  GENERATED string
<GENERATED> ::= 'GENERATED' ' ' ;
# END
# LEXER: GET
# BEGIN LEXER FOR  GET string
<GET> ::= 'GET' ' ' ;
# END
# LEXER: GRANT
# BEGIN LEXER FOR  GRANT string
<GRANT> ::= 'GRANT' ' ' ;
# END
# LEXER: GROUP
# BEGIN LEXER FOR  GROUP string
<GROUP> ::= 'GROUP' ' ' ;
# END
# LEXER: HAVING
# BEGIN LEXER FOR  HAVING string
<HAVING> ::= 'HAVING' ' ' ;
# END
# LEXER: HIGH_PRIORITY
# BEGIN LEXER FOR  HIGH_PRIORITY string
<HIGH_PRIORITY> ::= 'HIGH_PRIORITY' ' ' ;
# END
# LEXER: IF
# BEGIN LEXER FOR  IF string
<IF> ::= 'IF' ' ' ;
# END
# LEXER: IGNORE
# BEGIN LEXER FOR  IGNORE string
<IGNORE> ::= 'IGNORE' ' ' ;
# END
# LEXER: IN
# BEGIN LEXER FOR  IN string
<IN> ::= 'IN' ' ' ;
# END
# LEXER: INDEX
# BEGIN LEXER FOR  INDEX string
<INDEX> ::= 'INDEX' ' ' ;
# END
# LEXER: INFILE
# BEGIN LEXER FOR  INFILE string
<INFILE> ::= 'INFILE' ' ' ;
# END
# LEXER: INNER
# BEGIN LEXER FOR  INNER string
<INNER> ::= 'INNER' ' ' ;
# END
# LEXER: INOUT
# BEGIN LEXER FOR  INOUT string
<INOUT> ::= 'INOUT' ' ' ;
# END
# LEXER: INSERT
# BEGIN LEXER FOR  INSERT string
<INSERT> ::= 'INSERT' ' ' ;
# END
# LEXER: INTERVAL
# BEGIN LEXER FOR  INTERVAL string
<INTERVAL> ::= 'INTERVAL' ' ' ;
# END
# LEXER: INTO
# BEGIN LEXER FOR  INTO string
<INTO> ::= 'INTO' ' ' ;
# END
# LEXER: IS
# BEGIN LEXER FOR  IS string
<IS> ::= 'IS' ' ' ;
# END
# LEXER: ITERATE
# BEGIN LEXER FOR  ITERATE string
<ITERATE> ::= 'ITERATE' ' ' ;
# END
# LEXER: JOIN
# BEGIN LEXER FOR  JOIN string
<JOIN> ::= 'JOIN' ' ' ;
# END
# LEXER: KEY
# BEGIN LEXER FOR  KEY string
<KEY> ::= 'KEY' ' ' ;
# END
# LEXER: KEYS
# BEGIN LEXER FOR  KEYS string
<KEYS> ::= 'KEYS' ' ' ;
# END
# LEXER: KILL
# BEGIN LEXER FOR  KILL string
<KILL> ::= 'KILL' ' ' ;
# END
# LEXER: LEADING
# BEGIN LEXER FOR  LEADING string
<LEADING> ::= 'LEADING' ' ' ;
# END
# LEXER: LEAVE
# BEGIN LEXER FOR  LEAVE string
<LEAVE> ::= 'LEAVE' ' ' ;
# END
# LEXER: LEFT
# BEGIN LEXER FOR  LEFT string
<LEFT> ::= 'LEFT' ' ' ;
# END
# LEXER: LIKE
# BEGIN LEXER FOR  LIKE string
<LIKE> ::= 'LIKE' ' ' ;
# END
# LEXER: LIMIT
# BEGIN LEXER FOR  LIMIT string
<LIMIT> ::= 'LIMIT' ' ' ;
# END
# LEXER: LINEAR
# BEGIN LEXER FOR  LINEAR string
<LINEAR> ::= 'LINEAR' ' ' ;
# END
# LEXER: LINES
# BEGIN LEXER FOR  LINES string
<LINES> ::= 'LINES' ' ' ;
# END
# LEXER: LOAD
# BEGIN LEXER FOR  LOAD string
<LOAD> ::= 'LOAD' ' ' ;
# END
# LEXER: LOCK
# BEGIN LEXER FOR  LOCK string
<LOCK> ::= 'LOCK' ' ' ;
# END
# LEXER: LOOP
# BEGIN LEXER FOR  LOOP string
<LOOP> ::= 'LOOP' ' ' ;
# END
# LEXER: LOW_PRIORITY
# BEGIN LEXER FOR  LOW_PRIORITY string
<LOW_PRIORITY> ::= 'LOW_PRIORITY' ' ' ;
# END
# LEXER: MASTER_BIND
# BEGIN LEXER FOR  MASTER_BIND string
<MASTER_BIND> ::= 'MASTER_BIND' ' ' ;
# END
# LEXER: MASTER_SSL_VERIFY_SERVER_CERT
# BEGIN LEXER FOR  MASTER_SSL_VERIFY_SERVER_CERT string
<MASTER_SSL_VERIFY_SERVER_CERT> ::= 'MASTER_SSL_VERIFY_SERVER_CERT' ' ' ;
# END
# LEXER: MATCH
# BEGIN LEXER FOR  MATCH string
<MATCH> ::= 'MATCH' ' ' ;
# END
# LEXER: MAXVALUE
# BEGIN LEXER FOR  MAXVALUE string
<MAXVALUE> ::= 'MAXVALUE' ' ' ;
# END
# LEXER: MODIFIES
# BEGIN LEXER FOR  MODIFIES string
<MODIFIES> ::= 'MODIFIES' ' ' ;
# END
# LEXER: NATURAL
# BEGIN LEXER FOR  NATURAL string
<NATURAL> ::= 'NATURAL' ' ' ;
# END
# LEXER: NOT
# BEGIN LEXER FOR  NOT string
<NOT> ::= 'NOT' ' ' ;
# END
# LEXER: NO_WRITE_TO_BINLOG
# BEGIN LEXER FOR  NO_WRITE_TO_BINLOG string
<NO_WRITE_TO_BINLOG> ::= 'NO_WRITE_TO_BINLOG' ' ' ;
# END
# LEXER: NULL_LITERAL
# BEGIN LEXER FOR  NULL_LITERAL string
<NULL_LITERAL> ::= 'NULL' ' ' ;
# END
# LEXER: NUMBER
# BEGIN LEXER FOR  NUMBER string
<NUMBER> ::= 'NUMBER' ' ' ;
# END
# LEXER: ON
# BEGIN LEXER FOR  ON string
<ON> ::= 'ON' ' ' ;
# END
# LEXER: OPTIMIZE
# BEGIN LEXER FOR  OPTIMIZE string
<OPTIMIZE> ::= 'OPTIMIZE' ' ' ;
# END
# LEXER: OPTION
# BEGIN LEXER FOR  OPTION string
<OPTION> ::= 'OPTION' ' ' ;
# END
# LEXER: OPTIONALLY
# BEGIN LEXER FOR  OPTIONALLY string
<OPTIONALLY> ::= 'OPTIONALLY' ' ' ;
# END
# LEXER: OR
# BEGIN LEXER FOR  OR string
<OR> ::= 'OR' ' ' ;
# END
# LEXER: ORDER
# BEGIN LEXER FOR  ORDER string
<ORDER> ::= 'ORDER' ' ' ;
# END
# LEXER: OUT
# BEGIN LEXER FOR  OUT string
<OUT> ::= 'OUT' ' ' ;
# END
# LEXER: OUTER
# BEGIN LEXER FOR  OUTER string
<OUTER> ::= 'OUTER' ' ' ;
# END
# LEXER: OUTFILE
# BEGIN LEXER FOR  OUTFILE string
<OUTFILE> ::= 'OUTFILE' ' ' ;
# END
# LEXER: PARTITION
# BEGIN LEXER FOR  PARTITION string
<PARTITION> ::= 'PARTITION' ' ' ;
# END
# LEXER: PRIMARY
# BEGIN LEXER FOR  PRIMARY string
<PRIMARY> ::= 'PRIMARY' ' ' ;
# END
# LEXER: PROCEDURE
# BEGIN LEXER FOR  PROCEDURE string
<PROCEDURE> ::= 'PROCEDURE' ' ' ;
# END
# LEXER: PURGE
# BEGIN LEXER FOR  PURGE string
<PURGE> ::= 'PURGE' ' ' ;
# END
# LEXER: RANGE
# BEGIN LEXER FOR  RANGE string
<RANGE> ::= 'RANGE' ' ' ;
# END
# LEXER: READ
# BEGIN LEXER FOR  READ string
<READ> ::= 'READ' ' ' ;
# END
# LEXER: READS
# BEGIN LEXER FOR  READS string
<READS> ::= 'READS' ' ' ;
# END
# LEXER: REFERENCES
# BEGIN LEXER FOR  REFERENCES string
<REFERENCES> ::= 'REFERENCES' ' ' ;
# END
# LEXER: REGEXP
# BEGIN LEXER FOR  REGEXP string
<REGEXP> ::= 'REGEXP' ' ' ;
# END
# LEXER: RELEASE
# BEGIN LEXER FOR  RELEASE string
<RELEASE> ::= 'RELEASE' ' ' ;
# END
# LEXER: RENAME
# BEGIN LEXER FOR  RENAME string
<RENAME> ::= 'RENAME' ' ' ;
# END
# LEXER: REPEAT
# BEGIN LEXER FOR  REPEAT string
<REPEAT> ::= 'REPEAT' ' ' ;
# END
# LEXER: REPLACE
# BEGIN LEXER FOR  REPLACE string
<REPLACE> ::= 'REPLACE' ' ' ;
# END
# LEXER: REQUIRE
# BEGIN LEXER FOR  REQUIRE string
<REQUIRE> ::= 'REQUIRE' ' ' ;
# END
# LEXER: RESIGNAL
# BEGIN LEXER FOR  RESIGNAL string
<RESIGNAL> ::= 'RESIGNAL' ' ' ;
# END
# LEXER: RESTRICT
# BEGIN LEXER FOR  RESTRICT string
<RESTRICT> ::= 'RESTRICT' ' ' ;
# END
# LEXER: RETURN
# BEGIN LEXER FOR  RETURN string
<RETURN> ::= 'RETURN' ' ' ;
# END
# LEXER: REVOKE
# BEGIN LEXER FOR  REVOKE string
<REVOKE> ::= 'REVOKE' ' ' ;
# END
# LEXER: RIGHT
# BEGIN LEXER FOR  RIGHT string
<RIGHT> ::= 'RIGHT' ' ' ;
# END
# LEXER: RLIKE
# BEGIN LEXER FOR  RLIKE string
<RLIKE> ::= 'RLIKE' ' ' ;
# END
# LEXER: SCHEMA
# BEGIN LEXER FOR  SCHEMA string
<SCHEMA> ::= 'SCHEMA' ' ' ;
# END
# LEXER: SCHEMAS
# BEGIN LEXER FOR  SCHEMAS string
<SCHEMAS> ::= 'SCHEMAS' ' ' ;
# END
# LEXER: SELECT
# BEGIN LEXER FOR  SELECT string
<SELECT> ::= 'SELECT' ' ' ;
# END
# LEXER: SET
# BEGIN LEXER FOR  SET string
<SET> ::= 'SET' ' ' ;
# END
# LEXER: SEPARATOR
# BEGIN LEXER FOR  SEPARATOR string
<SEPARATOR> ::= 'SEPARATOR' ' ' ;
# END
# LEXER: SHOW
# BEGIN LEXER FOR  SHOW string
<SHOW> ::= 'SHOW' ' ' ;
# END
# LEXER: SIGNAL
# BEGIN LEXER FOR  SIGNAL string
<SIGNAL> ::= 'SIGNAL' ' ' ;
# END
# LEXER: SPATIAL
# BEGIN LEXER FOR  SPATIAL string
<SPATIAL> ::= 'SPATIAL' ' ' ;
# END
# LEXER: SQL
# BEGIN LEXER FOR  SQL string
<SQL> ::= 'SQL' ' ' ;
# END
# LEXER: SQLEXCEPTION
# BEGIN LEXER FOR  SQLEXCEPTION string
<SQLEXCEPTION> ::= 'SQLEXCEPTION' ' ' ;
# END
# LEXER: SQLSTATE
# BEGIN LEXER FOR  SQLSTATE string
<SQLSTATE> ::= 'SQLSTATE' ' ' ;
# END
# LEXER: SQLWARNING
# BEGIN LEXER FOR  SQLWARNING string
<SQLWARNING> ::= 'SQLWARNING' ' ' ;
# END
# LEXER: SQL_BIG_RESULT
# BEGIN LEXER FOR  SQL_BIG_RESULT string
<SQL_BIG_RESULT> ::= 'SQL_BIG_RESULT' ' ' ;
# END
# LEXER: SQL_CALC_FOUND_ROWS
# BEGIN LEXER FOR  SQL_CALC_FOUND_ROWS string
<SQL_CALC_FOUND_ROWS> ::= 'SQL_CALC_FOUND_ROWS' ' ' ;
# END
# LEXER: SQL_SMALL_RESULT
# BEGIN LEXER FOR  SQL_SMALL_RESULT string
<SQL_SMALL_RESULT> ::= 'SQL_SMALL_RESULT' ' ' ;
# END
# LEXER: SSL
# BEGIN LEXER FOR  SSL string
<SSL> ::= 'SSL' ' ' ;
# END
# LEXER: STACKED
# BEGIN LEXER FOR  STACKED string
<STACKED> ::= 'STACKED' ' ' ;
# END
# LEXER: STARTING
# BEGIN LEXER FOR  STARTING string
<STARTING> ::= 'STARTING' ' ' ;
# END
# LEXER: STRAIGHT_JOIN
# BEGIN LEXER FOR  STRAIGHT_JOIN string
<STRAIGHT_JOIN> ::= 'STRAIGHT_JOIN' ' ' ;
# END
# LEXER: TABLE
# BEGIN LEXER FOR  TABLE string
<TABLE> ::= 'TABLE' ' ' ;
# END
# LEXER: TERMINATED
# BEGIN LEXER FOR  TERMINATED string
<TERMINATED> ::= 'TERMINATED' ' ' ;
# END
# LEXER: THEN
# BEGIN LEXER FOR  THEN string
<THEN> ::= 'THEN' ' ' ;
# END
# LEXER: TO
# BEGIN LEXER FOR  TO string
<TO> ::= 'TO' ' ' ;
# END
# LEXER: TRAILING
# BEGIN LEXER FOR  TRAILING string
<TRAILING> ::= 'TRAILING' ' ' ;
# END
# LEXER: TRIGGER
# BEGIN LEXER FOR  TRIGGER string
<TRIGGER> ::= 'TRIGGER' ' ' ;
# END
# LEXER: TRUE
# BEGIN LEXER FOR  TRUE string
<TRUE> ::= 'TRUE' ' ' ;
# END
# LEXER: UNDO
# BEGIN LEXER FOR  UNDO string
<UNDO> ::= 'UNDO' ' ' ;
# END
# LEXER: UNION
# BEGIN LEXER FOR  UNION string
<UNION> ::= 'UNION' ' ' ;
# END
# LEXER: UNIQUE
# BEGIN LEXER FOR  UNIQUE string
<UNIQUE> ::= 'UNIQUE' ' ' ;
# END
# LEXER: UNLOCK
# BEGIN LEXER FOR  UNLOCK string
<UNLOCK> ::= 'UNLOCK' ' ' ;
# END
# LEXER: UNSIGNED
# BEGIN LEXER FOR  UNSIGNED string
<UNSIGNED> ::= 'UNSIGNED' ' ' ;
# END
# LEXER: UPDATE
# BEGIN LEXER FOR  UPDATE string
<UPDATE> ::= 'UPDATE' ' ' ;
# END
# LEXER: USAGE
# BEGIN LEXER FOR  USAGE string
<USAGE> ::= 'USAGE' ' ' ;
# END
# LEXER: USE
# BEGIN LEXER FOR  USE string
<USE> ::= 'USE' ' ' ;
# END
# LEXER: USING
# BEGIN LEXER FOR  USING string
<USING> ::= 'USING' ' ' ;
# END
# LEXER: VALUES
# BEGIN LEXER FOR  VALUES string
<VALUES> ::= 'VALUES' ' ' ;
# END
# LEXER: WHEN
# BEGIN LEXER FOR  WHEN string
<WHEN> ::= 'WHEN' ' ' ;
# END
# LEXER: WHERE
# BEGIN LEXER FOR  WHERE string
<WHERE> ::= 'WHERE' ' ' ;
# END
# LEXER: WHILE
# BEGIN LEXER FOR  WHILE string
<WHILE> ::= 'WHILE' ' ' ;
# END
# LEXER: WITH
# BEGIN LEXER FOR  WITH string
<WITH> ::= 'WITH' ' ' ;
# END
# LEXER: WRITE
# BEGIN LEXER FOR  WRITE string
<WRITE> ::= 'WRITE' ' ' ;
# END
# LEXER: XOR
# BEGIN LEXER FOR  XOR string
<XOR> ::= 'XOR' ' ' ;
# END
# LEXER: ZEROFILL
# BEGIN LEXER FOR  ZEROFILL string
<ZEROFILL> ::= 'ZEROFILL' ' ' ;
# END
# LEXER: TINYINT
# BEGIN LEXER FOR  TINYINT string
<TINYINT> ::= 'TINYINT' ' ' ;
# END
# LEXER: SMALLINT
# BEGIN LEXER FOR  SMALLINT string
<SMALLINT> ::= 'SMALLINT' ' ' ;
# END
# LEXER: MEDIUMINT
# BEGIN LEXER FOR  MEDIUMINT string
<MEDIUMINT> ::= 'MEDIUMINT' ' ' ;
# END
# LEXER: INT
# BEGIN LEXER FOR  INT string
<INT> ::= 'INT' ' ' ;
# END
# LEXER: INTEGER
# BEGIN LEXER FOR  INTEGER string
<INTEGER> ::= 'INTEGER' ' ' ;
# END
# LEXER: BIGINT
# BEGIN LEXER FOR  BIGINT string
<BIGINT> ::= 'BIGINT' ' ' ;
# END
# LEXER: REAL
# BEGIN LEXER FOR  REAL string
<REAL> ::= 'REAL' ' ' ;
# END
# LEXER: DOUBLE
# BEGIN LEXER FOR  DOUBLE string
<DOUBLE> ::= 'DOUBLE' ' ' ;
# END
# LEXER: PRECISION
# BEGIN LEXER FOR  PRECISION string
<PRECISION> ::= 'PRECISION' ' ' ;
# END
# LEXER: FLOAT
# BEGIN LEXER FOR  FLOAT string
<FLOAT> ::= 'FLOAT' ' ' ;
# END
# LEXER: DECIMAL
# BEGIN LEXER FOR  DECIMAL string
<DECIMAL> ::= 'DECIMAL' ' ' ;
# END
# LEXER: DEC
# BEGIN LEXER FOR  DEC string
<DEC> ::= 'DEC' ' ' ;
# END
# LEXER: NUMERIC
# BEGIN LEXER FOR  NUMERIC string
<NUMERIC> ::= 'NUMERIC' ' ' ;
# END
# LEXER: DATE
# BEGIN LEXER FOR  DATE string
<DATE> ::= 'DATE' ' ' ;
# END
# LEXER: TIME
# BEGIN LEXER FOR  TIME string
<TIME> ::= 'TIME' ' ' ;
# END
# LEXER: TIMESTAMP
# BEGIN LEXER FOR  TIMESTAMP string
<TIMESTAMP> ::= 'TIMESTAMP' ' ' ;
# END
# LEXER: DATETIME
# BEGIN LEXER FOR  DATETIME string
<DATETIME> ::= 'DATETIME' ' ' ;
# END
# LEXER: YEAR
# BEGIN LEXER FOR  YEAR string
<YEAR> ::= 'YEAR' ' ' ;
# END
# LEXER: CHAR
# BEGIN LEXER FOR  CHAR string
<CHAR> ::= 'CHAR' ' ' ;
# END
# LEXER: VARCHAR
# BEGIN LEXER FOR  VARCHAR string
<VARCHAR> ::= 'VARCHAR' ' ' ;
# END
# LEXER: NVARCHAR
# BEGIN LEXER FOR  NVARCHAR string
<NVARCHAR> ::= 'NVARCHAR' ' ' ;
# END
# LEXER: NATIONAL
# BEGIN LEXER FOR  NATIONAL string
<NATIONAL> ::= 'NATIONAL' ' ' ;
# END
# LEXER: BINARY
# BEGIN LEXER FOR  BINARY string
<BINARY> ::= 'BINARY' ' ' ;
# END
# LEXER: VARBINARY
# BEGIN LEXER FOR  VARBINARY string
<VARBINARY> ::= 'VARBINARY' ' ' ;
# END
# LEXER: TINYBLOB
# BEGIN LEXER FOR  TINYBLOB string
<TINYBLOB> ::= 'TINYBLOB' ' ' ;
# END
# LEXER: BLOB
# BEGIN LEXER FOR  BLOB string
<BLOB> ::= 'BLOB' ' ' ;
# END
# LEXER: MEDIUMBLOB
# BEGIN LEXER FOR  MEDIUMBLOB string
<MEDIUMBLOB> ::= 'MEDIUMBLOB' ' ' ;
# END
# LEXER: LONGBLOB
# BEGIN LEXER FOR  LONGBLOB string
<LONGBLOB> ::= 'LONGBLOB' ' ' ;
# END
# LEXER: TINYTEXT
# BEGIN LEXER FOR  TINYTEXT string
<TINYTEXT> ::= 'TINYTEXT' ' ' ;
# END
# LEXER: TEXT
# BEGIN LEXER FOR  TEXT string
<TEXT> ::= 'TEXT' ' ' ;
# END
# LEXER: MEDIUMTEXT
# BEGIN LEXER FOR  MEDIUMTEXT string
<MEDIUMTEXT> ::= 'MEDIUMTEXT' ' ' ;
# END
# LEXER: LONGTEXT
# BEGIN LEXER FOR  LONGTEXT string
<LONGTEXT> ::= 'LONGTEXT' ' ' ;
# END
# LEXER: ENUM
# BEGIN LEXER FOR  ENUM string
<ENUM> ::= 'ENUM' ' ' ;
# END
# LEXER: VARYING
# BEGIN LEXER FOR  VARYING string
<VARYING> ::= 'VARYING' ' ' ;
# END
# LEXER: SERIAL
# BEGIN LEXER FOR  SERIAL string
<SERIAL> ::= 'SERIAL' ' ' ;
# END
# LEXER: YEAR_MONTH
# BEGIN LEXER FOR  YEAR_MONTH string
<YEAR_MONTH> ::= 'YEAR_MONTH' ' ' ;
# END
# LEXER: DAY_HOUR
# BEGIN LEXER FOR  DAY_HOUR string
<DAY_HOUR> ::= 'DAY_HOUR' ' ' ;
# END
# LEXER: DAY_MINUTE
# BEGIN LEXER FOR  DAY_MINUTE string
<DAY_MINUTE> ::= 'DAY_MINUTE' ' ' ;
# END
# LEXER: DAY_SECOND
# BEGIN LEXER FOR  DAY_SECOND string
<DAY_SECOND> ::= 'DAY_SECOND' ' ' ;
# END
# LEXER: HOUR_MINUTE
# BEGIN LEXER FOR  HOUR_MINUTE string
<HOUR_MINUTE> ::= 'HOUR_MINUTE' ' ' ;
# END
# LEXER: HOUR_SECOND
# BEGIN LEXER FOR  HOUR_SECOND string
<HOUR_SECOND> ::= 'HOUR_SECOND' ' ' ;
# END
# LEXER: MINUTE_SECOND
# BEGIN LEXER FOR  MINUTE_SECOND string
<MINUTE_SECOND> ::= 'MINUTE_SECOND' ' ' ;
# END
# LEXER: SECOND_MICROSECOND
# BEGIN LEXER FOR  SECOND_MICROSECOND string
<SECOND_MICROSECOND> ::= 'SECOND_MICROSECOND' ' ' ;
# END
# LEXER: MINUTE_MICROSECOND
# BEGIN LEXER FOR  MINUTE_MICROSECOND string
<MINUTE_MICROSECOND> ::= 'MINUTE_MICROSECOND' ' ' ;
# END
# LEXER: HOUR_MICROSECOND
# BEGIN LEXER FOR  HOUR_MICROSECOND string
<HOUR_MICROSECOND> ::= 'HOUR_MICROSECOND' ' ' ;
# END
# LEXER: DAY_MICROSECOND
# BEGIN LEXER FOR  DAY_MICROSECOND string
<DAY_MICROSECOND> ::= 'DAY_MICROSECOND' ' ' ;
# END
# LEXER: AVG
# BEGIN LEXER FOR  AVG string
<AVG> ::= 'AVG' ' ' ;
# END
# LEXER: BIT_AND
# BEGIN LEXER FOR  BIT_AND string
<BIT_AND> ::= 'BIT_AND' ' ' ;
# END
# LEXER: BIT_OR
# BEGIN LEXER FOR  BIT_OR string
<BIT_OR> ::= 'BIT_OR' ' ' ;
# END
# LEXER: BIT_XOR
# BEGIN LEXER FOR  BIT_XOR string
<BIT_XOR> ::= 'BIT_XOR' ' ' ;
# END
# LEXER: COUNT
# BEGIN LEXER FOR  COUNT string
<COUNT> ::= 'COUNT' ' ' ;
# END
# LEXER: GROUP_CONCAT
# BEGIN LEXER FOR  GROUP_CONCAT string
<GROUP_CONCAT> ::= 'GROUP_CONCAT' ' ' ;
# END
# LEXER: MAX
# BEGIN LEXER FOR  MAX string
<MAX> ::= 'MAX' ' ' ;
# END
# LEXER: MIN
# BEGIN LEXER FOR  MIN string
<MIN> ::= 'MIN' ' ' ;
# END
# LEXER: STD
# BEGIN LEXER FOR  STD string
<STD> ::= 'STD' ' ' ;
# END
# LEXER: STDDEV
# BEGIN LEXER FOR  STDDEV string
<STDDEV> ::= 'STDDEV' ' ' ;
# END
# LEXER: STDDEV_POP
# BEGIN LEXER FOR  STDDEV_POP string
<STDDEV_POP> ::= 'STDDEV_POP' ' ' ;
# END
# LEXER: STDDEV_SAMP
# BEGIN LEXER FOR  STDDEV_SAMP string
<STDDEV_SAMP> ::= 'STDDEV_SAMP' ' ' ;
# END
# LEXER: SUM
# BEGIN LEXER FOR  SUM string
<SUM> ::= 'SUM' ' ' ;
# END
# LEXER: VAR_POP
# BEGIN LEXER FOR  VAR_POP string
<VAR_POP> ::= 'VAR_POP' ' ' ;
# END
# LEXER: VAR_SAMP
# BEGIN LEXER FOR  VAR_SAMP string
<VAR_SAMP> ::= 'VAR_SAMP' ' ' ;
# END
# LEXER: VARIANCE
# BEGIN LEXER FOR  VARIANCE string
<VARIANCE> ::= 'VARIANCE' ' ' ;
# END
# LEXER: CURRENT_DATE
# BEGIN LEXER FOR  CURRENT_DATE string
<CURRENT_DATE> ::= 'CURRENT_DATE' ' ' ;
# END
# LEXER: CURRENT_TIME
# BEGIN LEXER FOR  CURRENT_TIME string
<CURRENT_TIME> ::= 'CURRENT_TIME' ' ' ;
# END
# LEXER: CURRENT_TIMESTAMP
# BEGIN LEXER FOR  CURRENT_TIMESTAMP string
<CURRENT_TIMESTAMP> ::= 'CURRENT_TIMESTAMP' ' ' ;
# END
# LEXER: LOCALTIME
# BEGIN LEXER FOR  LOCALTIME string
<LOCALTIME> ::= 'LOCALTIME' ' ' ;
# END
# LEXER: CURDATE
# BEGIN LEXER FOR  CURDATE string
<CURDATE> ::= 'CURDATE' ' ' ;
# END
# LEXER: CURTIME
# BEGIN LEXER FOR  CURTIME string
<CURTIME> ::= 'CURTIME' ' ' ;
# END
# LEXER: DATE_ADD
# BEGIN LEXER FOR  DATE_ADD string
<DATE_ADD> ::= 'DATE_ADD' ' ' ;
# END
# LEXER: DATE_SUB
# BEGIN LEXER FOR  DATE_SUB string
<DATE_SUB> ::= 'DATE_SUB' ' ' ;
# END
# LEXER: EXTRACT
# BEGIN LEXER FOR  EXTRACT string
<EXTRACT> ::= 'EXTRACT' ' ' ;
# END
# LEXER: LOCALTIMESTAMP
# BEGIN LEXER FOR  LOCALTIMESTAMP string
<LOCALTIMESTAMP> ::= 'LOCALTIMESTAMP' ' ' ;
# END
# LEXER: NOW
# BEGIN LEXER FOR  NOW string
<NOW> ::= 'NOW' ' ' ;
# END
# LEXER: POSITION
# BEGIN LEXER FOR  POSITION string
<POSITION> ::= 'POSITION' ' ' ;
# END
# LEXER: SUBSTR
# BEGIN LEXER FOR  SUBSTR string
<SUBSTR> ::= 'SUBSTR' ' ' ;
# END
# LEXER: SUBSTRING
# BEGIN LEXER FOR  SUBSTRING string
<SUBSTRING> ::= 'SUBSTRING' ' ' ;
# END
# LEXER: SYSDATE
# BEGIN LEXER FOR  SYSDATE string
<SYSDATE> ::= 'SYSDATE' ' ' ;
# END
# LEXER: TRIM
# BEGIN LEXER FOR  TRIM string
<TRIM> ::= 'TRIM' ' ' ;
# END
# LEXER: UTC_DATE
# BEGIN LEXER FOR  UTC_DATE string
<UTC_DATE> ::= 'UTC_DATE' ' ' ;
# END
# LEXER: UTC_TIME
# BEGIN LEXER FOR  UTC_TIME string
<UTC_TIME> ::= 'UTC_TIME' ' ' ;
# END
# LEXER: UTC_TIMESTAMP
# BEGIN LEXER FOR  UTC_TIMESTAMP string
<UTC_TIMESTAMP> ::= 'UTC_TIMESTAMP' ' ' ;
# END
# LEXER: ACCOUNT
# BEGIN LEXER FOR  ACCOUNT string
<ACCOUNT> ::= 'ACCOUNT' ' ' ;
# END
# LEXER: ACTION
# BEGIN LEXER FOR  ACTION string
<ACTION> ::= 'ACTION' ' ' ;
# END
# LEXER: AFTER
# BEGIN LEXER FOR  AFTER string
<AFTER> ::= 'AFTER' ' ' ;
# END
# LEXER: AGGREGATE
# BEGIN LEXER FOR  AGGREGATE string
<AGGREGATE> ::= 'AGGREGATE' ' ' ;
# END
# LEXER: ALGORITHM
# BEGIN LEXER FOR  ALGORITHM string
<ALGORITHM> ::= 'ALGORITHM' ' ' ;
# END
# LEXER: ANY
# BEGIN LEXER FOR  ANY string
<ANY> ::= 'ANY' ' ' ;
# END
# LEXER: AT
# BEGIN LEXER FOR  AT string
<AT> ::= 'AT' ' ' ;
# END
# LEXER: AUTHORS
# BEGIN LEXER FOR  AUTHORS string
<AUTHORS> ::= 'AUTHORS' ' ' ;
# END
# LEXER: AUTOCOMMIT
# BEGIN LEXER FOR  AUTOCOMMIT string
<AUTOCOMMIT> ::= 'AUTOCOMMIT' ' ' ;
# END
# LEXER: AUTOEXTEND_SIZE
# BEGIN LEXER FOR  AUTOEXTEND_SIZE string
<AUTOEXTEND_SIZE> ::= 'AUTOEXTEND_SIZE' ' ' ;
# END
# LEXER: AUTO_INCREMENT
# BEGIN LEXER FOR  AUTO_INCREMENT string
<AUTO_INCREMENT> ::= 'AUTO_INCREMENT' ' ' ;
# END
# LEXER: AVG_ROW_LENGTH
# BEGIN LEXER FOR  AVG_ROW_LENGTH string
<AVG_ROW_LENGTH> ::= 'AVG_ROW_LENGTH' ' ' ;
# END
# LEXER: BEGIN
# BEGIN LEXER FOR  BEGIN string
<BEGIN> ::= 'BEGIN' ' ' ;
# END
# LEXER: BINLOG
# BEGIN LEXER FOR  BINLOG string
<BINLOG> ::= 'BINLOG' ' ' ;
# END
# LEXER: BIT
# BEGIN LEXER FOR  BIT string
<BIT> ::= 'BIT' ' ' ;
# END
# LEXER: BLOCK
# BEGIN LEXER FOR  BLOCK string
<BLOCK> ::= 'BLOCK' ' ' ;
# END
# LEXER: BOOL
# BEGIN LEXER FOR  BOOL string
<BOOL> ::= 'BOOL' ' ' ;
# END
# LEXER: BOOLEAN
# BEGIN LEXER FOR  BOOLEAN string
<BOOLEAN> ::= 'BOOLEAN' ' ' ;
# END
# LEXER: BTREE
# BEGIN LEXER FOR  BTREE string
<BTREE> ::= 'BTREE' ' ' ;
# END
# LEXER: CACHE
# BEGIN LEXER FOR  CACHE string
<CACHE> ::= 'CACHE' ' ' ;
# END
# LEXER: CASCADED
# BEGIN LEXER FOR  CASCADED string
<CASCADED> ::= 'CASCADED' ' ' ;
# END
# LEXER: CHAIN
# BEGIN LEXER FOR  CHAIN string
<CHAIN> ::= 'CHAIN' ' ' ;
# END
# LEXER: CHANGED
# BEGIN LEXER FOR  CHANGED string
<CHANGED> ::= 'CHANGED' ' ' ;
# END
# LEXER: CHANNEL
# BEGIN LEXER FOR  CHANNEL string
<CHANNEL> ::= 'CHANNEL' ' ' ;
# END
# LEXER: CHECKSUM
# BEGIN LEXER FOR  CHECKSUM string
<CHECKSUM> ::= 'CHECKSUM' ' ' ;
# END
# LEXER: PAGE_CHECKSUM
# BEGIN LEXER FOR  PAGE_CHECKSUM string
<PAGE_CHECKSUM> ::= 'PAGE_CHECKSUM' ' ' ;
# END
# LEXER: CIPHER
# BEGIN LEXER FOR  CIPHER string
<CIPHER> ::= 'CIPHER' ' ' ;
# END
# LEXER: CLASS_ORIGIN
# BEGIN LEXER FOR  CLASS_ORIGIN string
<CLASS_ORIGIN> ::= 'CLASS_ORIGIN' ' ' ;
# END
# LEXER: CLIENT
# BEGIN LEXER FOR  CLIENT string
<CLIENT> ::= 'CLIENT' ' ' ;
# END
# LEXER: CLOSE
# BEGIN LEXER FOR  CLOSE string
<CLOSE> ::= 'CLOSE' ' ' ;
# END
# LEXER: COALESCE
# BEGIN LEXER FOR  COALESCE string
<COALESCE> ::= 'COALESCE' ' ' ;
# END
# LEXER: CODE
# BEGIN LEXER FOR  CODE string
<CODE> ::= 'CODE' ' ' ;
# END
# LEXER: COLUMNS
# BEGIN LEXER FOR  COLUMNS string
<COLUMNS> ::= 'COLUMNS' ' ' ;
# END
# LEXER: COLUMN_FORMAT
# BEGIN LEXER FOR  COLUMN_FORMAT string
<COLUMN_FORMAT> ::= 'COLUMN_FORMAT' ' ' ;
# END
# LEXER: COLUMN_NAME
# BEGIN LEXER FOR  COLUMN_NAME string
<COLUMN_NAME> ::= 'COLUMN_NAME' ' ' ;
# END
# LEXER: COMMENT
# BEGIN LEXER FOR  COMMENT string
<COMMENT> ::= 'COMMENT' ' ' ;
# END
# LEXER: COMMIT
# BEGIN LEXER FOR  COMMIT string
<COMMIT> ::= 'COMMIT' ' ' ;
# END
# LEXER: COMPACT
# BEGIN LEXER FOR  COMPACT string
<COMPACT> ::= 'COMPACT' ' ' ;
# END
# LEXER: COMPLETION
# BEGIN LEXER FOR  COMPLETION string
<COMPLETION> ::= 'COMPLETION' ' ' ;
# END
# LEXER: COMPRESSED
# BEGIN LEXER FOR  COMPRESSED string
<COMPRESSED> ::= 'COMPRESSED' ' ' ;
# END
# LEXER: COMPRESSION
# BEGIN LEXER FOR  COMPRESSION string
<COMPRESSION> ::= 'COMPRESSION' ' ' ;
# END
# LEXER: CONCURRENT
# BEGIN LEXER FOR  CONCURRENT string
<CONCURRENT> ::= 'CONCURRENT' ' ' ;
# END
# LEXER: CONNECTION
# BEGIN LEXER FOR  CONNECTION string
<CONNECTION> ::= 'CONNECTION' ' ' ;
# END
# LEXER: CONSISTENT
# BEGIN LEXER FOR  CONSISTENT string
<CONSISTENT> ::= 'CONSISTENT' ' ' ;
# END
# LEXER: CONSTRAINT_CATALOG
# BEGIN LEXER FOR  CONSTRAINT_CATALOG string
<CONSTRAINT_CATALOG> ::= 'CONSTRAINT_CATALOG' ' ' ;
# END
# LEXER: CONSTRAINT_SCHEMA
# BEGIN LEXER FOR  CONSTRAINT_SCHEMA string
<CONSTRAINT_SCHEMA> ::= 'CONSTRAINT_SCHEMA' ' ' ;
# END
# LEXER: CONSTRAINT_NAME
# BEGIN LEXER FOR  CONSTRAINT_NAME string
<CONSTRAINT_NAME> ::= 'CONSTRAINT_NAME' ' ' ;
# END
# LEXER: CONTAINS
# BEGIN LEXER FOR  CONTAINS string
<CONTAINS> ::= 'CONTAINS' ' ' ;
# END
# LEXER: CONTEXT
# BEGIN LEXER FOR  CONTEXT string
<CONTEXT> ::= 'CONTEXT' ' ' ;
# END
# LEXER: CONTRIBUTORS
# BEGIN LEXER FOR  CONTRIBUTORS string
<CONTRIBUTORS> ::= 'CONTRIBUTORS' ' ' ;
# END
# LEXER: COPY
# BEGIN LEXER FOR  COPY string
<COPY> ::= 'COPY' ' ' ;
# END
# LEXER: CPU
# BEGIN LEXER FOR  CPU string
<CPU> ::= 'CPU' ' ' ;
# END
# LEXER: CURSOR_NAME
# BEGIN LEXER FOR  CURSOR_NAME string
<CURSOR_NAME> ::= 'CURSOR_NAME' ' ' ;
# END
# LEXER: DATA
# BEGIN LEXER FOR  DATA string
<DATA> ::= 'DATA' ' ' ;
# END
# LEXER: DATAFILE
# BEGIN LEXER FOR  DATAFILE string
<DATAFILE> ::= 'DATAFILE' ' ' ;
# END
# LEXER: DEALLOCATE
# BEGIN LEXER FOR  DEALLOCATE string
<DEALLOCATE> ::= 'DEALLOCATE' ' ' ;
# END
# LEXER: DEFAULT_AUTH
# BEGIN LEXER FOR  DEFAULT_AUTH string
<DEFAULT_AUTH> ::= 'DEFAULT_AUTH' ' ' ;
# END
# LEXER: DEFINER
# BEGIN LEXER FOR  DEFINER string
<DEFINER> ::= 'DEFINER' ' ' ;
# END
# LEXER: DELAY_KEY_WRITE
# BEGIN LEXER FOR  DELAY_KEY_WRITE string
<DELAY_KEY_WRITE> ::= 'DELAY_KEY_WRITE' ' ' ;
# END
# LEXER: DES_KEY_FILE
# BEGIN LEXER FOR  DES_KEY_FILE string
<DES_KEY_FILE> ::= 'DES_KEY_FILE' ' ' ;
# END
# LEXER: DIRECTORY
# BEGIN LEXER FOR  DIRECTORY string
<DIRECTORY> ::= 'DIRECTORY' ' ' ;
# END
# LEXER: DISABLE
# BEGIN LEXER FOR  DISABLE string
<DISABLE> ::= 'DISABLE' ' ' ;
# END
# LEXER: DISCARD
# BEGIN LEXER FOR  DISCARD string
<DISCARD> ::= 'DISCARD' ' ' ;
# END
# LEXER: DISK
# BEGIN LEXER FOR  DISK string
<DISK> ::= 'DISK' ' ' ;
# END
# LEXER: DO
# BEGIN LEXER FOR  DO string
<DO> ::= 'DO' ' ' ;
# END
# LEXER: DUMPFILE
# BEGIN LEXER FOR  DUMPFILE string
<DUMPFILE> ::= 'DUMPFILE' ' ' ;
# END
# LEXER: DUPLICATE
# BEGIN LEXER FOR  DUPLICATE string
<DUPLICATE> ::= 'DUPLICATE' ' ' ;
# END
# LEXER: DYNAMIC
# BEGIN LEXER FOR  DYNAMIC string
<DYNAMIC> ::= 'DYNAMIC' ' ' ;
# END
# LEXER: ENABLE
# BEGIN LEXER FOR  ENABLE string
<ENABLE> ::= 'ENABLE' ' ' ;
# END
# LEXER: ENCRYPTION
# BEGIN LEXER FOR  ENCRYPTION string
<ENCRYPTION> ::= 'ENCRYPTION' ' ' ;
# END
# LEXER: END
# BEGIN LEXER FOR  END string
<END> ::= 'END' ' ' ;
# END
# LEXER: ENDS
# BEGIN LEXER FOR  ENDS string
<ENDS> ::= 'ENDS' ' ' ;
# END
# LEXER: ENGINE
# BEGIN LEXER FOR  ENGINE string
<ENGINE> ::= 'ENGINE' ' ' ;
# END
# LEXER: ENGINES
# BEGIN LEXER FOR  ENGINES string
<ENGINES> ::= 'ENGINES' ' ' ;
# END
# LEXER: ERROR
# BEGIN LEXER FOR  ERROR string
<ERROR> ::= 'ERROR' ' ' ;
# END
# LEXER: ERRORS
# BEGIN LEXER FOR  ERRORS string
<ERRORS> ::= 'ERRORS' ' ' ;
# END
# LEXER: ESCAPE
# BEGIN LEXER FOR  ESCAPE string
<ESCAPE> ::= 'ESCAPE' ' ' ;
# END
# LEXER: EVEN
# BEGIN LEXER FOR  EVEN string
<EVEN> ::= 'EVEN' ' ' ;
# END
# LEXER: EVENT
# BEGIN LEXER FOR  EVENT string
<EVENT> ::= 'EVENT' ' ' ;
# END
# LEXER: EVENTS
# BEGIN LEXER FOR  EVENTS string
<EVENTS> ::= 'EVENTS' ' ' ;
# END
# LEXER: EVERY
# BEGIN LEXER FOR  EVERY string
<EVERY> ::= 'EVERY' ' ' ;
# END
# LEXER: EXCHANGE
# BEGIN LEXER FOR  EXCHANGE string
<EXCHANGE> ::= 'EXCHANGE' ' ' ;
# END
# LEXER: EXCLUSIVE
# BEGIN LEXER FOR  EXCLUSIVE string
<EXCLUSIVE> ::= 'EXCLUSIVE' ' ' ;
# END
# LEXER: EXPIRE
# BEGIN LEXER FOR  EXPIRE string
<EXPIRE> ::= 'EXPIRE' ' ' ;
# END
# LEXER: EXPORT
# BEGIN LEXER FOR  EXPORT string
<EXPORT> ::= 'EXPORT' ' ' ;
# END
# LEXER: EXTENDED
# BEGIN LEXER FOR  EXTENDED string
<EXTENDED> ::= 'EXTENDED' ' ' ;
# END
# LEXER: EXTENT_SIZE
# BEGIN LEXER FOR  EXTENT_SIZE string
<EXTENT_SIZE> ::= 'EXTENT_SIZE' ' ' ;
# END
# LEXER: FAST
# BEGIN LEXER FOR  FAST string
<FAST> ::= 'FAST' ' ' ;
# END
# LEXER: FAULTS
# BEGIN LEXER FOR  FAULTS string
<FAULTS> ::= 'FAULTS' ' ' ;
# END
# LEXER: FIELDS
# BEGIN LEXER FOR  FIELDS string
<FIELDS> ::= 'FIELDS' ' ' ;
# END
# LEXER: FILE_BLOCK_SIZE
# BEGIN LEXER FOR  FILE_BLOCK_SIZE string
<FILE_BLOCK_SIZE> ::= 'FILE_BLOCK_SIZE' ' ' ;
# END
# LEXER: FILTER
# BEGIN LEXER FOR  FILTER string
<FILTER> ::= 'FILTER' ' ' ;
# END
# LEXER: FIRST
# BEGIN LEXER FOR  FIRST string
<FIRST> ::= 'FIRST' ' ' ;
# END
# LEXER: FIXED
# BEGIN LEXER FOR  FIXED string
<FIXED> ::= 'FIXED' ' ' ;
# END
# LEXER: FLUSH
# BEGIN LEXER FOR  FLUSH string
<FLUSH> ::= 'FLUSH' ' ' ;
# END
# LEXER: FOLLOWS
# BEGIN LEXER FOR  FOLLOWS string
<FOLLOWS> ::= 'FOLLOWS' ' ' ;
# END
# LEXER: FOUND
# BEGIN LEXER FOR  FOUND string
<FOUND> ::= 'FOUND' ' ' ;
# END
# LEXER: FULL
# BEGIN LEXER FOR  FULL string
<FULL> ::= 'FULL' ' ' ;
# END
# LEXER: FUNCTION
# BEGIN LEXER FOR  FUNCTION string
<FUNCTION> ::= 'FUNCTION' ' ' ;
# END
# LEXER: GENERAL
# BEGIN LEXER FOR  GENERAL string
<GENERAL> ::= 'GENERAL' ' ' ;
# END
# LEXER: GLOBAL
# BEGIN LEXER FOR  GLOBAL string
<GLOBAL> ::= 'GLOBAL' ' ' ;
# END
# LEXER: GRANTS
# BEGIN LEXER FOR  GRANTS string
<GRANTS> ::= 'GRANTS' ' ' ;
# END
# LEXER: GROUP_REPLICATION
# BEGIN LEXER FOR  GROUP_REPLICATION string
<GROUP_REPLICATION> ::= 'GROUP_REPLICATION' ' ' ;
# END
# LEXER: HANDLER
# BEGIN LEXER FOR  HANDLER string
<HANDLER> ::= 'HANDLER' ' ' ;
# END
# LEXER: HASH
# BEGIN LEXER FOR  HASH string
<HASH> ::= 'HASH' ' ' ;
# END
# LEXER: HELP
# BEGIN LEXER FOR  HELP string
<HELP> ::= 'HELP' ' ' ;
# END
# LEXER: HOST
# BEGIN LEXER FOR  HOST string
<HOST> ::= 'HOST' ' ' ;
# END
# LEXER: HOSTS
# BEGIN LEXER FOR  HOSTS string
<HOSTS> ::= 'HOSTS' ' ' ;
# END
# LEXER: IDENTIFIED
# BEGIN LEXER FOR  IDENTIFIED string
<IDENTIFIED> ::= 'IDENTIFIED' ' ' ;
# END
# LEXER: IGNORE_SERVER_IDS
# BEGIN LEXER FOR  IGNORE_SERVER_IDS string
<IGNORE_SERVER_IDS> ::= 'IGNORE_SERVER_IDS' ' ' ;
# END
# LEXER: IMPORT
# BEGIN LEXER FOR  IMPORT string
<IMPORT> ::= 'IMPORT' ' ' ;
# END
# LEXER: INDEXES
# BEGIN LEXER FOR  INDEXES string
<INDEXES> ::= 'INDEXES' ' ' ;
# END
# LEXER: INITIAL_SIZE
# BEGIN LEXER FOR  INITIAL_SIZE string
<INITIAL_SIZE> ::= 'INITIAL_SIZE' ' ' ;
# END
# LEXER: INPLACE
# BEGIN LEXER FOR  INPLACE string
<INPLACE> ::= 'INPLACE' ' ' ;
# END
# LEXER: INSERT_METHOD
# BEGIN LEXER FOR  INSERT_METHOD string
<INSERT_METHOD> ::= 'INSERT_METHOD' ' ' ;
# END
# LEXER: INSTALL
# BEGIN LEXER FOR  INSTALL string
<INSTALL> ::= 'INSTALL' ' ' ;
# END
# LEXER: INSTANCE
# BEGIN LEXER FOR  INSTANCE string
<INSTANCE> ::= 'INSTANCE' ' ' ;
# END
# LEXER: INVISIBLE
# BEGIN LEXER FOR  INVISIBLE string
<INVISIBLE> ::= 'INVISIBLE' ' ' ;
# END
# LEXER: INVOKER
# BEGIN LEXER FOR  INVOKER string
<INVOKER> ::= 'INVOKER' ' ' ;
# END
# LEXER: IO
# BEGIN LEXER FOR  IO string
<IO> ::= 'IO' ' ' ;
# END
# LEXER: IO_THREAD
# BEGIN LEXER FOR  IO_THREAD string
<IO_THREAD> ::= 'IO_THREAD' ' ' ;
# END
# LEXER: IPC
# BEGIN LEXER FOR  IPC string
<IPC> ::= 'IPC' ' ' ;
# END
# LEXER: ISOLATION
# BEGIN LEXER FOR  ISOLATION string
<ISOLATION> ::= 'ISOLATION' ' ' ;
# END
# LEXER: ISSUER
# BEGIN LEXER FOR  ISSUER string
<ISSUER> ::= 'ISSUER' ' ' ;
# END
# LEXER: JSON
# BEGIN LEXER FOR  JSON string
<JSON> ::= 'JSON' ' ' ;
# END
# LEXER: KEY_BLOCK_SIZE
# BEGIN LEXER FOR  KEY_BLOCK_SIZE string
<KEY_BLOCK_SIZE> ::= 'KEY_BLOCK_SIZE' ' ' ;
# END
# LEXER: LANGUAGE
# BEGIN LEXER FOR  LANGUAGE string
<LANGUAGE> ::= 'LANGUAGE' ' ' ;
# END
# LEXER: LAST
# BEGIN LEXER FOR  LAST string
<LAST> ::= 'LAST' ' ' ;
# END
# LEXER: LEAVES
# BEGIN LEXER FOR  LEAVES string
<LEAVES> ::= 'LEAVES' ' ' ;
# END
# LEXER: LESS
# BEGIN LEXER FOR  LESS string
<LESS> ::= 'LESS' ' ' ;
# END
# LEXER: LEVEL
# BEGIN LEXER FOR  LEVEL string
<LEVEL> ::= 'LEVEL' ' ' ;
# END
# LEXER: LIST
# BEGIN LEXER FOR  LIST string
<LIST> ::= 'LIST' ' ' ;
# END
# LEXER: LOCAL
# BEGIN LEXER FOR  LOCAL string
<LOCAL> ::= 'LOCAL' ' ' ;
# END
# LEXER: LOGFILE
# BEGIN LEXER FOR  LOGFILE string
<LOGFILE> ::= 'LOGFILE' ' ' ;
# END
# LEXER: LOGS
# BEGIN LEXER FOR  LOGS string
<LOGS> ::= 'LOGS' ' ' ;
# END
# LEXER: MASTER
# BEGIN LEXER FOR  MASTER string
<MASTER> ::= 'MASTER' ' ' ;
# END
# LEXER: MASTER_AUTO_POSITION
# BEGIN LEXER FOR  MASTER_AUTO_POSITION string
<MASTER_AUTO_POSITION> ::= 'MASTER_AUTO_POSITION' ' ' ;
# END
# LEXER: MASTER_CONNECT_RETRY
# BEGIN LEXER FOR  MASTER_CONNECT_RETRY string
<MASTER_CONNECT_RETRY> ::= 'MASTER_CONNECT_RETRY' ' ' ;
# END
# LEXER: MASTER_DELAY
# BEGIN LEXER FOR  MASTER_DELAY string
<MASTER_DELAY> ::= 'MASTER_DELAY' ' ' ;
# END
# LEXER: MASTER_HEARTBEAT_PERIOD
# BEGIN LEXER FOR  MASTER_HEARTBEAT_PERIOD string
<MASTER_HEARTBEAT_PERIOD> ::= 'MASTER_HEARTBEAT_PERIOD' ' ' ;
# END
# LEXER: MASTER_HOST
# BEGIN LEXER FOR  MASTER_HOST string
<MASTER_HOST> ::= 'MASTER_HOST' ' ' ;
# END
# LEXER: MASTER_LOG_FILE
# BEGIN LEXER FOR  MASTER_LOG_FILE string
<MASTER_LOG_FILE> ::= 'MASTER_LOG_FILE' ' ' ;
# END
# LEXER: MASTER_LOG_POS
# BEGIN LEXER FOR  MASTER_LOG_POS string
<MASTER_LOG_POS> ::= 'MASTER_LOG_POS' ' ' ;
# END
# LEXER: MASTER_PASSWORD
# BEGIN LEXER FOR  MASTER_PASSWORD string
<MASTER_PASSWORD> ::= 'MASTER_PASSWORD' ' ' ;
# END
# LEXER: MASTER_PORT
# BEGIN LEXER FOR  MASTER_PORT string
<MASTER_PORT> ::= 'MASTER_PORT' ' ' ;
# END
# LEXER: MASTER_RETRY_COUNT
# BEGIN LEXER FOR  MASTER_RETRY_COUNT string
<MASTER_RETRY_COUNT> ::= 'MASTER_RETRY_COUNT' ' ' ;
# END
# LEXER: MASTER_SSL
# BEGIN LEXER FOR  MASTER_SSL string
<MASTER_SSL> ::= 'MASTER_SSL' ' ' ;
# END
# LEXER: MASTER_SSL_CA
# BEGIN LEXER FOR  MASTER_SSL_CA string
<MASTER_SSL_CA> ::= 'MASTER_SSL_CA' ' ' ;
# END
# LEXER: MASTER_SSL_CAPATH
# BEGIN LEXER FOR  MASTER_SSL_CAPATH string
<MASTER_SSL_CAPATH> ::= 'MASTER_SSL_CAPATH' ' ' ;
# END
# LEXER: MASTER_SSL_CERT
# BEGIN LEXER FOR  MASTER_SSL_CERT string
<MASTER_SSL_CERT> ::= 'MASTER_SSL_CERT' ' ' ;
# END
# LEXER: MASTER_SSL_CIPHER
# BEGIN LEXER FOR  MASTER_SSL_CIPHER string
<MASTER_SSL_CIPHER> ::= 'MASTER_SSL_CIPHER' ' ' ;
# END
# LEXER: MASTER_SSL_CRL
# BEGIN LEXER FOR  MASTER_SSL_CRL string
<MASTER_SSL_CRL> ::= 'MASTER_SSL_CRL' ' ' ;
# END
# LEXER: MASTER_SSL_CRLPATH
# BEGIN LEXER FOR  MASTER_SSL_CRLPATH string
<MASTER_SSL_CRLPATH> ::= 'MASTER_SSL_CRLPATH' ' ' ;
# END
# LEXER: MASTER_SSL_KEY
# BEGIN LEXER FOR  MASTER_SSL_KEY string
<MASTER_SSL_KEY> ::= 'MASTER_SSL_KEY' ' ' ;
# END
# LEXER: MASTER_TLS_VERSION
# BEGIN LEXER FOR  MASTER_TLS_VERSION string
<MASTER_TLS_VERSION> ::= 'MASTER_TLS_VERSION' ' ' ;
# END
# LEXER: MASTER_USER
# BEGIN LEXER FOR  MASTER_USER string
<MASTER_USER> ::= 'MASTER_USER' ' ' ;
# END
# LEXER: MAX_CONNECTIONS_PER_HOUR
# BEGIN LEXER FOR  MAX_CONNECTIONS_PER_HOUR string
<MAX_CONNECTIONS_PER_HOUR> ::= 'MAX_CONNECTIONS_PER_HOUR' ' ' ;
# END
# LEXER: MAX_QUERIES_PER_HOUR
# BEGIN LEXER FOR  MAX_QUERIES_PER_HOUR string
<MAX_QUERIES_PER_HOUR> ::= 'MAX_QUERIES_PER_HOUR' ' ' ;
# END
# LEXER: MAX_ROWS
# BEGIN LEXER FOR  MAX_ROWS string
<MAX_ROWS> ::= 'MAX_ROWS' ' ' ;
# END
# LEXER: MAX_SIZE
# BEGIN LEXER FOR  MAX_SIZE string
<MAX_SIZE> ::= 'MAX_SIZE' ' ' ;
# END
# LEXER: MAX_UPDATES_PER_HOUR
# BEGIN LEXER FOR  MAX_UPDATES_PER_HOUR string
<MAX_UPDATES_PER_HOUR> ::= 'MAX_UPDATES_PER_HOUR' ' ' ;
# END
# LEXER: MAX_USER_CONNECTIONS
# BEGIN LEXER FOR  MAX_USER_CONNECTIONS string
<MAX_USER_CONNECTIONS> ::= 'MAX_USER_CONNECTIONS' ' ' ;
# END
# LEXER: MEDIUM
# BEGIN LEXER FOR  MEDIUM string
<MEDIUM> ::= 'MEDIUM' ' ' ;
# END
# LEXER: MERGE
# BEGIN LEXER FOR  MERGE string
<MERGE> ::= 'MERGE' ' ' ;
# END
# LEXER: MESSAGE_TEXT
# BEGIN LEXER FOR  MESSAGE_TEXT string
<MESSAGE_TEXT> ::= 'MESSAGE_TEXT' ' ' ;
# END
# LEXER: MID
# BEGIN LEXER FOR  MID string
<MID> ::= 'MID' ' ' ;
# END
# LEXER: MIGRATE
# BEGIN LEXER FOR  MIGRATE string
<MIGRATE> ::= 'MIGRATE' ' ' ;
# END
# LEXER: MIN_ROWS
# BEGIN LEXER FOR  MIN_ROWS string
<MIN_ROWS> ::= 'MIN_ROWS' ' ' ;
# END
# LEXER: MODE
# BEGIN LEXER FOR  MODE string
<MODE> ::= 'MODE' ' ' ;
# END
# LEXER: MODIFY
# BEGIN LEXER FOR  MODIFY string
<MODIFY> ::= 'MODIFY' ' ' ;
# END
# LEXER: MUTEX
# BEGIN LEXER FOR  MUTEX string
<MUTEX> ::= 'MUTEX' ' ' ;
# END
# LEXER: MYSQL
# BEGIN LEXER FOR  MYSQL string
<MYSQL> ::= 'MYSQL' ' ' ;
# END
# LEXER: MYSQL_ERRNO
# BEGIN LEXER FOR  MYSQL_ERRNO string
<MYSQL_ERRNO> ::= 'MYSQL_ERRNO' ' ' ;
# END
# LEXER: NAME
# BEGIN LEXER FOR  NAME string
<NAME> ::= 'NAME' ' ' ;
# END
# LEXER: NAMES
# BEGIN LEXER FOR  NAMES string
<NAMES> ::= 'NAMES' ' ' ;
# END
# LEXER: NCHAR
# BEGIN LEXER FOR  NCHAR string
<NCHAR> ::= 'NCHAR' ' ' ;
# END
# LEXER: NEVER
# BEGIN LEXER FOR  NEVER string
<NEVER> ::= 'NEVER' ' ' ;
# END
# LEXER: NEXT
# BEGIN LEXER FOR  NEXT string
<NEXT> ::= 'NEXT' ' ' ;
# END
# LEXER: NO
# BEGIN LEXER FOR  NO string
<NO> ::= 'NO' ' ' ;
# END
# LEXER: NODEGROUP
# BEGIN LEXER FOR  NODEGROUP string
<NODEGROUP> ::= 'NODEGROUP' ' ' ;
# END
# LEXER: NONE
# BEGIN LEXER FOR  NONE string
<NONE> ::= 'NONE' ' ' ;
# END
# LEXER: OFFLINE
# BEGIN LEXER FOR  OFFLINE string
<OFFLINE> ::= 'OFFLINE' ' ' ;
# END
# LEXER: OFFSET
# BEGIN LEXER FOR  OFFSET string
<OFFSET> ::= 'OFFSET' ' ' ;
# END
# LEXER: OJ
# BEGIN LEXER FOR  OJ string
<OJ> ::= 'OJ' ' ' ;
# END
# LEXER: OLD_PASSWORD
# BEGIN LEXER FOR  OLD_PASSWORD string
<OLD_PASSWORD> ::= 'OLD_PASSWORD' ' ' ;
# END
# LEXER: ONE
# BEGIN LEXER FOR  ONE string
<ONE> ::= 'ONE' ' ' ;
# END
# LEXER: ONLINE
# BEGIN LEXER FOR  ONLINE string
<ONLINE> ::= 'ONLINE' ' ' ;
# END
# LEXER: ONLY
# BEGIN LEXER FOR  ONLY string
<ONLY> ::= 'ONLY' ' ' ;
# END
# LEXER: OPEN
# BEGIN LEXER FOR  OPEN string
<OPEN> ::= 'OPEN' ' ' ;
# END
# LEXER: OPTIMIZER_COSTS
# BEGIN LEXER FOR  OPTIMIZER_COSTS string
<OPTIMIZER_COSTS> ::= 'OPTIMIZER_COSTS' ' ' ;
# END
# LEXER: OPTIONS
# BEGIN LEXER FOR  OPTIONS string
<OPTIONS> ::= 'OPTIONS' ' ' ;
# END
# LEXER: OWNER
# BEGIN LEXER FOR  OWNER string
<OWNER> ::= 'OWNER' ' ' ;
# END
# LEXER: PACK_KEYS
# BEGIN LEXER FOR  PACK_KEYS string
<PACK_KEYS> ::= 'PACK_KEYS' ' ' ;
# END
# LEXER: PAGE
# BEGIN LEXER FOR  PAGE string
<PAGE> ::= 'PAGE' ' ' ;
# END
# LEXER: PARSER
# BEGIN LEXER FOR  PARSER string
<PARSER> ::= 'PARSER' ' ' ;
# END
# LEXER: PARTIAL
# BEGIN LEXER FOR  PARTIAL string
<PARTIAL> ::= 'PARTIAL' ' ' ;
# END
# LEXER: PARTITIONING
# BEGIN LEXER FOR  PARTITIONING string
<PARTITIONING> ::= 'PARTITIONING' ' ' ;
# END
# LEXER: PARTITIONS
# BEGIN LEXER FOR  PARTITIONS string
<PARTITIONS> ::= 'PARTITIONS' ' ' ;
# END
# LEXER: PASSWORD
# BEGIN LEXER FOR  PASSWORD string
<PASSWORD> ::= 'PASSWORD' ' ' ;
# END
# LEXER: PHASE
# BEGIN LEXER FOR  PHASE string
<PHASE> ::= 'PHASE' ' ' ;
# END
# LEXER: PLUGIN
# BEGIN LEXER FOR  PLUGIN string
<PLUGIN> ::= 'PLUGIN' ' ' ;
# END
# LEXER: PLUGIN_DIR
# BEGIN LEXER FOR  PLUGIN_DIR string
<PLUGIN_DIR> ::= 'PLUGIN_DIR' ' ' ;
# END
# LEXER: PLUGINS
# BEGIN LEXER FOR  PLUGINS string
<PLUGINS> ::= 'PLUGINS' ' ' ;
# END
# LEXER: PORT
# BEGIN LEXER FOR  PORT string
<PORT> ::= 'PORT' ' ' ;
# END
# LEXER: PRECEDES
# BEGIN LEXER FOR  PRECEDES string
<PRECEDES> ::= 'PRECEDES' ' ' ;
# END
# LEXER: PREPARE
# BEGIN LEXER FOR  PREPARE string
<PREPARE> ::= 'PREPARE' ' ' ;
# END
# LEXER: PRESERVE
# BEGIN LEXER FOR  PRESERVE string
<PRESERVE> ::= 'PRESERVE' ' ' ;
# END
# LEXER: PREV
# BEGIN LEXER FOR  PREV string
<PREV> ::= 'PREV' ' ' ;
# END
# LEXER: PROCESSLIST
# BEGIN LEXER FOR  PROCESSLIST string
<PROCESSLIST> ::= 'PROCESSLIST' ' ' ;
# END
# LEXER: PROFILE
# BEGIN LEXER FOR  PROFILE string
<PROFILE> ::= 'PROFILE' ' ' ;
# END
# LEXER: PROFILES
# BEGIN LEXER FOR  PROFILES string
<PROFILES> ::= 'PROFILES' ' ' ;
# END
# LEXER: PROXY
# BEGIN LEXER FOR  PROXY string
<PROXY> ::= 'PROXY' ' ' ;
# END
# LEXER: QUERY
# BEGIN LEXER FOR  QUERY string
<QUERY> ::= 'QUERY' ' ' ;
# END
# LEXER: QUICK
# BEGIN LEXER FOR  QUICK string
<QUICK> ::= 'QUICK' ' ' ;
# END
# LEXER: REBUILD
# BEGIN LEXER FOR  REBUILD string
<REBUILD> ::= 'REBUILD' ' ' ;
# END
# LEXER: RECOVER
# BEGIN LEXER FOR  RECOVER string
<RECOVER> ::= 'RECOVER' ' ' ;
# END
# LEXER: REDO_BUFFER_SIZE
# BEGIN LEXER FOR  REDO_BUFFER_SIZE string
<REDO_BUFFER_SIZE> ::= 'REDO_BUFFER_SIZE' ' ' ;
# END
# LEXER: REDUNDANT
# BEGIN LEXER FOR  REDUNDANT string
<REDUNDANT> ::= 'REDUNDANT' ' ' ;
# END
# LEXER: RELAY
# BEGIN LEXER FOR  RELAY string
<RELAY> ::= 'RELAY' ' ' ;
# END
# LEXER: RELAY_LOG_FILE
# BEGIN LEXER FOR  RELAY_LOG_FILE string
<RELAY_LOG_FILE> ::= 'RELAY_LOG_FILE' ' ' ;
# END
# LEXER: RELAY_LOG_POS
# BEGIN LEXER FOR  RELAY_LOG_POS string
<RELAY_LOG_POS> ::= 'RELAY_LOG_POS' ' ' ;
# END
# LEXER: RELAYLOG
# BEGIN LEXER FOR  RELAYLOG string
<RELAYLOG> ::= 'RELAYLOG' ' ' ;
# END
# LEXER: REMOVE
# BEGIN LEXER FOR  REMOVE string
<REMOVE> ::= 'REMOVE' ' ' ;
# END
# LEXER: REORGANIZE
# BEGIN LEXER FOR  REORGANIZE string
<REORGANIZE> ::= 'REORGANIZE' ' ' ;
# END
# LEXER: REPAIR
# BEGIN LEXER FOR  REPAIR string
<REPAIR> ::= 'REPAIR' ' ' ;
# END
# LEXER: REPLICATE_DO_DB
# BEGIN LEXER FOR  REPLICATE_DO_DB string
<REPLICATE_DO_DB> ::= 'REPLICATE_DO_DB' ' ' ;
# END
# LEXER: REPLICATE_DO_TABLE
# BEGIN LEXER FOR  REPLICATE_DO_TABLE string
<REPLICATE_DO_TABLE> ::= 'REPLICATE_DO_TABLE' ' ' ;
# END
# LEXER: REPLICATE_IGNORE_DB
# BEGIN LEXER FOR  REPLICATE_IGNORE_DB string
<REPLICATE_IGNORE_DB> ::= 'REPLICATE_IGNORE_DB' ' ' ;
# END
# LEXER: REPLICATE_IGNORE_TABLE
# BEGIN LEXER FOR  REPLICATE_IGNORE_TABLE string
<REPLICATE_IGNORE_TABLE> ::= 'REPLICATE_IGNORE_TABLE' ' ' ;
# END
# LEXER: REPLICATE_REWRITE_DB
# BEGIN LEXER FOR  REPLICATE_REWRITE_DB string
<REPLICATE_REWRITE_DB> ::= 'REPLICATE_REWRITE_DB' ' ' ;
# END
# LEXER: REPLICATE_WILD_DO_TABLE
# BEGIN LEXER FOR  REPLICATE_WILD_DO_TABLE string
<REPLICATE_WILD_DO_TABLE> ::= 'REPLICATE_WILD_DO_TABLE' ' ' ;
# END
# LEXER: REPLICATE_WILD_IGNORE_TABLE
# BEGIN LEXER FOR  REPLICATE_WILD_IGNORE_TABLE string
<REPLICATE_WILD_IGNORE_TABLE> ::= 'REPLICATE_WILD_IGNORE_TABLE' ' ' ;
# END
# LEXER: REPLICATION
# BEGIN LEXER FOR  REPLICATION string
<REPLICATION> ::= 'REPLICATION' ' ' ;
# END
# LEXER: RESET
# BEGIN LEXER FOR  RESET string
<RESET> ::= 'RESET' ' ' ;
# END
# LEXER: RESUME
# BEGIN LEXER FOR  RESUME string
<RESUME> ::= 'RESUME' ' ' ;
# END
# LEXER: RETURNED_SQLSTATE
# BEGIN LEXER FOR  RETURNED_SQLSTATE string
<RETURNED_SQLSTATE> ::= 'RETURNED_SQLSTATE' ' ' ;
# END
# LEXER: RETURNS
# BEGIN LEXER FOR  RETURNS string
<RETURNS> ::= 'RETURNS' ' ' ;
# END
# LEXER: ROLLBACK
# BEGIN LEXER FOR  ROLLBACK string
<ROLLBACK> ::= 'ROLLBACK' ' ' ;
# END
# LEXER: ROLLUP
# BEGIN LEXER FOR  ROLLUP string
<ROLLUP> ::= 'ROLLUP' ' ' ;
# END
# LEXER: ROTATE
# BEGIN LEXER FOR  ROTATE string
<ROTATE> ::= 'ROTATE' ' ' ;
# END
# LEXER: ROW
# BEGIN LEXER FOR  ROW string
<ROW> ::= 'ROW' ' ' ;
# END
# LEXER: ROWS
# BEGIN LEXER FOR  ROWS string
<ROWS> ::= 'ROWS' ' ' ;
# END
# LEXER: ROW_FORMAT
# BEGIN LEXER FOR  ROW_FORMAT string
<ROW_FORMAT> ::= 'ROW_FORMAT' ' ' ;
# END
# LEXER: SAVEPOINT
# BEGIN LEXER FOR  SAVEPOINT string
<SAVEPOINT> ::= 'SAVEPOINT' ' ' ;
# END
# LEXER: SCHEDULE
# BEGIN LEXER FOR  SCHEDULE string
<SCHEDULE> ::= 'SCHEDULE' ' ' ;
# END
# LEXER: SECURITY
# BEGIN LEXER FOR  SECURITY string
<SECURITY> ::= 'SECURITY' ' ' ;
# END
# LEXER: SERVER
# BEGIN LEXER FOR  SERVER string
<SERVER> ::= 'SERVER' ' ' ;
# END
# LEXER: SESSION
# BEGIN LEXER FOR  SESSION string
<SESSION> ::= 'SESSION' ' ' ;
# END
# LEXER: SHARE
# BEGIN LEXER FOR  SHARE string
<SHARE> ::= 'SHARE' ' ' ;
# END
# LEXER: SHARED
# BEGIN LEXER FOR  SHARED string
<SHARED> ::= 'SHARED' ' ' ;
# END
# LEXER: SIGNED
# BEGIN LEXER FOR  SIGNED string
<SIGNED> ::= 'SIGNED' ' ' ;
# END
# LEXER: SIMPLE
# BEGIN LEXER FOR  SIMPLE string
<SIMPLE> ::= 'SIMPLE' ' ' ;
# END
# LEXER: SLAVE
# BEGIN LEXER FOR  SLAVE string
<SLAVE> ::= 'SLAVE' ' ' ;
# END
# LEXER: SLOW
# BEGIN LEXER FOR  SLOW string
<SLOW> ::= 'SLOW' ' ' ;
# END
# LEXER: SNAPSHOT
# BEGIN LEXER FOR  SNAPSHOT string
<SNAPSHOT> ::= 'SNAPSHOT' ' ' ;
# END
# LEXER: SOCKET
# BEGIN LEXER FOR  SOCKET string
<SOCKET> ::= 'SOCKET' ' ' ;
# END
# LEXER: SOME
# BEGIN LEXER FOR  SOME string
<SOME> ::= 'SOME' ' ' ;
# END
# LEXER: SONAME
# BEGIN LEXER FOR  SONAME string
<SONAME> ::= 'SONAME' ' ' ;
# END
# LEXER: SOUNDS
# BEGIN LEXER FOR  SOUNDS string
<SOUNDS> ::= 'SOUNDS' ' ' ;
# END
# LEXER: SOURCE
# BEGIN LEXER FOR  SOURCE string
<SOURCE> ::= 'SOURCE' ' ' ;
# END
# LEXER: SQL_AFTER_GTIDS
# BEGIN LEXER FOR  SQL_AFTER_GTIDS string
<SQL_AFTER_GTIDS> ::= 'SQL_AFTER_GTIDS' ' ' ;
# END
# LEXER: SQL_AFTER_MTS_GAPS
# BEGIN LEXER FOR  SQL_AFTER_MTS_GAPS string
<SQL_AFTER_MTS_GAPS> ::= 'SQL_AFTER_MTS_GAPS' ' ' ;
# END
# LEXER: SQL_BEFORE_GTIDS
# BEGIN LEXER FOR  SQL_BEFORE_GTIDS string
<SQL_BEFORE_GTIDS> ::= 'SQL_BEFORE_GTIDS' ' ' ;
# END
# LEXER: SQL_BUFFER_RESULT
# BEGIN LEXER FOR  SQL_BUFFER_RESULT string
<SQL_BUFFER_RESULT> ::= 'SQL_BUFFER_RESULT' ' ' ;
# END
# LEXER: SQL_CACHE
# BEGIN LEXER FOR  SQL_CACHE string
<SQL_CACHE> ::= 'SQL_CACHE' ' ' ;
# END
# LEXER: SQL_NO_CACHE
# BEGIN LEXER FOR  SQL_NO_CACHE string
<SQL_NO_CACHE> ::= 'SQL_NO_CACHE' ' ' ;
# END
# LEXER: SQL_THREAD
# BEGIN LEXER FOR  SQL_THREAD string
<SQL_THREAD> ::= 'SQL_THREAD' ' ' ;
# END
# LEXER: START
# BEGIN LEXER FOR  START string
<START> ::= 'START' ' ' ;
# END
# LEXER: STARTS
# BEGIN LEXER FOR  STARTS string
<STARTS> ::= 'STARTS' ' ' ;
# END
# LEXER: STATS_AUTO_RECALC
# BEGIN LEXER FOR  STATS_AUTO_RECALC string
<STATS_AUTO_RECALC> ::= 'STATS_AUTO_RECALC' ' ' ;
# END
# LEXER: STATS_PERSISTENT
# BEGIN LEXER FOR  STATS_PERSISTENT string
<STATS_PERSISTENT> ::= 'STATS_PERSISTENT' ' ' ;
# END
# LEXER: STATS_SAMPLE_PAGES
# BEGIN LEXER FOR  STATS_SAMPLE_PAGES string
<STATS_SAMPLE_PAGES> ::= 'STATS_SAMPLE_PAGES' ' ' ;
# END
# LEXER: STATUS
# BEGIN LEXER FOR  STATUS string
<STATUS> ::= 'STATUS' ' ' ;
# END
# LEXER: STOP
# BEGIN LEXER FOR  STOP string
<STOP> ::= 'STOP' ' ' ;
# END
# LEXER: STORAGE
# BEGIN LEXER FOR  STORAGE string
<STORAGE> ::= 'STORAGE' ' ' ;
# END
# LEXER: STORED
# BEGIN LEXER FOR  STORED string
<STORED> ::= 'STORED' ' ' ;
# END
# LEXER: STRING
# BEGIN LEXER FOR  STRING string
<STRING> ::= 'STRING' ' ' ;
# END
# LEXER: SUBCLASS_ORIGIN
# BEGIN LEXER FOR  SUBCLASS_ORIGIN string
<SUBCLASS_ORIGIN> ::= 'SUBCLASS_ORIGIN' ' ' ;
# END
# LEXER: SUBJECT
# BEGIN LEXER FOR  SUBJECT string
<SUBJECT> ::= 'SUBJECT' ' ' ;
# END
# LEXER: SUBPARTITION
# BEGIN LEXER FOR  SUBPARTITION string
<SUBPARTITION> ::= 'SUBPARTITION' ' ' ;
# END
# LEXER: SUBPARTITIONS
# BEGIN LEXER FOR  SUBPARTITIONS string
<SUBPARTITIONS> ::= 'SUBPARTITIONS' ' ' ;
# END
# LEXER: SUSPEND
# BEGIN LEXER FOR  SUSPEND string
<SUSPEND> ::= 'SUSPEND' ' ' ;
# END
# LEXER: SWAPS
# BEGIN LEXER FOR  SWAPS string
<SWAPS> ::= 'SWAPS' ' ' ;
# END
# LEXER: SWITCHES
# BEGIN LEXER FOR  SWITCHES string
<SWITCHES> ::= 'SWITCHES' ' ' ;
# END
# LEXER: TABLE_NAME
# BEGIN LEXER FOR  TABLE_NAME string
<TABLE_NAME> ::= 'TABLE_NAME' ' ' ;
# END
# LEXER: TABLESPACE
# BEGIN LEXER FOR  TABLESPACE string
<TABLESPACE> ::= 'TABLESPACE' ' ' ;
# END
# LEXER: TEMPORARY
# BEGIN LEXER FOR  TEMPORARY string
<TEMPORARY> ::= 'TEMPORARY' ' ' ;
# END
# LEXER: TEMPTABLE
# BEGIN LEXER FOR  TEMPTABLE string
<TEMPTABLE> ::= 'TEMPTABLE' ' ' ;
# END
# LEXER: THAN
# BEGIN LEXER FOR  THAN string
<THAN> ::= 'THAN' ' ' ;
# END
# LEXER: TRADITIONAL
# BEGIN LEXER FOR  TRADITIONAL string
<TRADITIONAL> ::= 'TRADITIONAL' ' ' ;
# END
# LEXER: TRANSACTION
# BEGIN LEXER FOR  TRANSACTION string
<TRANSACTION> ::= 'TRANSACTION' ' ' ;
# END
# LEXER: TRIGGERS
# BEGIN LEXER FOR  TRIGGERS string
<TRIGGERS> ::= 'TRIGGERS' ' ' ;
# END
# LEXER: TRUNCATE
# BEGIN LEXER FOR  TRUNCATE string
<TRUNCATE> ::= 'TRUNCATE' ' ' ;
# END
# LEXER: UNDEFINED
# BEGIN LEXER FOR  UNDEFINED string
<UNDEFINED> ::= 'UNDEFINED' ' ' ;
# END
# LEXER: UNDOFILE
# BEGIN LEXER FOR  UNDOFILE string
<UNDOFILE> ::= 'UNDOFILE' ' ' ;
# END
# LEXER: UNDO_BUFFER_SIZE
# BEGIN LEXER FOR  UNDO_BUFFER_SIZE string
<UNDO_BUFFER_SIZE> ::= 'UNDO_BUFFER_SIZE' ' ' ;
# END
# LEXER: UNINSTALL
# BEGIN LEXER FOR  UNINSTALL string
<UNINSTALL> ::= 'UNINSTALL' ' ' ;
# END
# LEXER: UNKNOWN
# BEGIN LEXER FOR  UNKNOWN string
<UNKNOWN> ::= 'UNKNOWN' ' ' ;
# END
# LEXER: UNTIL
# BEGIN LEXER FOR  UNTIL string
<UNTIL> ::= 'UNTIL' ' ' ;
# END
# LEXER: UPGRADE
# BEGIN LEXER FOR  UPGRADE string
<UPGRADE> ::= 'UPGRADE' ' ' ;
# END
# LEXER: USER
# BEGIN LEXER FOR  USER string
<USER> ::= 'USER' ' ' ;
# END
# LEXER: USE_FRM
# BEGIN LEXER FOR  USE_FRM string
<USE_FRM> ::= 'USE_FRM' ' ' ;
# END
# LEXER: USER_RESOURCES
# BEGIN LEXER FOR  USER_RESOURCES string
<USER_RESOURCES> ::= 'USER_RESOURCES' ' ' ;
# END
# LEXER: VALIDATION
# BEGIN LEXER FOR  VALIDATION string
<VALIDATION> ::= 'VALIDATION' ' ' ;
# END
# LEXER: VALUE
# BEGIN LEXER FOR  VALUE string
<VALUE> ::= 'VALUE' ' ' ;
# END
# LEXER: VARIABLES
# BEGIN LEXER FOR  VARIABLES string
<VARIABLES> ::= 'VARIABLES' ' ' ;
# END
# LEXER: VIEW
# BEGIN LEXER FOR  VIEW string
<VIEW> ::= 'VIEW' ' ' ;
# END
# LEXER: VIRTUAL
# BEGIN LEXER FOR  VIRTUAL string
<VIRTUAL> ::= 'VIRTUAL' ' ' ;
# END
# LEXER: VISIBLE
# BEGIN LEXER FOR  VISIBLE string
<VISIBLE> ::= 'VISIBLE' ' ' ;
# END
# LEXER: WAIT
# BEGIN LEXER FOR  WAIT string
<WAIT> ::= 'WAIT' ' ' ;
# END
# LEXER: WARNINGS
# BEGIN LEXER FOR  WARNINGS string
<WARNINGS> ::= 'WARNINGS' ' ' ;
# END
# LEXER: WITHOUT
# BEGIN LEXER FOR  WITHOUT string
<WITHOUT> ::= 'WITHOUT' ' ' ;
# END
# LEXER: WORK
# BEGIN LEXER FOR  WORK string
<WORK> ::= 'WORK' ' ' ;
# END
# LEXER: WRAPPER
# BEGIN LEXER FOR  WRAPPER string
<WRAPPER> ::= 'WRAPPER' ' ' ;
# END
# LEXER: X509
# BEGIN LEXER FOR  X509 string
<X509> ::= 'X509' ' ' ;
# END
# LEXER: XA
# BEGIN LEXER FOR  XA string
<XA> ::= 'XA' ' ' ;
# END
# LEXER: XML
# BEGIN LEXER FOR  XML string
<XML> ::= 'XML' ' ' ;
# END
# LEXER: EUR
# BEGIN LEXER FOR  EUR string
<EUR> ::= 'EUR' ' ' ;
# END
# LEXER: USA
# BEGIN LEXER FOR  USA string
<USA> ::= 'USA' ' ' ;
# END
# LEXER: JIS
# BEGIN LEXER FOR  JIS string
<JIS> ::= 'JIS' ' ' ;
# END
# LEXER: ISO
# BEGIN LEXER FOR  ISO string
<ISO> ::= 'ISO' ' ' ;
# END
# LEXER: INTERNAL
# BEGIN LEXER FOR  INTERNAL string
<INTERNAL> ::= 'INTERNAL' ' ' ;
# END
# LEXER: QUARTER
# BEGIN LEXER FOR  QUARTER string
<QUARTER> ::= 'QUARTER' ' ' ;
# END
# LEXER: MONTH
# BEGIN LEXER FOR  MONTH string
<MONTH> ::= 'MONTH' ' ' ;
# END
# LEXER: DAY
# BEGIN LEXER FOR  DAY string
<DAY> ::= 'DAY' ' ' ;
# END
# LEXER: HOUR
# BEGIN LEXER FOR  HOUR string
<HOUR> ::= 'HOUR' ' ' ;
# END
# LEXER: MINUTE
# BEGIN LEXER FOR  MINUTE string
<MINUTE> ::= 'MINUTE' ' ' ;
# END
# LEXER: WEEK
# BEGIN LEXER FOR  WEEK string
<WEEK> ::= 'WEEK' ' ' ;
# END
# LEXER: SECOND
# BEGIN LEXER FOR  SECOND string
<SECOND> ::= 'SECOND' ' ' ;
# END
# LEXER: MICROSECOND
# BEGIN LEXER FOR  MICROSECOND string
<MICROSECOND> ::= 'MICROSECOND' ' ' ;
# END
# LEXER: TABLES
# BEGIN LEXER FOR  TABLES string
<TABLES> ::= 'TABLES' ' ' ;
# END
# LEXER: ROUTINE
# BEGIN LEXER FOR  ROUTINE string
<ROUTINE> ::= 'ROUTINE' ' ' ;
# END
# LEXER: EXECUTE
# BEGIN LEXER FOR  EXECUTE string
<EXECUTE> ::= 'EXECUTE' ' ' ;
# END
# LEXER: FILE
# BEGIN LEXER FOR  FILE string
<FILE> ::= 'FILE' ' ' ;
# END
# LEXER: PROCESS
# BEGIN LEXER FOR  PROCESS string
<PROCESS> ::= 'PROCESS' ' ' ;
# END
# LEXER: RELOAD
# BEGIN LEXER FOR  RELOAD string
<RELOAD> ::= 'RELOAD' ' ' ;
# END
# LEXER: SHUTDOWN
# BEGIN LEXER FOR  SHUTDOWN string
<SHUTDOWN> ::= 'SHUTDOWN' ' ' ;
# END
# LEXER: SUPER
# BEGIN LEXER FOR  SUPER string
<SUPER> ::= 'SUPER' ' ' ;
# END
# LEXER: PRIVILEGES
# BEGIN LEXER FOR  PRIVILEGES string
<PRIVILEGES> ::= 'PRIVILEGES' ' ' ;
# END
# LEXER: SESSION_VARIABLES_ADMIN
# BEGIN LEXER FOR  SESSION_VARIABLES_ADMIN and
# BEGIN LEXER FOR  SESSION_VARIABLES_ADMIN ?
<SESSION_VARIABLES_ADMIN_-_1> ::= ;
# BEGIN LEXER FOR  SESSION_VARIABLES_ADMIN token
<SESSION_VARIABLES_ADMIN_-_1> ::= <QUOTE_SYMB> ;
# END
# END
# BEGIN LEXER FOR  SESSION_VARIABLES_ADMIN ?
<SESSION_VARIABLES_ADMIN_-_2> ::= ;
# BEGIN LEXER FOR  SESSION_VARIABLES_ADMIN token
<SESSION_VARIABLES_ADMIN_-_2> ::= <QUOTE_SYMB> ;
# END
# END
<SESSION_VARIABLES_ADMIN> ::= <SESSION_VARIABLES_ADMIN_-_1> 'SESSION_VARIABLES_ADMIN' <SESSION_VARIABLES_ADMIN_-_2> ' ' ;
# END
# LEXER: ARMSCII8
# BEGIN LEXER FOR  ARMSCII8 string
<ARMSCII8> ::= 'ARMSCII8' ' ' ;
# END
# LEXER: ASCII
# BEGIN LEXER FOR  ASCII string
<ASCII> ::= 'ASCII' ' ' ;
# END
# LEXER: BIG5
# BEGIN LEXER FOR  BIG5 string
<BIG5> ::= 'BIG5' ' ' ;
# END
# LEXER: CP1250
# BEGIN LEXER FOR  CP1250 string
<CP1250> ::= 'CP1250' ' ' ;
# END
# LEXER: CP1251
# BEGIN LEXER FOR  CP1251 string
<CP1251> ::= 'CP1251' ' ' ;
# END
# LEXER: CP1256
# BEGIN LEXER FOR  CP1256 string
<CP1256> ::= 'CP1256' ' ' ;
# END
# LEXER: CP1257
# BEGIN LEXER FOR  CP1257 string
<CP1257> ::= 'CP1257' ' ' ;
# END
# LEXER: CP850
# BEGIN LEXER FOR  CP850 string
<CP850> ::= 'CP850' ' ' ;
# END
# LEXER: CP852
# BEGIN LEXER FOR  CP852 string
<CP852> ::= 'CP852' ' ' ;
# END
# LEXER: CP866
# BEGIN LEXER FOR  CP866 string
<CP866> ::= 'CP866' ' ' ;
# END
# LEXER: CP932
# BEGIN LEXER FOR  CP932 string
<CP932> ::= 'CP932' ' ' ;
# END
# LEXER: DEC8
# BEGIN LEXER FOR  DEC8 string
<DEC8> ::= 'DEC8' ' ' ;
# END
# LEXER: EUCJPMS
# BEGIN LEXER FOR  EUCJPMS string
<EUCJPMS> ::= 'EUCJPMS' ' ' ;
# END
# LEXER: EUCKR
# BEGIN LEXER FOR  EUCKR string
<EUCKR> ::= 'EUCKR' ' ' ;
# END
# LEXER: GB2312
# BEGIN LEXER FOR  GB2312 string
<GB2312> ::= 'GB2312' ' ' ;
# END
# LEXER: GBK
# BEGIN LEXER FOR  GBK string
<GBK> ::= 'GBK' ' ' ;
# END
# LEXER: GEOSTD8
# BEGIN LEXER FOR  GEOSTD8 string
<GEOSTD8> ::= 'GEOSTD8' ' ' ;
# END
# LEXER: GREEK
# BEGIN LEXER FOR  GREEK string
<GREEK> ::= 'GREEK' ' ' ;
# END
# LEXER: HEBREW
# BEGIN LEXER FOR  HEBREW string
<HEBREW> ::= 'HEBREW' ' ' ;
# END
# LEXER: HP8
# BEGIN LEXER FOR  HP8 string
<HP8> ::= 'HP8' ' ' ;
# END
# LEXER: KEYBCS2
# BEGIN LEXER FOR  KEYBCS2 string
<KEYBCS2> ::= 'KEYBCS2' ' ' ;
# END
# LEXER: KOI8R
# BEGIN LEXER FOR  KOI8R string
<KOI8R> ::= 'KOI8R' ' ' ;
# END
# LEXER: KOI8U
# BEGIN LEXER FOR  KOI8U string
<KOI8U> ::= 'KOI8U' ' ' ;
# END
# LEXER: LATIN1
# BEGIN LEXER FOR  LATIN1 string
<LATIN1> ::= 'LATIN1' ' ' ;
# END
# LEXER: LATIN2
# BEGIN LEXER FOR  LATIN2 string
<LATIN2> ::= 'LATIN2' ' ' ;
# END
# LEXER: LATIN5
# BEGIN LEXER FOR  LATIN5 string
<LATIN5> ::= 'LATIN5' ' ' ;
# END
# LEXER: LATIN7
# BEGIN LEXER FOR  LATIN7 string
<LATIN7> ::= 'LATIN7' ' ' ;
# END
# LEXER: MACCE
# BEGIN LEXER FOR  MACCE string
<MACCE> ::= 'MACCE' ' ' ;
# END
# LEXER: MACROMAN
# BEGIN LEXER FOR  MACROMAN string
<MACROMAN> ::= 'MACROMAN' ' ' ;
# END
# LEXER: SJIS
# BEGIN LEXER FOR  SJIS string
<SJIS> ::= 'SJIS' ' ' ;
# END
# LEXER: SWE7
# BEGIN LEXER FOR  SWE7 string
<SWE7> ::= 'SWE7' ' ' ;
# END
# LEXER: TIS620
# BEGIN LEXER FOR  TIS620 string
<TIS620> ::= 'TIS620' ' ' ;
# END
# LEXER: UCS2
# BEGIN LEXER FOR  UCS2 string
<UCS2> ::= 'UCS2' ' ' ;
# END
# LEXER: UJIS
# BEGIN LEXER FOR  UJIS string
<UJIS> ::= 'UJIS' ' ' ;
# END
# LEXER: UTF16
# BEGIN LEXER FOR  UTF16 string
<UTF16> ::= 'UTF16' ' ' ;
# END
# LEXER: UTF16LE
# BEGIN LEXER FOR  UTF16LE string
<UTF16LE> ::= 'UTF16LE' ' ' ;
# END
# LEXER: UTF32
# BEGIN LEXER FOR  UTF32 string
<UTF32> ::= 'UTF32' ' ' ;
# END
# LEXER: UTF8
# BEGIN LEXER FOR  UTF8 string
<UTF8> ::= 'UTF8' ' ' ;
# END
# LEXER: UTF8MB3
# BEGIN LEXER FOR  UTF8MB3 string
<UTF8MB3> ::= 'UTF8MB3' ' ' ;
# END
# LEXER: UTF8MB4
# BEGIN LEXER FOR  UTF8MB4 string
<UTF8MB4> ::= 'UTF8MB4' ' ' ;
# END
# LEXER: ARCHIVE
# BEGIN LEXER FOR  ARCHIVE string
<ARCHIVE> ::= 'ARCHIVE' ' ' ;
# END
# LEXER: BLACKHOLE
# BEGIN LEXER FOR  BLACKHOLE string
<BLACKHOLE> ::= 'BLACKHOLE' ' ' ;
# END
# LEXER: CSV
# BEGIN LEXER FOR  CSV string
<CSV> ::= 'CSV' ' ' ;
# END
# LEXER: FEDERATED
# BEGIN LEXER FOR  FEDERATED string
<FEDERATED> ::= 'FEDERATED' ' ' ;
# END
# LEXER: INNODB
# BEGIN LEXER FOR  INNODB string
<INNODB> ::= 'INNODB' ' ' ;
# END
# LEXER: MEMORY
# BEGIN LEXER FOR  MEMORY string
<MEMORY> ::= 'MEMORY' ' ' ;
# END
# LEXER: MRG_MYISAM
# BEGIN LEXER FOR  MRG_MYISAM string
<MRG_MYISAM> ::= 'MRG_MYISAM' ' ' ;
# END
# LEXER: MYISAM
# BEGIN LEXER FOR  MYISAM string
<MYISAM> ::= 'MYISAM' ' ' ;
# END
# LEXER: NDB
# BEGIN LEXER FOR  NDB string
<NDB> ::= 'NDB' ' ' ;
# END
# LEXER: NDBCLUSTER
# BEGIN LEXER FOR  NDBCLUSTER string
<NDBCLUSTER> ::= 'NDBCLUSTER' ' ' ;
# END
# LEXER: PERFORMANCE_SCHEMA
# BEGIN LEXER FOR  PERFORMANCE_SCHEMA string
<PERFORMANCE_SCHEMA> ::= 'PERFORMANCE_SCHEMA' ' ' ;
# END
# LEXER: TOKUDB
# BEGIN LEXER FOR  TOKUDB string
<TOKUDB> ::= 'TOKUDB' ' ' ;
# END
# LEXER: REPEATABLE
# BEGIN LEXER FOR  REPEATABLE string
<REPEATABLE> ::= 'REPEATABLE' ' ' ;
# END
# LEXER: COMMITTED
# BEGIN LEXER FOR  COMMITTED string
<COMMITTED> ::= 'COMMITTED' ' ' ;
# END
# LEXER: UNCOMMITTED
# BEGIN LEXER FOR  UNCOMMITTED string
<UNCOMMITTED> ::= 'UNCOMMITTED' ' ' ;
# END
# LEXER: SERIALIZABLE
# BEGIN LEXER FOR  SERIALIZABLE string
<SERIALIZABLE> ::= 'SERIALIZABLE' ' ' ;
# END
# LEXER: GEOMETRYCOLLECTION
# BEGIN LEXER FOR  GEOMETRYCOLLECTION string
<GEOMETRYCOLLECTION> ::= 'GEOMETRYCOLLECTION' ' ' ;
# END
# LEXER: GEOMCOLLECTION
# BEGIN LEXER FOR  GEOMCOLLECTION string
<GEOMCOLLECTION> ::= 'GEOMCOLLECTION' ' ' ;
# END
# LEXER: GEOMETRY
# BEGIN LEXER FOR  GEOMETRY string
<GEOMETRY> ::= 'GEOMETRY' ' ' ;
# END
# LEXER: LINESTRING
# BEGIN LEXER FOR  LINESTRING string
<LINESTRING> ::= 'LINESTRING' ' ' ;
# END
# LEXER: MULTILINESTRING
# BEGIN LEXER FOR  MULTILINESTRING string
<MULTILINESTRING> ::= 'MULTILINESTRING' ' ' ;
# END
# LEXER: MULTIPOINT
# BEGIN LEXER FOR  MULTIPOINT string
<MULTIPOINT> ::= 'MULTIPOINT' ' ' ;
# END
# LEXER: MULTIPOLYGON
# BEGIN LEXER FOR  MULTIPOLYGON string
<MULTIPOLYGON> ::= 'MULTIPOLYGON' ' ' ;
# END
# LEXER: POINT
# BEGIN LEXER FOR  POINT string
<POINT> ::= 'POINT' ' ' ;
# END
# LEXER: POLYGON
# BEGIN LEXER FOR  POLYGON string
<POLYGON> ::= 'POLYGON' ' ' ;
# END
# LEXER: ABS
# BEGIN LEXER FOR  ABS string
<ABS> ::= 'ABS' ' ' ;
# END
# LEXER: ACOS
# BEGIN LEXER FOR  ACOS string
<ACOS> ::= 'ACOS' ' ' ;
# END
# LEXER: ADDDATE
# BEGIN LEXER FOR  ADDDATE string
<ADDDATE> ::= 'ADDDATE' ' ' ;
# END
# LEXER: ADDTIME
# BEGIN LEXER FOR  ADDTIME string
<ADDTIME> ::= 'ADDTIME' ' ' ;
# END
# LEXER: AES_DECRYPT
# BEGIN LEXER FOR  AES_DECRYPT string
<AES_DECRYPT> ::= 'AES_DECRYPT' ' ' ;
# END
# LEXER: AES_ENCRYPT
# BEGIN LEXER FOR  AES_ENCRYPT string
<AES_ENCRYPT> ::= 'AES_ENCRYPT' ' ' ;
# END
# LEXER: AREA
# BEGIN LEXER FOR  AREA string
<AREA> ::= 'AREA' ' ' ;
# END
# LEXER: ASBINARY
# BEGIN LEXER FOR  ASBINARY string
<ASBINARY> ::= 'ASBINARY' ' ' ;
# END
# LEXER: ASIN
# BEGIN LEXER FOR  ASIN string
<ASIN> ::= 'ASIN' ' ' ;
# END
# LEXER: ASTEXT
# BEGIN LEXER FOR  ASTEXT string
<ASTEXT> ::= 'ASTEXT' ' ' ;
# END
# LEXER: ASWKB
# BEGIN LEXER FOR  ASWKB string
<ASWKB> ::= 'ASWKB' ' ' ;
# END
# LEXER: ASWKT
# BEGIN LEXER FOR  ASWKT string
<ASWKT> ::= 'ASWKT' ' ' ;
# END
# LEXER: ASYMMETRIC_DECRYPT
# BEGIN LEXER FOR  ASYMMETRIC_DECRYPT string
<ASYMMETRIC_DECRYPT> ::= 'ASYMMETRIC_DECRYPT' ' ' ;
# END
# LEXER: ASYMMETRIC_DERIVE
# BEGIN LEXER FOR  ASYMMETRIC_DERIVE string
<ASYMMETRIC_DERIVE> ::= 'ASYMMETRIC_DERIVE' ' ' ;
# END
# LEXER: ASYMMETRIC_ENCRYPT
# BEGIN LEXER FOR  ASYMMETRIC_ENCRYPT string
<ASYMMETRIC_ENCRYPT> ::= 'ASYMMETRIC_ENCRYPT' ' ' ;
# END
# LEXER: ASYMMETRIC_SIGN
# BEGIN LEXER FOR  ASYMMETRIC_SIGN string
<ASYMMETRIC_SIGN> ::= 'ASYMMETRIC_SIGN' ' ' ;
# END
# LEXER: ASYMMETRIC_VERIFY
# BEGIN LEXER FOR  ASYMMETRIC_VERIFY string
<ASYMMETRIC_VERIFY> ::= 'ASYMMETRIC_VERIFY' ' ' ;
# END
# LEXER: ATAN
# BEGIN LEXER FOR  ATAN string
<ATAN> ::= 'ATAN' ' ' ;
# END
# LEXER: ATAN2
# BEGIN LEXER FOR  ATAN2 string
<ATAN2> ::= 'ATAN2' ' ' ;
# END
# LEXER: BENCHMARK
# BEGIN LEXER FOR  BENCHMARK string
<BENCHMARK> ::= 'BENCHMARK' ' ' ;
# END
# LEXER: BIN
# BEGIN LEXER FOR  BIN string
<BIN> ::= 'BIN' ' ' ;
# END
# LEXER: BIT_COUNT
# BEGIN LEXER FOR  BIT_COUNT string
<BIT_COUNT> ::= 'BIT_COUNT' ' ' ;
# END
# LEXER: BIT_LENGTH
# BEGIN LEXER FOR  BIT_LENGTH string
<BIT_LENGTH> ::= 'BIT_LENGTH' ' ' ;
# END
# LEXER: BUFFER
# BEGIN LEXER FOR  BUFFER string
<BUFFER> ::= 'BUFFER' ' ' ;
# END
# LEXER: CATALOG_NAME
# BEGIN LEXER FOR  CATALOG_NAME string
<CATALOG_NAME> ::= 'CATALOG_NAME' ' ' ;
# END
# LEXER: CEIL
# BEGIN LEXER FOR  CEIL string
<CEIL> ::= 'CEIL' ' ' ;
# END
# LEXER: CEILING
# BEGIN LEXER FOR  CEILING string
<CEILING> ::= 'CEILING' ' ' ;
# END
# LEXER: CENTROID
# BEGIN LEXER FOR  CENTROID string
<CENTROID> ::= 'CENTROID' ' ' ;
# END
# LEXER: CHARACTER_LENGTH
# BEGIN LEXER FOR  CHARACTER_LENGTH string
<CHARACTER_LENGTH> ::= 'CHARACTER_LENGTH' ' ' ;
# END
# LEXER: CHARSET
# BEGIN LEXER FOR  CHARSET string
<CHARSET> ::= 'CHARSET' ' ' ;
# END
# LEXER: CHAR_LENGTH
# BEGIN LEXER FOR  CHAR_LENGTH string
<CHAR_LENGTH> ::= 'CHAR_LENGTH' ' ' ;
# END
# LEXER: COERCIBILITY
# BEGIN LEXER FOR  COERCIBILITY string
<COERCIBILITY> ::= 'COERCIBILITY' ' ' ;
# END
# LEXER: COLLATION
# BEGIN LEXER FOR  COLLATION string
<COLLATION> ::= 'COLLATION' ' ' ;
# END
# LEXER: COMPRESS
# BEGIN LEXER FOR  COMPRESS string
<COMPRESS> ::= 'COMPRESS' ' ' ;
# END
# LEXER: CONCAT
# BEGIN LEXER FOR  CONCAT string
<CONCAT> ::= 'CONCAT' ' ' ;
# END
# LEXER: CONCAT_WS
# BEGIN LEXER FOR  CONCAT_WS string
<CONCAT_WS> ::= 'CONCAT_WS' ' ' ;
# END
# LEXER: CONNECTION_ID
# BEGIN LEXER FOR  CONNECTION_ID string
<CONNECTION_ID> ::= 'CONNECTION_ID' ' ' ;
# END
# LEXER: CONV
# BEGIN LEXER FOR  CONV string
<CONV> ::= 'CONV' ' ' ;
# END
# LEXER: CONVERT_TZ
# BEGIN LEXER FOR  CONVERT_TZ string
<CONVERT_TZ> ::= 'CONVERT_TZ' ' ' ;
# END
# LEXER: COS
# BEGIN LEXER FOR  COS string
<COS> ::= 'COS' ' ' ;
# END
# LEXER: COT
# BEGIN LEXER FOR  COT string
<COT> ::= 'COT' ' ' ;
# END
# LEXER: CRC32
# BEGIN LEXER FOR  CRC32 string
<CRC32> ::= 'CRC32' ' ' ;
# END
# LEXER: CREATE_ASYMMETRIC_PRIV_KEY
# BEGIN LEXER FOR  CREATE_ASYMMETRIC_PRIV_KEY string
<CREATE_ASYMMETRIC_PRIV_KEY> ::= 'CREATE_ASYMMETRIC_PRIV_KEY' ' ' ;
# END
# LEXER: CREATE_ASYMMETRIC_PUB_KEY
# BEGIN LEXER FOR  CREATE_ASYMMETRIC_PUB_KEY string
<CREATE_ASYMMETRIC_PUB_KEY> ::= 'CREATE_ASYMMETRIC_PUB_KEY' ' ' ;
# END
# LEXER: CREATE_DH_PARAMETERS
# BEGIN LEXER FOR  CREATE_DH_PARAMETERS string
<CREATE_DH_PARAMETERS> ::= 'CREATE_DH_PARAMETERS' ' ' ;
# END
# LEXER: CREATE_DIGEST
# BEGIN LEXER FOR  CREATE_DIGEST string
<CREATE_DIGEST> ::= 'CREATE_DIGEST' ' ' ;
# END
# LEXER: CROSSES
# BEGIN LEXER FOR  CROSSES string
<CROSSES> ::= 'CROSSES' ' ' ;
# END
# LEXER: DATEDIFF
# BEGIN LEXER FOR  DATEDIFF string
<DATEDIFF> ::= 'DATEDIFF' ' ' ;
# END
# LEXER: DATE_FORMAT
# BEGIN LEXER FOR  DATE_FORMAT string
<DATE_FORMAT> ::= 'DATE_FORMAT' ' ' ;
# END
# LEXER: DAYNAME
# BEGIN LEXER FOR  DAYNAME string
<DAYNAME> ::= 'DAYNAME' ' ' ;
# END
# LEXER: DAYOFMONTH
# BEGIN LEXER FOR  DAYOFMONTH string
<DAYOFMONTH> ::= 'DAYOFMONTH' ' ' ;
# END
# LEXER: DAYOFWEEK
# BEGIN LEXER FOR  DAYOFWEEK string
<DAYOFWEEK> ::= 'DAYOFWEEK' ' ' ;
# END
# LEXER: DAYOFYEAR
# BEGIN LEXER FOR  DAYOFYEAR string
<DAYOFYEAR> ::= 'DAYOFYEAR' ' ' ;
# END
# LEXER: DECODE
# BEGIN LEXER FOR  DECODE string
<DECODE> ::= 'DECODE' ' ' ;
# END
# LEXER: DEGREES
# BEGIN LEXER FOR  DEGREES string
<DEGREES> ::= 'DEGREES' ' ' ;
# END
# LEXER: DES_DECRYPT
# BEGIN LEXER FOR  DES_DECRYPT string
<DES_DECRYPT> ::= 'DES_DECRYPT' ' ' ;
# END
# LEXER: DES_ENCRYPT
# BEGIN LEXER FOR  DES_ENCRYPT string
<DES_ENCRYPT> ::= 'DES_ENCRYPT' ' ' ;
# END
# LEXER: DIMENSION
# BEGIN LEXER FOR  DIMENSION string
<DIMENSION> ::= 'DIMENSION' ' ' ;
# END
# LEXER: DISJOINT
# BEGIN LEXER FOR  DISJOINT string
<DISJOINT> ::= 'DISJOINT' ' ' ;
# END
# LEXER: ELT
# BEGIN LEXER FOR  ELT string
<ELT> ::= 'ELT' ' ' ;
# END
# LEXER: ENCODE
# BEGIN LEXER FOR  ENCODE string
<ENCODE> ::= 'ENCODE' ' ' ;
# END
# LEXER: ENCRYPT
# BEGIN LEXER FOR  ENCRYPT string
<ENCRYPT> ::= 'ENCRYPT' ' ' ;
# END
# LEXER: ENDPOINT
# BEGIN LEXER FOR  ENDPOINT string
<ENDPOINT> ::= 'ENDPOINT' ' ' ;
# END
# LEXER: ENVELOPE
# BEGIN LEXER FOR  ENVELOPE string
<ENVELOPE> ::= 'ENVELOPE' ' ' ;
# END
# LEXER: EQUALS
# BEGIN LEXER FOR  EQUALS string
<EQUALS> ::= 'EQUALS' ' ' ;
# END
# LEXER: EXP
# BEGIN LEXER FOR  EXP string
<EXP> ::= 'EXP' ' ' ;
# END
# LEXER: EXPORT_SET
# BEGIN LEXER FOR  EXPORT_SET string
<EXPORT_SET> ::= 'EXPORT_SET' ' ' ;
# END
# LEXER: EXTERIORRING
# BEGIN LEXER FOR  EXTERIORRING string
<EXTERIORRING> ::= 'EXTERIORRING' ' ' ;
# END
# LEXER: EXTRACTVALUE
# BEGIN LEXER FOR  EXTRACTVALUE string
<EXTRACTVALUE> ::= 'EXTRACTVALUE' ' ' ;
# END
# LEXER: FIELD
# BEGIN LEXER FOR  FIELD string
<FIELD> ::= 'FIELD' ' ' ;
# END
# LEXER: FIND_IN_SET
# BEGIN LEXER FOR  FIND_IN_SET string
<FIND_IN_SET> ::= 'FIND_IN_SET' ' ' ;
# END
# LEXER: FLOOR
# BEGIN LEXER FOR  FLOOR string
<FLOOR> ::= 'FLOOR' ' ' ;
# END
# LEXER: FORMAT
# BEGIN LEXER FOR  FORMAT string
<FORMAT> ::= 'FORMAT' ' ' ;
# END
# LEXER: FOUND_ROWS
# BEGIN LEXER FOR  FOUND_ROWS string
<FOUND_ROWS> ::= 'FOUND_ROWS' ' ' ;
# END
# LEXER: FROM_BASE64
# BEGIN LEXER FOR  FROM_BASE64 string
<FROM_BASE64> ::= 'FROM_BASE64' ' ' ;
# END
# LEXER: FROM_DAYS
# BEGIN LEXER FOR  FROM_DAYS string
<FROM_DAYS> ::= 'FROM_DAYS' ' ' ;
# END
# LEXER: FROM_UNIXTIME
# BEGIN LEXER FOR  FROM_UNIXTIME string
<FROM_UNIXTIME> ::= 'FROM_UNIXTIME' ' ' ;
# END
# LEXER: GEOMCOLLFROMTEXT
# BEGIN LEXER FOR  GEOMCOLLFROMTEXT string
<GEOMCOLLFROMTEXT> ::= 'GEOMCOLLFROMTEXT' ' ' ;
# END
# LEXER: GEOMCOLLFROMWKB
# BEGIN LEXER FOR  GEOMCOLLFROMWKB string
<GEOMCOLLFROMWKB> ::= 'GEOMCOLLFROMWKB' ' ' ;
# END
# LEXER: GEOMETRYCOLLECTIONFROMTEXT
# BEGIN LEXER FOR  GEOMETRYCOLLECTIONFROMTEXT string
<GEOMETRYCOLLECTIONFROMTEXT> ::= 'GEOMETRYCOLLECTIONFROMTEXT' ' ' ;
# END
# LEXER: GEOMETRYCOLLECTIONFROMWKB
# BEGIN LEXER FOR  GEOMETRYCOLLECTIONFROMWKB string
<GEOMETRYCOLLECTIONFROMWKB> ::= 'GEOMETRYCOLLECTIONFROMWKB' ' ' ;
# END
# LEXER: GEOMETRYFROMTEXT
# BEGIN LEXER FOR  GEOMETRYFROMTEXT string
<GEOMETRYFROMTEXT> ::= 'GEOMETRYFROMTEXT' ' ' ;
# END
# LEXER: GEOMETRYFROMWKB
# BEGIN LEXER FOR  GEOMETRYFROMWKB string
<GEOMETRYFROMWKB> ::= 'GEOMETRYFROMWKB' ' ' ;
# END
# LEXER: GEOMETRYN
# BEGIN LEXER FOR  GEOMETRYN string
<GEOMETRYN> ::= 'GEOMETRYN' ' ' ;
# END
# LEXER: GEOMETRYTYPE
# BEGIN LEXER FOR  GEOMETRYTYPE string
<GEOMETRYTYPE> ::= 'GEOMETRYTYPE' ' ' ;
# END
# LEXER: GEOMFROMTEXT
# BEGIN LEXER FOR  GEOMFROMTEXT string
<GEOMFROMTEXT> ::= 'GEOMFROMTEXT' ' ' ;
# END
# LEXER: GEOMFROMWKB
# BEGIN LEXER FOR  GEOMFROMWKB string
<GEOMFROMWKB> ::= 'GEOMFROMWKB' ' ' ;
# END
# LEXER: GET_FORMAT
# BEGIN LEXER FOR  GET_FORMAT string
<GET_FORMAT> ::= 'GET_FORMAT' ' ' ;
# END
# LEXER: GET_LOCK
# BEGIN LEXER FOR  GET_LOCK string
<GET_LOCK> ::= 'GET_LOCK' ' ' ;
# END
# LEXER: GLENGTH
# BEGIN LEXER FOR  GLENGTH string
<GLENGTH> ::= 'GLENGTH' ' ' ;
# END
# LEXER: GREATEST
# BEGIN LEXER FOR  GREATEST string
<GREATEST> ::= 'GREATEST' ' ' ;
# END
# LEXER: GTID_SUBSET
# BEGIN LEXER FOR  GTID_SUBSET string
<GTID_SUBSET> ::= 'GTID_SUBSET' ' ' ;
# END
# LEXER: GTID_SUBTRACT
# BEGIN LEXER FOR  GTID_SUBTRACT string
<GTID_SUBTRACT> ::= 'GTID_SUBTRACT' ' ' ;
# END
# LEXER: HEX
# BEGIN LEXER FOR  HEX string
<HEX> ::= 'HEX' ' ' ;
# END
# LEXER: IFNULL
# BEGIN LEXER FOR  IFNULL string
<IFNULL> ::= 'IFNULL' ' ' ;
# END
# LEXER: INET6_ATON
# BEGIN LEXER FOR  INET6_ATON string
<INET6_ATON> ::= 'INET6_ATON' ' ' ;
# END
# LEXER: INET6_NTOA
# BEGIN LEXER FOR  INET6_NTOA string
<INET6_NTOA> ::= 'INET6_NTOA' ' ' ;
# END
# LEXER: INET_ATON
# BEGIN LEXER FOR  INET_ATON string
<INET_ATON> ::= 'INET_ATON' ' ' ;
# END
# LEXER: INET_NTOA
# BEGIN LEXER FOR  INET_NTOA string
<INET_NTOA> ::= 'INET_NTOA' ' ' ;
# END
# LEXER: INSTR
# BEGIN LEXER FOR  INSTR string
<INSTR> ::= 'INSTR' ' ' ;
# END
# LEXER: INTERIORRINGN
# BEGIN LEXER FOR  INTERIORRINGN string
<INTERIORRINGN> ::= 'INTERIORRINGN' ' ' ;
# END
# LEXER: INTERSECTS
# BEGIN LEXER FOR  INTERSECTS string
<INTERSECTS> ::= 'INTERSECTS' ' ' ;
# END
# LEXER: ISCLOSED
# BEGIN LEXER FOR  ISCLOSED string
<ISCLOSED> ::= 'ISCLOSED' ' ' ;
# END
# LEXER: ISEMPTY
# BEGIN LEXER FOR  ISEMPTY string
<ISEMPTY> ::= 'ISEMPTY' ' ' ;
# END
# LEXER: ISNULL
# BEGIN LEXER FOR  ISNULL string
<ISNULL> ::= 'ISNULL' ' ' ;
# END
# LEXER: ISSIMPLE
# BEGIN LEXER FOR  ISSIMPLE string
<ISSIMPLE> ::= 'ISSIMPLE' ' ' ;
# END
# LEXER: IS_FREE_LOCK
# BEGIN LEXER FOR  IS_FREE_LOCK string
<IS_FREE_LOCK> ::= 'IS_FREE_LOCK' ' ' ;
# END
# LEXER: IS_IPV4
# BEGIN LEXER FOR  IS_IPV4 string
<IS_IPV4> ::= 'IS_IPV4' ' ' ;
# END
# LEXER: IS_IPV4_COMPAT
# BEGIN LEXER FOR  IS_IPV4_COMPAT string
<IS_IPV4_COMPAT> ::= 'IS_IPV4_COMPAT' ' ' ;
# END
# LEXER: IS_IPV4_MAPPED
# BEGIN LEXER FOR  IS_IPV4_MAPPED string
<IS_IPV4_MAPPED> ::= 'IS_IPV4_MAPPED' ' ' ;
# END
# LEXER: IS_IPV6
# BEGIN LEXER FOR  IS_IPV6 string
<IS_IPV6> ::= 'IS_IPV6' ' ' ;
# END
# LEXER: IS_USED_LOCK
# BEGIN LEXER FOR  IS_USED_LOCK string
<IS_USED_LOCK> ::= 'IS_USED_LOCK' ' ' ;
# END
# LEXER: LAST_INSERT_ID
# BEGIN LEXER FOR  LAST_INSERT_ID string
<LAST_INSERT_ID> ::= 'LAST_INSERT_ID' ' ' ;
# END
# LEXER: LCASE
# BEGIN LEXER FOR  LCASE string
<LCASE> ::= 'LCASE' ' ' ;
# END
# LEXER: LEAST
# BEGIN LEXER FOR  LEAST string
<LEAST> ::= 'LEAST' ' ' ;
# END
# LEXER: LENGTH
# BEGIN LEXER FOR  LENGTH string
<LENGTH> ::= 'LENGTH' ' ' ;
# END
# LEXER: LINEFROMTEXT
# BEGIN LEXER FOR  LINEFROMTEXT string
<LINEFROMTEXT> ::= 'LINEFROMTEXT' ' ' ;
# END
# LEXER: LINEFROMWKB
# BEGIN LEXER FOR  LINEFROMWKB string
<LINEFROMWKB> ::= 'LINEFROMWKB' ' ' ;
# END
# LEXER: LINESTRINGFROMTEXT
# BEGIN LEXER FOR  LINESTRINGFROMTEXT string
<LINESTRINGFROMTEXT> ::= 'LINESTRINGFROMTEXT' ' ' ;
# END
# LEXER: LINESTRINGFROMWKB
# BEGIN LEXER FOR  LINESTRINGFROMWKB string
<LINESTRINGFROMWKB> ::= 'LINESTRINGFROMWKB' ' ' ;
# END
# LEXER: LN
# BEGIN LEXER FOR  LN string
<LN> ::= 'LN' ' ' ;
# END
# LEXER: LOAD_FILE
# BEGIN LEXER FOR  LOAD_FILE string
<LOAD_FILE> ::= 'LOAD_FILE' ' ' ;
# END
# LEXER: LOCATE
# BEGIN LEXER FOR  LOCATE string
<LOCATE> ::= 'LOCATE' ' ' ;
# END
# LEXER: LOG
# BEGIN LEXER FOR  LOG string
<LOG> ::= 'LOG' ' ' ;
# END
# LEXER: LOG10
# BEGIN LEXER FOR  LOG10 string
<LOG10> ::= 'LOG10' ' ' ;
# END
# LEXER: LOG2
# BEGIN LEXER FOR  LOG2 string
<LOG2> ::= 'LOG2' ' ' ;
# END
# LEXER: LOWER
# BEGIN LEXER FOR  LOWER string
<LOWER> ::= 'LOWER' ' ' ;
# END
# LEXER: LPAD
# BEGIN LEXER FOR  LPAD string
<LPAD> ::= 'LPAD' ' ' ;
# END
# LEXER: LTRIM
# BEGIN LEXER FOR  LTRIM string
<LTRIM> ::= 'LTRIM' ' ' ;
# END
# LEXER: MAKEDATE
# BEGIN LEXER FOR  MAKEDATE string
<MAKEDATE> ::= 'MAKEDATE' ' ' ;
# END
# LEXER: MAKETIME
# BEGIN LEXER FOR  MAKETIME string
<MAKETIME> ::= 'MAKETIME' ' ' ;
# END
# LEXER: MAKE_SET
# BEGIN LEXER FOR  MAKE_SET string
<MAKE_SET> ::= 'MAKE_SET' ' ' ;
# END
# LEXER: MASTER_POS_WAIT
# BEGIN LEXER FOR  MASTER_POS_WAIT string
<MASTER_POS_WAIT> ::= 'MASTER_POS_WAIT' ' ' ;
# END
# LEXER: MBRCONTAINS
# BEGIN LEXER FOR  MBRCONTAINS string
<MBRCONTAINS> ::= 'MBRCONTAINS' ' ' ;
# END
# LEXER: MBRDISJOINT
# BEGIN LEXER FOR  MBRDISJOINT string
<MBRDISJOINT> ::= 'MBRDISJOINT' ' ' ;
# END
# LEXER: MBREQUAL
# BEGIN LEXER FOR  MBREQUAL string
<MBREQUAL> ::= 'MBREQUAL' ' ' ;
# END
# LEXER: MBRINTERSECTS
# BEGIN LEXER FOR  MBRINTERSECTS string
<MBRINTERSECTS> ::= 'MBRINTERSECTS' ' ' ;
# END
# LEXER: MBROVERLAPS
# BEGIN LEXER FOR  MBROVERLAPS string
<MBROVERLAPS> ::= 'MBROVERLAPS' ' ' ;
# END
# LEXER: MBRTOUCHES
# BEGIN LEXER FOR  MBRTOUCHES string
<MBRTOUCHES> ::= 'MBRTOUCHES' ' ' ;
# END
# LEXER: MBRWITHIN
# BEGIN LEXER FOR  MBRWITHIN string
<MBRWITHIN> ::= 'MBRWITHIN' ' ' ;
# END
# LEXER: MD5
# BEGIN LEXER FOR  MD5 string
<MD5> ::= 'MD5' ' ' ;
# END
# LEXER: MLINEFROMTEXT
# BEGIN LEXER FOR  MLINEFROMTEXT string
<MLINEFROMTEXT> ::= 'MLINEFROMTEXT' ' ' ;
# END
# LEXER: MLINEFROMWKB
# BEGIN LEXER FOR  MLINEFROMWKB string
<MLINEFROMWKB> ::= 'MLINEFROMWKB' ' ' ;
# END
# LEXER: MONTHNAME
# BEGIN LEXER FOR  MONTHNAME string
<MONTHNAME> ::= 'MONTHNAME' ' ' ;
# END
# LEXER: MPOINTFROMTEXT
# BEGIN LEXER FOR  MPOINTFROMTEXT string
<MPOINTFROMTEXT> ::= 'MPOINTFROMTEXT' ' ' ;
# END
# LEXER: MPOINTFROMWKB
# BEGIN LEXER FOR  MPOINTFROMWKB string
<MPOINTFROMWKB> ::= 'MPOINTFROMWKB' ' ' ;
# END
# LEXER: MPOLYFROMTEXT
# BEGIN LEXER FOR  MPOLYFROMTEXT string
<MPOLYFROMTEXT> ::= 'MPOLYFROMTEXT' ' ' ;
# END
# LEXER: MPOLYFROMWKB
# BEGIN LEXER FOR  MPOLYFROMWKB string
<MPOLYFROMWKB> ::= 'MPOLYFROMWKB' ' ' ;
# END
# LEXER: MULTILINESTRINGFROMTEXT
# BEGIN LEXER FOR  MULTILINESTRINGFROMTEXT string
<MULTILINESTRINGFROMTEXT> ::= 'MULTILINESTRINGFROMTEXT' ' ' ;
# END
# LEXER: MULTILINESTRINGFROMWKB
# BEGIN LEXER FOR  MULTILINESTRINGFROMWKB string
<MULTILINESTRINGFROMWKB> ::= 'MULTILINESTRINGFROMWKB' ' ' ;
# END
# LEXER: MULTIPOINTFROMTEXT
# BEGIN LEXER FOR  MULTIPOINTFROMTEXT string
<MULTIPOINTFROMTEXT> ::= 'MULTIPOINTFROMTEXT' ' ' ;
# END
# LEXER: MULTIPOINTFROMWKB
# BEGIN LEXER FOR  MULTIPOINTFROMWKB string
<MULTIPOINTFROMWKB> ::= 'MULTIPOINTFROMWKB' ' ' ;
# END
# LEXER: MULTIPOLYGONFROMTEXT
# BEGIN LEXER FOR  MULTIPOLYGONFROMTEXT string
<MULTIPOLYGONFROMTEXT> ::= 'MULTIPOLYGONFROMTEXT' ' ' ;
# END
# LEXER: MULTIPOLYGONFROMWKB
# BEGIN LEXER FOR  MULTIPOLYGONFROMWKB string
<MULTIPOLYGONFROMWKB> ::= 'MULTIPOLYGONFROMWKB' ' ' ;
# END
# LEXER: NAME_CONST
# BEGIN LEXER FOR  NAME_CONST string
<NAME_CONST> ::= 'NAME_CONST' ' ' ;
# END
# LEXER: NULLIF
# BEGIN LEXER FOR  NULLIF string
<NULLIF> ::= 'NULLIF' ' ' ;
# END
# LEXER: NUMGEOMETRIES
# BEGIN LEXER FOR  NUMGEOMETRIES string
<NUMGEOMETRIES> ::= 'NUMGEOMETRIES' ' ' ;
# END
# LEXER: NUMINTERIORRINGS
# BEGIN LEXER FOR  NUMINTERIORRINGS string
<NUMINTERIORRINGS> ::= 'NUMINTERIORRINGS' ' ' ;
# END
# LEXER: NUMPOINTS
# BEGIN LEXER FOR  NUMPOINTS string
<NUMPOINTS> ::= 'NUMPOINTS' ' ' ;
# END
# LEXER: OCT
# BEGIN LEXER FOR  OCT string
<OCT> ::= 'OCT' ' ' ;
# END
# LEXER: OCTET_LENGTH
# BEGIN LEXER FOR  OCTET_LENGTH string
<OCTET_LENGTH> ::= 'OCTET_LENGTH' ' ' ;
# END
# LEXER: ORD
# BEGIN LEXER FOR  ORD string
<ORD> ::= 'ORD' ' ' ;
# END
# LEXER: OVERLAPS
# BEGIN LEXER FOR  OVERLAPS string
<OVERLAPS> ::= 'OVERLAPS' ' ' ;
# END
# LEXER: PERIOD_ADD
# BEGIN LEXER FOR  PERIOD_ADD string
<PERIOD_ADD> ::= 'PERIOD_ADD' ' ' ;
# END
# LEXER: PERIOD_DIFF
# BEGIN LEXER FOR  PERIOD_DIFF string
<PERIOD_DIFF> ::= 'PERIOD_DIFF' ' ' ;
# END
# LEXER: PI
# BEGIN LEXER FOR  PI string
<PI> ::= 'PI' ' ' ;
# END
# LEXER: POINTFROMTEXT
# BEGIN LEXER FOR  POINTFROMTEXT string
<POINTFROMTEXT> ::= 'POINTFROMTEXT' ' ' ;
# END
# LEXER: POINTFROMWKB
# BEGIN LEXER FOR  POINTFROMWKB string
<POINTFROMWKB> ::= 'POINTFROMWKB' ' ' ;
# END
# LEXER: POINTN
# BEGIN LEXER FOR  POINTN string
<POINTN> ::= 'POINTN' ' ' ;
# END
# LEXER: POLYFROMTEXT
# BEGIN LEXER FOR  POLYFROMTEXT string
<POLYFROMTEXT> ::= 'POLYFROMTEXT' ' ' ;
# END
# LEXER: POLYFROMWKB
# BEGIN LEXER FOR  POLYFROMWKB string
<POLYFROMWKB> ::= 'POLYFROMWKB' ' ' ;
# END
# LEXER: POLYGONFROMTEXT
# BEGIN LEXER FOR  POLYGONFROMTEXT string
<POLYGONFROMTEXT> ::= 'POLYGONFROMTEXT' ' ' ;
# END
# LEXER: POLYGONFROMWKB
# BEGIN LEXER FOR  POLYGONFROMWKB string
<POLYGONFROMWKB> ::= 'POLYGONFROMWKB' ' ' ;
# END
# LEXER: POW
# BEGIN LEXER FOR  POW string
<POW> ::= 'POW' ' ' ;
# END
# LEXER: POWER
# BEGIN LEXER FOR  POWER string
<POWER> ::= 'POWER' ' ' ;
# END
# LEXER: QUOTE
# BEGIN LEXER FOR  QUOTE string
<QUOTE> ::= 'QUOTE' ' ' ;
# END
# LEXER: RADIANS
# BEGIN LEXER FOR  RADIANS string
<RADIANS> ::= 'RADIANS' ' ' ;
# END
# LEXER: RAND
# BEGIN LEXER FOR  RAND string
<RAND> ::= 'RAND' ' ' ;
# END
# LEXER: RANDOM_BYTES
# BEGIN LEXER FOR  RANDOM_BYTES string
<RANDOM_BYTES> ::= 'RANDOM_BYTES' ' ' ;
# END
# LEXER: RELEASE_LOCK
# BEGIN LEXER FOR  RELEASE_LOCK string
<RELEASE_LOCK> ::= 'RELEASE_LOCK' ' ' ;
# END
# LEXER: REVERSE
# BEGIN LEXER FOR  REVERSE string
<REVERSE> ::= 'REVERSE' ' ' ;
# END
# LEXER: ROUND
# BEGIN LEXER FOR  ROUND string
<ROUND> ::= 'ROUND' ' ' ;
# END
# LEXER: ROW_COUNT
# BEGIN LEXER FOR  ROW_COUNT string
<ROW_COUNT> ::= 'ROW_COUNT' ' ' ;
# END
# LEXER: RPAD
# BEGIN LEXER FOR  RPAD string
<RPAD> ::= 'RPAD' ' ' ;
# END
# LEXER: RTRIM
# BEGIN LEXER FOR  RTRIM string
<RTRIM> ::= 'RTRIM' ' ' ;
# END
# LEXER: SEC_TO_TIME
# BEGIN LEXER FOR  SEC_TO_TIME string
<SEC_TO_TIME> ::= 'SEC_TO_TIME' ' ' ;
# END
# LEXER: SESSION_USER
# BEGIN LEXER FOR  SESSION_USER string
<SESSION_USER> ::= 'SESSION_USER' ' ' ;
# END
# LEXER: SHA
# BEGIN LEXER FOR  SHA string
<SHA> ::= 'SHA' ' ' ;
# END
# LEXER: SHA1
# BEGIN LEXER FOR  SHA1 string
<SHA1> ::= 'SHA1' ' ' ;
# END
# LEXER: SHA2
# BEGIN LEXER FOR  SHA2 string
<SHA2> ::= 'SHA2' ' ' ;
# END
# LEXER: SCHEMA_NAME
# BEGIN LEXER FOR  SCHEMA_NAME string
<SCHEMA_NAME> ::= 'SCHEMA_NAME' ' ' ;
# END
# LEXER: SIGN
# BEGIN LEXER FOR  SIGN string
<SIGN> ::= 'SIGN' ' ' ;
# END
# LEXER: SIN
# BEGIN LEXER FOR  SIN string
<SIN> ::= 'SIN' ' ' ;
# END
# LEXER: SLEEP
# BEGIN LEXER FOR  SLEEP string
<SLEEP> ::= 'SLEEP' ' ' ;
# END
# LEXER: SOUNDEX
# BEGIN LEXER FOR  SOUNDEX string
<SOUNDEX> ::= 'SOUNDEX' ' ' ;
# END
# LEXER: SQL_THREAD_WAIT_AFTER_GTIDS
# BEGIN LEXER FOR  SQL_THREAD_WAIT_AFTER_GTIDS string
<SQL_THREAD_WAIT_AFTER_GTIDS> ::= 'SQL_THREAD_WAIT_AFTER_GTIDS' ' ' ;
# END
# LEXER: SQRT
# BEGIN LEXER FOR  SQRT string
<SQRT> ::= 'SQRT' ' ' ;
# END
# LEXER: SRID
# BEGIN LEXER FOR  SRID string
<SRID> ::= 'SRID' ' ' ;
# END
# LEXER: STARTPOINT
# BEGIN LEXER FOR  STARTPOINT string
<STARTPOINT> ::= 'STARTPOINT' ' ' ;
# END
# LEXER: STRCMP
# BEGIN LEXER FOR  STRCMP string
<STRCMP> ::= 'STRCMP' ' ' ;
# END
# LEXER: STR_TO_DATE
# BEGIN LEXER FOR  STR_TO_DATE string
<STR_TO_DATE> ::= 'STR_TO_DATE' ' ' ;
# END
# LEXER: ST_AREA
# BEGIN LEXER FOR  ST_AREA string
<ST_AREA> ::= 'ST_AREA' ' ' ;
# END
# LEXER: ST_ASBINARY
# BEGIN LEXER FOR  ST_ASBINARY string
<ST_ASBINARY> ::= 'ST_ASBINARY' ' ' ;
# END
# LEXER: ST_ASTEXT
# BEGIN LEXER FOR  ST_ASTEXT string
<ST_ASTEXT> ::= 'ST_ASTEXT' ' ' ;
# END
# LEXER: ST_ASWKB
# BEGIN LEXER FOR  ST_ASWKB string
<ST_ASWKB> ::= 'ST_ASWKB' ' ' ;
# END
# LEXER: ST_ASWKT
# BEGIN LEXER FOR  ST_ASWKT string
<ST_ASWKT> ::= 'ST_ASWKT' ' ' ;
# END
# LEXER: ST_BUFFER
# BEGIN LEXER FOR  ST_BUFFER string
<ST_BUFFER> ::= 'ST_BUFFER' ' ' ;
# END
# LEXER: ST_CENTROID
# BEGIN LEXER FOR  ST_CENTROID string
<ST_CENTROID> ::= 'ST_CENTROID' ' ' ;
# END
# LEXER: ST_CONTAINS
# BEGIN LEXER FOR  ST_CONTAINS string
<ST_CONTAINS> ::= 'ST_CONTAINS' ' ' ;
# END
# LEXER: ST_CROSSES
# BEGIN LEXER FOR  ST_CROSSES string
<ST_CROSSES> ::= 'ST_CROSSES' ' ' ;
# END
# LEXER: ST_DIFFERENCE
# BEGIN LEXER FOR  ST_DIFFERENCE string
<ST_DIFFERENCE> ::= 'ST_DIFFERENCE' ' ' ;
# END
# LEXER: ST_DIMENSION
# BEGIN LEXER FOR  ST_DIMENSION string
<ST_DIMENSION> ::= 'ST_DIMENSION' ' ' ;
# END
# LEXER: ST_DISJOINT
# BEGIN LEXER FOR  ST_DISJOINT string
<ST_DISJOINT> ::= 'ST_DISJOINT' ' ' ;
# END
# LEXER: ST_DISTANCE
# BEGIN LEXER FOR  ST_DISTANCE string
<ST_DISTANCE> ::= 'ST_DISTANCE' ' ' ;
# END
# LEXER: ST_ENDPOINT
# BEGIN LEXER FOR  ST_ENDPOINT string
<ST_ENDPOINT> ::= 'ST_ENDPOINT' ' ' ;
# END
# LEXER: ST_ENVELOPE
# BEGIN LEXER FOR  ST_ENVELOPE string
<ST_ENVELOPE> ::= 'ST_ENVELOPE' ' ' ;
# END
# LEXER: ST_EQUALS
# BEGIN LEXER FOR  ST_EQUALS string
<ST_EQUALS> ::= 'ST_EQUALS' ' ' ;
# END
# LEXER: ST_EXTERIORRING
# BEGIN LEXER FOR  ST_EXTERIORRING string
<ST_EXTERIORRING> ::= 'ST_EXTERIORRING' ' ' ;
# END
# LEXER: ST_GEOMCOLLFROMTEXT
# BEGIN LEXER FOR  ST_GEOMCOLLFROMTEXT string
<ST_GEOMCOLLFROMTEXT> ::= 'ST_GEOMCOLLFROMTEXT' ' ' ;
# END
# LEXER: ST_GEOMCOLLFROMTXT
# BEGIN LEXER FOR  ST_GEOMCOLLFROMTXT string
<ST_GEOMCOLLFROMTXT> ::= 'ST_GEOMCOLLFROMTXT' ' ' ;
# END
# LEXER: ST_GEOMCOLLFROMWKB
# BEGIN LEXER FOR  ST_GEOMCOLLFROMWKB string
<ST_GEOMCOLLFROMWKB> ::= 'ST_GEOMCOLLFROMWKB' ' ' ;
# END
# LEXER: ST_GEOMETRYCOLLECTIONFROMTEXT
# BEGIN LEXER FOR  ST_GEOMETRYCOLLECTIONFROMTEXT string
<ST_GEOMETRYCOLLECTIONFROMTEXT> ::= 'ST_GEOMETRYCOLLECTIONFROMTEXT' ' ' ;
# END
# LEXER: ST_GEOMETRYCOLLECTIONFROMWKB
# BEGIN LEXER FOR  ST_GEOMETRYCOLLECTIONFROMWKB string
<ST_GEOMETRYCOLLECTIONFROMWKB> ::= 'ST_GEOMETRYCOLLECTIONFROMWKB' ' ' ;
# END
# LEXER: ST_GEOMETRYFROMTEXT
# BEGIN LEXER FOR  ST_GEOMETRYFROMTEXT string
<ST_GEOMETRYFROMTEXT> ::= 'ST_GEOMETRYFROMTEXT' ' ' ;
# END
# LEXER: ST_GEOMETRYFROMWKB
# BEGIN LEXER FOR  ST_GEOMETRYFROMWKB string
<ST_GEOMETRYFROMWKB> ::= 'ST_GEOMETRYFROMWKB' ' ' ;
# END
# LEXER: ST_GEOMETRYN
# BEGIN LEXER FOR  ST_GEOMETRYN string
<ST_GEOMETRYN> ::= 'ST_GEOMETRYN' ' ' ;
# END
# LEXER: ST_GEOMETRYTYPE
# BEGIN LEXER FOR  ST_GEOMETRYTYPE string
<ST_GEOMETRYTYPE> ::= 'ST_GEOMETRYTYPE' ' ' ;
# END
# LEXER: ST_GEOMFROMTEXT
# BEGIN LEXER FOR  ST_GEOMFROMTEXT string
<ST_GEOMFROMTEXT> ::= 'ST_GEOMFROMTEXT' ' ' ;
# END
# LEXER: ST_GEOMFROMWKB
# BEGIN LEXER FOR  ST_GEOMFROMWKB string
<ST_GEOMFROMWKB> ::= 'ST_GEOMFROMWKB' ' ' ;
# END
# LEXER: ST_INTERIORRINGN
# BEGIN LEXER FOR  ST_INTERIORRINGN string
<ST_INTERIORRINGN> ::= 'ST_INTERIORRINGN' ' ' ;
# END
# LEXER: ST_INTERSECTION
# BEGIN LEXER FOR  ST_INTERSECTION string
<ST_INTERSECTION> ::= 'ST_INTERSECTION' ' ' ;
# END
# LEXER: ST_INTERSECTS
# BEGIN LEXER FOR  ST_INTERSECTS string
<ST_INTERSECTS> ::= 'ST_INTERSECTS' ' ' ;
# END
# LEXER: ST_ISCLOSED
# BEGIN LEXER FOR  ST_ISCLOSED string
<ST_ISCLOSED> ::= 'ST_ISCLOSED' ' ' ;
# END
# LEXER: ST_ISEMPTY
# BEGIN LEXER FOR  ST_ISEMPTY string
<ST_ISEMPTY> ::= 'ST_ISEMPTY' ' ' ;
# END
# LEXER: ST_ISSIMPLE
# BEGIN LEXER FOR  ST_ISSIMPLE string
<ST_ISSIMPLE> ::= 'ST_ISSIMPLE' ' ' ;
# END
# LEXER: ST_LINEFROMTEXT
# BEGIN LEXER FOR  ST_LINEFROMTEXT string
<ST_LINEFROMTEXT> ::= 'ST_LINEFROMTEXT' ' ' ;
# END
# LEXER: ST_LINEFROMWKB
# BEGIN LEXER FOR  ST_LINEFROMWKB string
<ST_LINEFROMWKB> ::= 'ST_LINEFROMWKB' ' ' ;
# END
# LEXER: ST_LINESTRINGFROMTEXT
# BEGIN LEXER FOR  ST_LINESTRINGFROMTEXT string
<ST_LINESTRINGFROMTEXT> ::= 'ST_LINESTRINGFROMTEXT' ' ' ;
# END
# LEXER: ST_LINESTRINGFROMWKB
# BEGIN LEXER FOR  ST_LINESTRINGFROMWKB string
<ST_LINESTRINGFROMWKB> ::= 'ST_LINESTRINGFROMWKB' ' ' ;
# END
# LEXER: ST_NUMGEOMETRIES
# BEGIN LEXER FOR  ST_NUMGEOMETRIES string
<ST_NUMGEOMETRIES> ::= 'ST_NUMGEOMETRIES' ' ' ;
# END
# LEXER: ST_NUMINTERIORRING
# BEGIN LEXER FOR  ST_NUMINTERIORRING string
<ST_NUMINTERIORRING> ::= 'ST_NUMINTERIORRING' ' ' ;
# END
# LEXER: ST_NUMINTERIORRINGS
# BEGIN LEXER FOR  ST_NUMINTERIORRINGS string
<ST_NUMINTERIORRINGS> ::= 'ST_NUMINTERIORRINGS' ' ' ;
# END
# LEXER: ST_NUMPOINTS
# BEGIN LEXER FOR  ST_NUMPOINTS string
<ST_NUMPOINTS> ::= 'ST_NUMPOINTS' ' ' ;
# END
# LEXER: ST_OVERLAPS
# BEGIN LEXER FOR  ST_OVERLAPS string
<ST_OVERLAPS> ::= 'ST_OVERLAPS' ' ' ;
# END
# LEXER: ST_POINTFROMTEXT
# BEGIN LEXER FOR  ST_POINTFROMTEXT string
<ST_POINTFROMTEXT> ::= 'ST_POINTFROMTEXT' ' ' ;
# END
# LEXER: ST_POINTFROMWKB
# BEGIN LEXER FOR  ST_POINTFROMWKB string
<ST_POINTFROMWKB> ::= 'ST_POINTFROMWKB' ' ' ;
# END
# LEXER: ST_POINTN
# BEGIN LEXER FOR  ST_POINTN string
<ST_POINTN> ::= 'ST_POINTN' ' ' ;
# END
# LEXER: ST_POLYFROMTEXT
# BEGIN LEXER FOR  ST_POLYFROMTEXT string
<ST_POLYFROMTEXT> ::= 'ST_POLYFROMTEXT' ' ' ;
# END
# LEXER: ST_POLYFROMWKB
# BEGIN LEXER FOR  ST_POLYFROMWKB string
<ST_POLYFROMWKB> ::= 'ST_POLYFROMWKB' ' ' ;
# END
# LEXER: ST_POLYGONFROMTEXT
# BEGIN LEXER FOR  ST_POLYGONFROMTEXT string
<ST_POLYGONFROMTEXT> ::= 'ST_POLYGONFROMTEXT' ' ' ;
# END
# LEXER: ST_POLYGONFROMWKB
# BEGIN LEXER FOR  ST_POLYGONFROMWKB string
<ST_POLYGONFROMWKB> ::= 'ST_POLYGONFROMWKB' ' ' ;
# END
# LEXER: ST_SRID
# BEGIN LEXER FOR  ST_SRID string
<ST_SRID> ::= 'ST_SRID' ' ' ;
# END
# LEXER: ST_STARTPOINT
# BEGIN LEXER FOR  ST_STARTPOINT string
<ST_STARTPOINT> ::= 'ST_STARTPOINT' ' ' ;
# END
# LEXER: ST_SYMDIFFERENCE
# BEGIN LEXER FOR  ST_SYMDIFFERENCE string
<ST_SYMDIFFERENCE> ::= 'ST_SYMDIFFERENCE' ' ' ;
# END
# LEXER: ST_TOUCHES
# BEGIN LEXER FOR  ST_TOUCHES string
<ST_TOUCHES> ::= 'ST_TOUCHES' ' ' ;
# END
# LEXER: ST_UNION
# BEGIN LEXER FOR  ST_UNION string
<ST_UNION> ::= 'ST_UNION' ' ' ;
# END
# LEXER: ST_WITHIN
# BEGIN LEXER FOR  ST_WITHIN string
<ST_WITHIN> ::= 'ST_WITHIN' ' ' ;
# END
# LEXER: ST_X
# BEGIN LEXER FOR  ST_X string
<ST_X> ::= 'ST_X' ' ' ;
# END
# LEXER: ST_Y
# BEGIN LEXER FOR  ST_Y string
<ST_Y> ::= 'ST_Y' ' ' ;
# END
# LEXER: SUBDATE
# BEGIN LEXER FOR  SUBDATE string
<SUBDATE> ::= 'SUBDATE' ' ' ;
# END
# LEXER: SUBSTRING_INDEX
# BEGIN LEXER FOR  SUBSTRING_INDEX string
<SUBSTRING_INDEX> ::= 'SUBSTRING_INDEX' ' ' ;
# END
# LEXER: SUBTIME
# BEGIN LEXER FOR  SUBTIME string
<SUBTIME> ::= 'SUBTIME' ' ' ;
# END
# LEXER: SYSTEM_USER
# BEGIN LEXER FOR  SYSTEM_USER string
<SYSTEM_USER> ::= 'SYSTEM_USER' ' ' ;
# END
# LEXER: TAN
# BEGIN LEXER FOR  TAN string
<TAN> ::= 'TAN' ' ' ;
# END
# LEXER: TIMEDIFF
# BEGIN LEXER FOR  TIMEDIFF string
<TIMEDIFF> ::= 'TIMEDIFF' ' ' ;
# END
# LEXER: TIMESTAMPADD
# BEGIN LEXER FOR  TIMESTAMPADD string
<TIMESTAMPADD> ::= 'TIMESTAMPADD' ' ' ;
# END
# LEXER: TIMESTAMPDIFF
# BEGIN LEXER FOR  TIMESTAMPDIFF string
<TIMESTAMPDIFF> ::= 'TIMESTAMPDIFF' ' ' ;
# END
# LEXER: TIME_FORMAT
# BEGIN LEXER FOR  TIME_FORMAT string
<TIME_FORMAT> ::= 'TIME_FORMAT' ' ' ;
# END
# LEXER: TIME_TO_SEC
# BEGIN LEXER FOR  TIME_TO_SEC string
<TIME_TO_SEC> ::= 'TIME_TO_SEC' ' ' ;
# END
# LEXER: TOUCHES
# BEGIN LEXER FOR  TOUCHES string
<TOUCHES> ::= 'TOUCHES' ' ' ;
# END
# LEXER: TO_BASE64
# BEGIN LEXER FOR  TO_BASE64 string
<TO_BASE64> ::= 'TO_BASE64' ' ' ;
# END
# LEXER: TO_DAYS
# BEGIN LEXER FOR  TO_DAYS string
<TO_DAYS> ::= 'TO_DAYS' ' ' ;
# END
# LEXER: TO_SECONDS
# BEGIN LEXER FOR  TO_SECONDS string
<TO_SECONDS> ::= 'TO_SECONDS' ' ' ;
# END
# LEXER: UCASE
# BEGIN LEXER FOR  UCASE string
<UCASE> ::= 'UCASE' ' ' ;
# END
# LEXER: UNCOMPRESS
# BEGIN LEXER FOR  UNCOMPRESS string
<UNCOMPRESS> ::= 'UNCOMPRESS' ' ' ;
# END
# LEXER: UNCOMPRESSED_LENGTH
# BEGIN LEXER FOR  UNCOMPRESSED_LENGTH string
<UNCOMPRESSED_LENGTH> ::= 'UNCOMPRESSED_LENGTH' ' ' ;
# END
# LEXER: UNHEX
# BEGIN LEXER FOR  UNHEX string
<UNHEX> ::= 'UNHEX' ' ' ;
# END
# LEXER: UNIX_TIMESTAMP
# BEGIN LEXER FOR  UNIX_TIMESTAMP string
<UNIX_TIMESTAMP> ::= 'UNIX_TIMESTAMP' ' ' ;
# END
# LEXER: UPDATEXML
# BEGIN LEXER FOR  UPDATEXML string
<UPDATEXML> ::= 'UPDATEXML' ' ' ;
# END
# LEXER: UPPER
# BEGIN LEXER FOR  UPPER string
<UPPER> ::= 'UPPER' ' ' ;
# END
# LEXER: UUID
# BEGIN LEXER FOR  UUID string
<UUID> ::= 'UUID' ' ' ;
# END
# LEXER: UUID_SHORT
# BEGIN LEXER FOR  UUID_SHORT string
<UUID_SHORT> ::= 'UUID_SHORT' ' ' ;
# END
# LEXER: VALIDATE_PASSWORD_STRENGTH
# BEGIN LEXER FOR  VALIDATE_PASSWORD_STRENGTH string
<VALIDATE_PASSWORD_STRENGTH> ::= 'VALIDATE_PASSWORD_STRENGTH' ' ' ;
# END
# LEXER: VERSION
# BEGIN LEXER FOR  VERSION string
<VERSION> ::= 'VERSION' ' ' ;
# END
# LEXER: WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS
# BEGIN LEXER FOR  WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS string
<WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS> ::= 'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS' ' ' ;
# END
# LEXER: WEEKDAY
# BEGIN LEXER FOR  WEEKDAY string
<WEEKDAY> ::= 'WEEKDAY' ' ' ;
# END
# LEXER: WEEKOFYEAR
# BEGIN LEXER FOR  WEEKOFYEAR string
<WEEKOFYEAR> ::= 'WEEKOFYEAR' ' ' ;
# END
# LEXER: WEIGHT_STRING
# BEGIN LEXER FOR  WEIGHT_STRING string
<WEIGHT_STRING> ::= 'WEIGHT_STRING' ' ' ;
# END
# LEXER: WITHIN
# BEGIN LEXER FOR  WITHIN string
<WITHIN> ::= 'WITHIN' ' ' ;
# END
# LEXER: YEARWEEK
# BEGIN LEXER FOR  YEARWEEK string
<YEARWEEK> ::= 'YEARWEEK' ' ' ;
# END
# LEXER: Y_FUNCTION
# BEGIN LEXER FOR  Y_FUNCTION string
<Y_FUNCTION> ::= 'Y' ' ' ;
# END
# LEXER: X_FUNCTION
# BEGIN LEXER FOR  X_FUNCTION string
<X_FUNCTION> ::= 'X' ' ' ;
# END
# LEXER: VAR_ASSIGN
# BEGIN LEXER FOR  VAR_ASSIGN string
<VAR_ASSIGN> ::= ':=' ' ' ;
# END
# LEXER: PLUS_ASSIGN
# BEGIN LEXER FOR  PLUS_ASSIGN string
<PLUS_ASSIGN> ::= '+=' ' ' ;
# END
# LEXER: MINUS_ASSIGN
# BEGIN LEXER FOR  MINUS_ASSIGN string
<MINUS_ASSIGN> ::= '-=' ' ' ;
# END
# LEXER: MULT_ASSIGN
# BEGIN LEXER FOR  MULT_ASSIGN string
<MULT_ASSIGN> ::= '*=' ' ' ;
# END
# LEXER: DIV_ASSIGN
# BEGIN LEXER FOR  DIV_ASSIGN string
<DIV_ASSIGN> ::= '/=' ' ' ;
# END
# LEXER: MOD_ASSIGN
# BEGIN LEXER FOR  MOD_ASSIGN string
<MOD_ASSIGN> ::= '%=' ' ' ;
# END
# LEXER: AND_ASSIGN
# BEGIN LEXER FOR  AND_ASSIGN string
<AND_ASSIGN> ::= '&=' ' ' ;
# END
# LEXER: XOR_ASSIGN
# BEGIN LEXER FOR  XOR_ASSIGN string
<XOR_ASSIGN> ::= '^=' ' ' ;
# END
# LEXER: OR_ASSIGN
# BEGIN LEXER FOR  OR_ASSIGN string
<OR_ASSIGN> ::= '|=' ' ' ;
# END
# LEXER: STAR
# BEGIN LEXER FOR  STAR string
<STAR> ::= '*' ' ' ;
# END
# LEXER: DIVIDE
# BEGIN LEXER FOR  DIVIDE string
<DIVIDE> ::= '/' ' ' ;
# END
# LEXER: MODULE
# BEGIN LEXER FOR  MODULE string
<MODULE> ::= '%' ' ' ;
# END
# LEXER: PLUS
# BEGIN LEXER FOR  PLUS string
<PLUS> ::= '+' ' ' ;
# END
# LEXER: MINUSMINUS
# BEGIN LEXER FOR  MINUSMINUS string
<MINUSMINUS> ::= '--' ' ' ;
# END
# LEXER: MINUS
# BEGIN LEXER FOR  MINUS string
<MINUS> ::= '-' ' ' ;
# END
# LEXER: DIV
# BEGIN LEXER FOR  DIV string
<DIV> ::= 'DIV' ' ' ;
# END
# LEXER: MOD
# BEGIN LEXER FOR  MOD string
<MOD> ::= 'MOD' ' ' ;
# END
# LEXER: EQUAL_SYMBOL
# BEGIN LEXER FOR  EQUAL_SYMBOL string
<EQUAL_SYMBOL> ::= '=' ' ' ;
# END
# LEXER: GREATER_SYMBOL
# BEGIN LEXER FOR  GREATER_SYMBOL string
<GREATER_SYMBOL> ::= '>' ' ' ;
# END
# LEXER: LESS_SYMBOL
# BEGIN LEXER FOR  LESS_SYMBOL string
<LESS_SYMBOL> ::= '<' ' ' ;
# END
# LEXER: EXCLAMATION_SYMBOL
# BEGIN LEXER FOR  EXCLAMATION_SYMBOL string
<EXCLAMATION_SYMBOL> ::= '!' ' ' ;
# END
# LEXER: BIT_NOT_OP
# BEGIN LEXER FOR  BIT_NOT_OP string
<BIT_NOT_OP> ::= '~' ' ' ;
# END
# LEXER: BIT_OR_OP
# BEGIN LEXER FOR  BIT_OR_OP string
<BIT_OR_OP> ::= '|' ' ' ;
# END
# LEXER: BIT_AND_OP
# BEGIN LEXER FOR  BIT_AND_OP string
<BIT_AND_OP> ::= '&' ' ' ;
# END
# LEXER: BIT_XOR_OP
# BEGIN LEXER FOR  BIT_XOR_OP string
<BIT_XOR_OP> ::= '^' ' ' ;
# END
# LEXER: DOT
# BEGIN LEXER FOR  DOT string
<DOT> ::= '.' ' ' ;
# END
# LEXER: LR_BRACKET
# BEGIN LEXER FOR  LR_BRACKET string
<LR_BRACKET> ::= '(' ' ' ;
# END
# LEXER: RR_BRACKET
# BEGIN LEXER FOR  RR_BRACKET string
<RR_BRACKET> ::= ')' ' ' ;
# END
# LEXER: COMMA
# BEGIN LEXER FOR  COMMA string
<COMMA> ::= ',' ' ' ;
# END
# LEXER: SEMI
# BEGIN LEXER FOR  SEMI string
<SEMI> ::= ';' ' ' ;
# END
# LEXER: AT_SIGN
# BEGIN LEXER FOR  AT_SIGN string
<AT_SIGN> ::= '@' ' ' ;
# END
# LEXER: ZERO_DECIMAL
# BEGIN LEXER FOR  ZERO_DECIMAL string
<ZERO_DECIMAL> ::= '0' ' ' ;
# END
# LEXER: ONE_DECIMAL
# BEGIN LEXER FOR  ONE_DECIMAL string
<ONE_DECIMAL> ::= '1' ' ' ;
# END
# LEXER: TWO_DECIMAL
# BEGIN LEXER FOR  TWO_DECIMAL string
<TWO_DECIMAL> ::= '2' ' ' ;
# END
# LEXER: SINGLE_QUOTE_SYMB
# BEGIN LEXER FOR  SINGLE_QUOTE_SYMB string
<SINGLE_QUOTE_SYMB> ::=  39  ' ' ;
# END
# LEXER: DOUBLE_QUOTE_SYMB
# BEGIN LEXER FOR  DOUBLE_QUOTE_SYMB string
<DOUBLE_QUOTE_SYMB> ::= '"' ' ' ;
# END
# LEXER: REVERSE_QUOTE_SYMB
# BEGIN LEXER FOR  REVERSE_QUOTE_SYMB string
<REVERSE_QUOTE_SYMB> ::= '`' ' ' ;
# END
# LEXER: COLON_SYMB
# BEGIN LEXER FOR  COLON_SYMB string
<COLON_SYMB> ::= ':' ' ' ;
# END
# LEXER: QUOTE_SYMB
# BEGIN LEXER FOR  QUOTE_SYMB or
# BEGIN LEXER FOR  QUOTE_SYMB token
<QUOTE_SYMB> ::= <SINGLE_QUOTE_SYMB> ;
# END
# BEGIN LEXER FOR  QUOTE_SYMB token
<QUOTE_SYMB> ::= <DOUBLE_QUOTE_SYMB> ;
# END
# BEGIN LEXER FOR  QUOTE_SYMB token
<QUOTE_SYMB> ::= <REVERSE_QUOTE_SYMB> ;
# END
# END
# LEXER: CHARSET_REVERSE_QOUTE_STRING
# BEGIN LEXER FOR  CHARSET_REVERSE_QOUTE_STRING and
<CHARSET_REVERSE_QOUTE_STRING> ::= '`' <CHARSET_NAME> '`' ' ' ;
# END
# LEXER: FILESIZE_LITERAL
# BEGIN LEXER FOR  FILESIZE_LITERAL and
# BEGIN LEXER FOR  FILESIZE_LITERAL +
<FILESIZE_LITERAL_-_1> ::= <FILESIZE_LITERAL_-_2> ;
<FILESIZE_LITERAL_-_2> ::= <FILESIZE_LITERAL_-_3> ;
<FILESIZE_LITERAL_-_2> ::= <FILESIZE_LITERAL_-_3> <FILESIZE_LITERAL_-_2> ;
# BEGIN LEXER FOR  FILESIZE_LITERAL token
<FILESIZE_LITERAL_-_3> ::= <DEC_DIGIT> ;
# END
# END
# BEGIN LEXER FOR  FILESIZE_LITERAL or
# BEGIN LEXER FOR  FILESIZE_LITERAL string
<FILESIZE_LITERAL_-_4> ::= 'K' ;
# END
# BEGIN LEXER FOR  FILESIZE_LITERAL string
<FILESIZE_LITERAL_-_4> ::= 'M' ;
# END
# BEGIN LEXER FOR  FILESIZE_LITERAL string
<FILESIZE_LITERAL_-_4> ::= 'G' ;
# END
# BEGIN LEXER FOR  FILESIZE_LITERAL string
<FILESIZE_LITERAL_-_4> ::= 'T' ;
# END
# END
<FILESIZE_LITERAL> ::= <FILESIZE_LITERAL_-_1> <FILESIZE_LITERAL_-_4> ' ' ;
# END
# LEXER: START_NATIONAL_STRING_LITERAL
# BEGIN LEXER FOR  START_NATIONAL_STRING_LITERAL and
<START_NATIONAL_STRING_LITERAL> ::= 'N' <SQUOTA_STRING> ' ' ;
# END
# LEXER: STRING_LITERAL
# BEGIN LEXER FOR  STRING_LITERAL or
# BEGIN LEXER FOR  STRING_LITERAL token
<STRING_LITERAL> ::= <DQUOTA_STRING> ' ' ;
# END
# BEGIN LEXER FOR  STRING_LITERAL token
<STRING_LITERAL> ::= <SQUOTA_STRING> ' ' ;
# END
# BEGIN LEXER FOR  STRING_LITERAL token
<STRING_LITERAL> ::= <BQUOTA_STRING> ' ' ;
# END
# END
# LEXER: DECIMAL_LITERAL
# BEGIN LEXER FOR  DECIMAL_LITERAL +
<DECIMAL_LITERAL> ::= <DECIMAL_LITERAL_-_1> ' ' ;
<DECIMAL_LITERAL_-_1> ::= <DECIMAL_LITERAL_-_2> ' ' ;
<DECIMAL_LITERAL_-_1> ::= <DECIMAL_LITERAL_-_2> <DECIMAL_LITERAL_-_1> ' ' ;
# BEGIN LEXER FOR  DECIMAL_LITERAL token
<DECIMAL_LITERAL_-_2> ::= <DEC_DIGIT> ;
# END
# END
# LEXER: HEXADECIMAL_LITERAL
# BEGIN LEXER FOR  HEXADECIMAL_LITERAL or
# BEGIN LEXER FOR  HEXADECIMAL_LITERAL and
# BEGIN LEXER FOR  HEXADECIMAL_LITERAL +
<HEXADECIMAL_LITERAL_-_1> ::= <HEXADECIMAL_LITERAL_-_2> ;
<HEXADECIMAL_LITERAL_-_2> ::= <HEXADECIMAL_LITERAL_-_3> ;
<HEXADECIMAL_LITERAL_-_2> ::= <HEXADECIMAL_LITERAL_-_3> <HEXADECIMAL_LITERAL_-_2> ;
# BEGIN LEXER FOR  HEXADECIMAL_LITERAL and
<HEXADECIMAL_LITERAL_-_3> ::= <HEX_DIGIT> <HEX_DIGIT> ;
# END
# END
<HEXADECIMAL_LITERAL> ::= 'X'  39  <HEXADECIMAL_LITERAL_-_1>  39  ' ' ;
# END
# BEGIN LEXER FOR  HEXADECIMAL_LITERAL and
# BEGIN LEXER FOR  HEXADECIMAL_LITERAL +
<HEXADECIMAL_LITERAL_-_4> ::= <HEXADECIMAL_LITERAL_-_5> ;
<HEXADECIMAL_LITERAL_-_5> ::= <HEXADECIMAL_LITERAL_-_6> ;
<HEXADECIMAL_LITERAL_-_5> ::= <HEXADECIMAL_LITERAL_-_6> <HEXADECIMAL_LITERAL_-_5> ;
# BEGIN LEXER FOR  HEXADECIMAL_LITERAL token
<HEXADECIMAL_LITERAL_-_6> ::= <HEX_DIGIT> ;
# END
# END
<HEXADECIMAL_LITERAL> ::= '0X' <HEXADECIMAL_LITERAL_-_4> ' ' ;
# END
# END
# LEXER: REAL_LITERAL
# BEGIN LEXER FOR  REAL_LITERAL or
# BEGIN LEXER FOR  REAL_LITERAL and
# BEGIN LEXER FOR  REAL_LITERAL ?
<REAL_LITERAL_-_1> ::= ;
# BEGIN LEXER FOR  REAL_LITERAL +
<REAL_LITERAL_-_1> ::= <REAL_LITERAL_-_2> ;
<REAL_LITERAL_-_2> ::= <REAL_LITERAL_-_3> ;
<REAL_LITERAL_-_2> ::= <REAL_LITERAL_-_3> <REAL_LITERAL_-_2> ;
# BEGIN LEXER FOR  REAL_LITERAL token
<REAL_LITERAL_-_3> ::= <DEC_DIGIT> ;
# END
# END
# END
# BEGIN LEXER FOR  REAL_LITERAL +
<REAL_LITERAL_-_4> ::= <REAL_LITERAL_-_5> ;
<REAL_LITERAL_-_5> ::= <REAL_LITERAL_-_6> ;
<REAL_LITERAL_-_5> ::= <REAL_LITERAL_-_6> <REAL_LITERAL_-_5> ;
# BEGIN LEXER FOR  REAL_LITERAL token
<REAL_LITERAL_-_6> ::= <DEC_DIGIT> ;
# END
# END
<REAL_LITERAL> ::= <REAL_LITERAL_-_1> '.' <REAL_LITERAL_-_4> ' ' ;
# END
# BEGIN LEXER FOR  REAL_LITERAL and
# BEGIN LEXER FOR  REAL_LITERAL +
<REAL_LITERAL_-_7> ::= <REAL_LITERAL_-_8> ;
<REAL_LITERAL_-_8> ::= <REAL_LITERAL_-_9> ;
<REAL_LITERAL_-_8> ::= <REAL_LITERAL_-_9> <REAL_LITERAL_-_8> ;
# BEGIN LEXER FOR  REAL_LITERAL token
<REAL_LITERAL_-_9> ::= <DEC_DIGIT> ;
# END
# END
<REAL_LITERAL> ::= <REAL_LITERAL_-_7> '.' <EXPONENT_NUM_PART> ' ' ;
# END
# BEGIN LEXER FOR  REAL_LITERAL and
# BEGIN LEXER FOR  REAL_LITERAL ?
<REAL_LITERAL_-_10> ::= ;
# BEGIN LEXER FOR  REAL_LITERAL +
<REAL_LITERAL_-_10> ::= <REAL_LITERAL_-_11> ;
<REAL_LITERAL_-_11> ::= <REAL_LITERAL_-_12> ;
<REAL_LITERAL_-_11> ::= <REAL_LITERAL_-_12> <REAL_LITERAL_-_11> ;
# BEGIN LEXER FOR  REAL_LITERAL token
<REAL_LITERAL_-_12> ::= <DEC_DIGIT> ;
# END
# END
# END
# BEGIN LEXER FOR  REAL_LITERAL and
# BEGIN LEXER FOR  REAL_LITERAL +
<REAL_LITERAL_-_14> ::= <REAL_LITERAL_-_15> ;
<REAL_LITERAL_-_15> ::= <REAL_LITERAL_-_16> ;
<REAL_LITERAL_-_15> ::= <REAL_LITERAL_-_16> <REAL_LITERAL_-_15> ;
# BEGIN LEXER FOR  REAL_LITERAL token
<REAL_LITERAL_-_16> ::= <DEC_DIGIT> ;
# END
# END
<REAL_LITERAL_-_13> ::= <REAL_LITERAL_-_14> <EXPONENT_NUM_PART> ;
# END
<REAL_LITERAL> ::= <REAL_LITERAL_-_10> '.' <REAL_LITERAL_-_13> ' ' ;
# END
# BEGIN LEXER FOR  REAL_LITERAL and
# BEGIN LEXER FOR  REAL_LITERAL +
<REAL_LITERAL_-_17> ::= <REAL_LITERAL_-_18> ;
<REAL_LITERAL_-_18> ::= <REAL_LITERAL_-_19> ;
<REAL_LITERAL_-_18> ::= <REAL_LITERAL_-_19> <REAL_LITERAL_-_18> ;
# BEGIN LEXER FOR  REAL_LITERAL token
<REAL_LITERAL_-_19> ::= <DEC_DIGIT> ;
# END
# END
<REAL_LITERAL> ::= <REAL_LITERAL_-_17> <EXPONENT_NUM_PART> ' ' ;
# END
# END
# LEXER: NULL_SPEC_LITERAL
# BEGIN LEXER FOR  NULL_SPEC_LITERAL and
<NULL_SPEC_LITERAL> ::= '\' 'N' ' ' ;
# END
# LEXER: BIT_STRING
# BEGIN LEXER FOR  BIT_STRING token
<BIT_STRING> ::= <BIT_STRING_L> ' ' ;
# END
# LEXER: STRING_CHARSET_NAME
# BEGIN LEXER FOR  STRING_CHARSET_NAME and
<STRING_CHARSET_NAME> ::= '_' <CHARSET_NAME> ' ' ;
# END
# LEXER: DOT_ID
# BEGIN LEXER FOR  DOT_ID and
<DOT_ID> ::= '.' <ID_LITERAL> ' ' ;
# END
# LEXER: ID
# BEGIN LEXER FOR  ID token
<ID> ::= <ID_LITERAL> ' ' ;
# END
# LEXER: REVERSE_QUOTE_ID
# BEGIN LEXER FOR  REVERSE_QUOTE_ID and
# BEGIN LEXER FOR  REVERSE_QUOTE_ID +
<REVERSE_QUOTE_ID_-_1> ::= <REVERSE_QUOTE_ID_-_2> ;
<REVERSE_QUOTE_ID_-_2> ::= <REVERSE_QUOTE_ID_-_3> ;
<REVERSE_QUOTE_ID_-_2> ::= <REVERSE_QUOTE_ID_-_3> <REVERSE_QUOTE_ID_-_2> ;
# BEGIN LEXER FOR  REVERSE_QUOTE_ID not
<REVERSE_QUOTE_ID_-_3> ::= ' ' ;
<REVERSE_QUOTE_ID_-_3> ::= '!' ;
<REVERSE_QUOTE_ID_-_3> ::= '"' ;
<REVERSE_QUOTE_ID_-_3> ::= '#' ;
<REVERSE_QUOTE_ID_-_3> ::= '$' ;
<REVERSE_QUOTE_ID_-_3> ::= '%' ;
<REVERSE_QUOTE_ID_-_3> ::= '&' ;
<REVERSE_QUOTE_ID_-_3> ::=  39  ;
<REVERSE_QUOTE_ID_-_3> ::= '(' ;
<REVERSE_QUOTE_ID_-_3> ::= ')' ;
<REVERSE_QUOTE_ID_-_3> ::= '*' ;
<REVERSE_QUOTE_ID_-_3> ::= '+' ;
<REVERSE_QUOTE_ID_-_3> ::= ',' ;
<REVERSE_QUOTE_ID_-_3> ::= '-' ;
<REVERSE_QUOTE_ID_-_3> ::= '.' ;
<REVERSE_QUOTE_ID_-_3> ::= '/' ;
<REVERSE_QUOTE_ID_-_3> ::= '0' ;
<REVERSE_QUOTE_ID_-_3> ::= '1' ;
<REVERSE_QUOTE_ID_-_3> ::= '2' ;
<REVERSE_QUOTE_ID_-_3> ::= '3' ;
<REVERSE_QUOTE_ID_-_3> ::= '4' ;
<REVERSE_QUOTE_ID_-_3> ::= '5' ;
<REVERSE_QUOTE_ID_-_3> ::= '6' ;
<REVERSE_QUOTE_ID_-_3> ::= '7' ;
<REVERSE_QUOTE_ID_-_3> ::= '8' ;
<REVERSE_QUOTE_ID_-_3> ::= '9' ;
<REVERSE_QUOTE_ID_-_3> ::= ':' ;
<REVERSE_QUOTE_ID_-_3> ::= ';' ;
<REVERSE_QUOTE_ID_-_3> ::= '<' ;
<REVERSE_QUOTE_ID_-_3> ::= '=' ;
<REVERSE_QUOTE_ID_-_3> ::= '>' ;
<REVERSE_QUOTE_ID_-_3> ::= '?' ;
<REVERSE_QUOTE_ID_-_3> ::= '@' ;
<REVERSE_QUOTE_ID_-_3> ::= 'A' ;
<REVERSE_QUOTE_ID_-_3> ::= 'B' ;
<REVERSE_QUOTE_ID_-_3> ::= 'C' ;
<REVERSE_QUOTE_ID_-_3> ::= 'D' ;
<REVERSE_QUOTE_ID_-_3> ::= 'E' ;
<REVERSE_QUOTE_ID_-_3> ::= 'F' ;
<REVERSE_QUOTE_ID_-_3> ::= 'G' ;
<REVERSE_QUOTE_ID_-_3> ::= 'H' ;
<REVERSE_QUOTE_ID_-_3> ::= 'I' ;
<REVERSE_QUOTE_ID_-_3> ::= 'J' ;
<REVERSE_QUOTE_ID_-_3> ::= 'K' ;
<REVERSE_QUOTE_ID_-_3> ::= 'L' ;
<REVERSE_QUOTE_ID_-_3> ::= 'M' ;
<REVERSE_QUOTE_ID_-_3> ::= 'N' ;
<REVERSE_QUOTE_ID_-_3> ::= 'O' ;
<REVERSE_QUOTE_ID_-_3> ::= 'P' ;
<REVERSE_QUOTE_ID_-_3> ::= 'Q' ;
<REVERSE_QUOTE_ID_-_3> ::= 'R' ;
<REVERSE_QUOTE_ID_-_3> ::= 'S' ;
<REVERSE_QUOTE_ID_-_3> ::= 'T' ;
<REVERSE_QUOTE_ID_-_3> ::= 'U' ;
<REVERSE_QUOTE_ID_-_3> ::= 'V' ;
<REVERSE_QUOTE_ID_-_3> ::= 'W' ;
<REVERSE_QUOTE_ID_-_3> ::= 'X' ;
<REVERSE_QUOTE_ID_-_3> ::= 'Y' ;
<REVERSE_QUOTE_ID_-_3> ::= 'Z' ;
<REVERSE_QUOTE_ID_-_3> ::= '[' ;
<REVERSE_QUOTE_ID_-_3> ::= '\' ;
<REVERSE_QUOTE_ID_-_3> ::= ']' ;
<REVERSE_QUOTE_ID_-_3> ::= '^' ;
<REVERSE_QUOTE_ID_-_3> ::= '_' ;
<REVERSE_QUOTE_ID_-_3> ::= 'a' ;
<REVERSE_QUOTE_ID_-_3> ::= 'b' ;
<REVERSE_QUOTE_ID_-_3> ::= 'c' ;
<REVERSE_QUOTE_ID_-_3> ::= 'd' ;
<REVERSE_QUOTE_ID_-_3> ::= 'e' ;
<REVERSE_QUOTE_ID_-_3> ::= 'f' ;
<REVERSE_QUOTE_ID_-_3> ::= 'g' ;
<REVERSE_QUOTE_ID_-_3> ::= 'h' ;
<REVERSE_QUOTE_ID_-_3> ::= 'i' ;
<REVERSE_QUOTE_ID_-_3> ::= 'j' ;
<REVERSE_QUOTE_ID_-_3> ::= 'k' ;
<REVERSE_QUOTE_ID_-_3> ::= 'l' ;
<REVERSE_QUOTE_ID_-_3> ::= 'm' ;
<REVERSE_QUOTE_ID_-_3> ::= 'n' ;
<REVERSE_QUOTE_ID_-_3> ::= 'o' ;
<REVERSE_QUOTE_ID_-_3> ::= 'p' ;
<REVERSE_QUOTE_ID_-_3> ::= 'q' ;
<REVERSE_QUOTE_ID_-_3> ::= 'r' ;
<REVERSE_QUOTE_ID_-_3> ::= 's' ;
<REVERSE_QUOTE_ID_-_3> ::= 't' ;
<REVERSE_QUOTE_ID_-_3> ::= 'u' ;
<REVERSE_QUOTE_ID_-_3> ::= 'v' ;
<REVERSE_QUOTE_ID_-_3> ::= 'w' ;
<REVERSE_QUOTE_ID_-_3> ::= 'x' ;
<REVERSE_QUOTE_ID_-_3> ::= 'y' ;
<REVERSE_QUOTE_ID_-_3> ::= 'z' ;
<REVERSE_QUOTE_ID_-_3> ::= '{' ;
<REVERSE_QUOTE_ID_-_3> ::= '|' ;
<REVERSE_QUOTE_ID_-_3> ::= '}' ;
<REVERSE_QUOTE_ID_-_3> ::= '~' ;
# END
# END
<REVERSE_QUOTE_ID> ::= '`' <REVERSE_QUOTE_ID_-_1> '`' ' ' ;
# END
# LEXER: STRING_USER_NAME
# BEGIN LEXER FOR  STRING_USER_NAME and
# BEGIN LEXER FOR  STRING_USER_NAME or
# BEGIN LEXER FOR  STRING_USER_NAME token
<STRING_USER_NAME_-_1> ::= <SQUOTA_STRING> ;
# END
# BEGIN LEXER FOR  STRING_USER_NAME token
<STRING_USER_NAME_-_1> ::= <DQUOTA_STRING> ;
# END
# BEGIN LEXER FOR  STRING_USER_NAME token
<STRING_USER_NAME_-_1> ::= <BQUOTA_STRING> ;
# END
# BEGIN LEXER FOR  STRING_USER_NAME token
<STRING_USER_NAME_-_1> ::= <ID_LITERAL> ;
# END
# END
# BEGIN LEXER FOR  STRING_USER_NAME or
# BEGIN LEXER FOR  STRING_USER_NAME token
<STRING_USER_NAME_-_2> ::= <SQUOTA_STRING> ;
# END
# BEGIN LEXER FOR  STRING_USER_NAME token
<STRING_USER_NAME_-_2> ::= <DQUOTA_STRING> ;
# END
# BEGIN LEXER FOR  STRING_USER_NAME token
<STRING_USER_NAME_-_2> ::= <BQUOTA_STRING> ;
# END
# BEGIN LEXER FOR  STRING_USER_NAME token
<STRING_USER_NAME_-_2> ::= <ID_LITERAL> ;
# END
# END
<STRING_USER_NAME> ::= <STRING_USER_NAME_-_1> '@' <STRING_USER_NAME_-_2> ' ' ;
# END
# LEXER: LOCAL_ID
# BEGIN LEXER FOR  LOCAL_ID and
# BEGIN LEXER FOR  LOCAL_ID or
# BEGIN LEXER FOR  LOCAL_ID +
<LOCAL_ID_-_1> ::= <LOCAL_ID_-_2> ;
<LOCAL_ID_-_2> ::= <LOCAL_ID_-_3> ;
<LOCAL_ID_-_2> ::= <LOCAL_ID_-_3> <LOCAL_ID_-_2> ;
# BEGIN LEXER FOR  LOCAL_ID char_set
<LOCAL_ID_-_3> ::= 'A' ;
<LOCAL_ID_-_3> ::= 'B' ;
<LOCAL_ID_-_3> ::= 'C' ;
<LOCAL_ID_-_3> ::= 'D' ;
<LOCAL_ID_-_3> ::= 'E' ;
<LOCAL_ID_-_3> ::= 'F' ;
<LOCAL_ID_-_3> ::= 'G' ;
<LOCAL_ID_-_3> ::= 'H' ;
<LOCAL_ID_-_3> ::= 'I' ;
<LOCAL_ID_-_3> ::= 'J' ;
<LOCAL_ID_-_3> ::= 'K' ;
<LOCAL_ID_-_3> ::= 'L' ;
<LOCAL_ID_-_3> ::= 'M' ;
<LOCAL_ID_-_3> ::= 'N' ;
<LOCAL_ID_-_3> ::= 'O' ;
<LOCAL_ID_-_3> ::= 'P' ;
<LOCAL_ID_-_3> ::= 'Q' ;
<LOCAL_ID_-_3> ::= 'R' ;
<LOCAL_ID_-_3> ::= 'S' ;
<LOCAL_ID_-_3> ::= 'T' ;
<LOCAL_ID_-_3> ::= 'U' ;
<LOCAL_ID_-_3> ::= 'V' ;
<LOCAL_ID_-_3> ::= 'W' ;
<LOCAL_ID_-_3> ::= 'X' ;
<LOCAL_ID_-_3> ::= 'Y' ;
<LOCAL_ID_-_3> ::= 'Z' ;
<LOCAL_ID_-_3> ::= '0' ;
<LOCAL_ID_-_3> ::= '1' ;
<LOCAL_ID_-_3> ::= '2' ;
<LOCAL_ID_-_3> ::= '3' ;
<LOCAL_ID_-_3> ::= '4' ;
<LOCAL_ID_-_3> ::= '5' ;
<LOCAL_ID_-_3> ::= '6' ;
<LOCAL_ID_-_3> ::= '7' ;
<LOCAL_ID_-_3> ::= '8' ;
<LOCAL_ID_-_3> ::= '9' ;
<LOCAL_ID_-_3> ::= '.' ;
<LOCAL_ID_-_3> ::= '_' ;
<LOCAL_ID_-_3> ::= '$' ;
# END
# END
# BEGIN LEXER FOR  LOCAL_ID token
<LOCAL_ID_-_1> ::= <SQUOTA_STRING> ;
# END
# BEGIN LEXER FOR  LOCAL_ID token
<LOCAL_ID_-_1> ::= <DQUOTA_STRING> ;
# END
# BEGIN LEXER FOR  LOCAL_ID token
<LOCAL_ID_-_1> ::= <BQUOTA_STRING> ;
# END
# END
<LOCAL_ID> ::= '@' <LOCAL_ID_-_1> ' ' ;
# END
# LEXER: GLOBAL_ID
# BEGIN LEXER FOR  GLOBAL_ID and
# BEGIN LEXER FOR  GLOBAL_ID or
# BEGIN LEXER FOR  GLOBAL_ID +
<GLOBAL_ID_-_1> ::= <GLOBAL_ID_-_2> ;
<GLOBAL_ID_-_2> ::= <GLOBAL_ID_-_3> ;
<GLOBAL_ID_-_2> ::= <GLOBAL_ID_-_3> <GLOBAL_ID_-_2> ;
# BEGIN LEXER FOR  GLOBAL_ID char_set
<GLOBAL_ID_-_3> ::= 'A' ;
<GLOBAL_ID_-_3> ::= 'B' ;
<GLOBAL_ID_-_3> ::= 'C' ;
<GLOBAL_ID_-_3> ::= 'D' ;
<GLOBAL_ID_-_3> ::= 'E' ;
<GLOBAL_ID_-_3> ::= 'F' ;
<GLOBAL_ID_-_3> ::= 'G' ;
<GLOBAL_ID_-_3> ::= 'H' ;
<GLOBAL_ID_-_3> ::= 'I' ;
<GLOBAL_ID_-_3> ::= 'J' ;
<GLOBAL_ID_-_3> ::= 'K' ;
<GLOBAL_ID_-_3> ::= 'L' ;
<GLOBAL_ID_-_3> ::= 'M' ;
<GLOBAL_ID_-_3> ::= 'N' ;
<GLOBAL_ID_-_3> ::= 'O' ;
<GLOBAL_ID_-_3> ::= 'P' ;
<GLOBAL_ID_-_3> ::= 'Q' ;
<GLOBAL_ID_-_3> ::= 'R' ;
<GLOBAL_ID_-_3> ::= 'S' ;
<GLOBAL_ID_-_3> ::= 'T' ;
<GLOBAL_ID_-_3> ::= 'U' ;
<GLOBAL_ID_-_3> ::= 'V' ;
<GLOBAL_ID_-_3> ::= 'W' ;
<GLOBAL_ID_-_3> ::= 'X' ;
<GLOBAL_ID_-_3> ::= 'Y' ;
<GLOBAL_ID_-_3> ::= 'Z' ;
<GLOBAL_ID_-_3> ::= '0' ;
<GLOBAL_ID_-_3> ::= '1' ;
<GLOBAL_ID_-_3> ::= '2' ;
<GLOBAL_ID_-_3> ::= '3' ;
<GLOBAL_ID_-_3> ::= '4' ;
<GLOBAL_ID_-_3> ::= '5' ;
<GLOBAL_ID_-_3> ::= '6' ;
<GLOBAL_ID_-_3> ::= '7' ;
<GLOBAL_ID_-_3> ::= '8' ;
<GLOBAL_ID_-_3> ::= '9' ;
<GLOBAL_ID_-_3> ::= '.' ;
<GLOBAL_ID_-_3> ::= '_' ;
<GLOBAL_ID_-_3> ::= '$' ;
# END
# END
# BEGIN LEXER FOR  GLOBAL_ID token
<GLOBAL_ID_-_1> ::= <BQUOTA_STRING> ;
# END
# END
<GLOBAL_ID> ::= '@' '@' <GLOBAL_ID_-_1> ' ' ;
# END
# LEXER: CHARSET_NAME
# BEGIN LEXER FOR  CHARSET_NAME or
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <ARMSCII8> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <ASCII> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <BIG5> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <BINARY> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <CP1250> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <CP1251> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <CP1256> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <CP1257> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <CP850> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <CP852> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <CP866> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <CP932> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <DEC8> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <EUCJPMS> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <EUCKR> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <GB2312> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <GBK> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <GEOSTD8> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <GREEK> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <HEBREW> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <HP8> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <KEYBCS2> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <KOI8R> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <KOI8U> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <LATIN1> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <LATIN2> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <LATIN5> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <LATIN7> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <MACCE> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <MACROMAN> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <SJIS> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <SWE7> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <TIS620> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <UCS2> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <UJIS> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <UTF16> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <UTF16LE> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <UTF32> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <UTF8> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <UTF8MB3> ;
# END
# BEGIN LEXER FOR  CHARSET_NAME token
<CHARSET_NAME> ::= <UTF8MB4> ;
# END
# END
# LEXER: EXPONENT_NUM_PART
# BEGIN LEXER FOR  EXPONENT_NUM_PART and
# BEGIN LEXER FOR  EXPONENT_NUM_PART ?
<EXPONENT_NUM_PART_-_1> ::= ;
# BEGIN LEXER FOR  EXPONENT_NUM_PART char_set
<EXPONENT_NUM_PART_-_1> ::= '-' ;
<EXPONENT_NUM_PART_-_1> ::= '+' ;
# END
# END
# BEGIN LEXER FOR  EXPONENT_NUM_PART +
<EXPONENT_NUM_PART_-_2> ::= <EXPONENT_NUM_PART_-_3> ;
<EXPONENT_NUM_PART_-_3> ::= <EXPONENT_NUM_PART_-_4> ;
<EXPONENT_NUM_PART_-_3> ::= <EXPONENT_NUM_PART_-_4> <EXPONENT_NUM_PART_-_3> ;
# BEGIN LEXER FOR  EXPONENT_NUM_PART token
<EXPONENT_NUM_PART_-_4> ::= <DEC_DIGIT> ;
# END
# END
<EXPONENT_NUM_PART> ::= 'E' <EXPONENT_NUM_PART_-_1> <EXPONENT_NUM_PART_-_2> ;
# END
# LEXER: ID_LITERAL
# BEGIN LEXER FOR  ID_LITERAL and
# BEGIN LEXER FOR  ID_LITERAL ?
<ID_LITERAL_-_1> ::= ;
# BEGIN LEXER FOR  ID_LITERAL char_set
<ID_LITERAL_-_1> ::= 'A' ;
<ID_LITERAL_-_1> ::= 'B' ;
<ID_LITERAL_-_1> ::= 'C' ;
<ID_LITERAL_-_1> ::= 'D' ;
<ID_LITERAL_-_1> ::= 'E' ;
<ID_LITERAL_-_1> ::= 'F' ;
<ID_LITERAL_-_1> ::= 'G' ;
<ID_LITERAL_-_1> ::= 'H' ;
<ID_LITERAL_-_1> ::= 'I' ;
<ID_LITERAL_-_1> ::= 'J' ;
<ID_LITERAL_-_1> ::= 'K' ;
<ID_LITERAL_-_1> ::= 'L' ;
<ID_LITERAL_-_1> ::= 'M' ;
<ID_LITERAL_-_1> ::= 'N' ;
<ID_LITERAL_-_1> ::= 'O' ;
<ID_LITERAL_-_1> ::= 'P' ;
<ID_LITERAL_-_1> ::= 'Q' ;
<ID_LITERAL_-_1> ::= 'R' ;
<ID_LITERAL_-_1> ::= 'S' ;
<ID_LITERAL_-_1> ::= 'T' ;
<ID_LITERAL_-_1> ::= 'U' ;
<ID_LITERAL_-_1> ::= 'V' ;
<ID_LITERAL_-_1> ::= 'W' ;
<ID_LITERAL_-_1> ::= 'X' ;
<ID_LITERAL_-_1> ::= 'Y' ;
<ID_LITERAL_-_1> ::= 'Z' ;
<ID_LITERAL_-_1> ::= '_' ;
<ID_LITERAL_-_1> ::= '$' ;
<ID_LITERAL_-_1> ::= '0' ;
<ID_LITERAL_-_1> ::= '1' ;
<ID_LITERAL_-_1> ::= '2' ;
<ID_LITERAL_-_1> ::= '3' ;
<ID_LITERAL_-_1> ::= '4' ;
<ID_LITERAL_-_1> ::= '5' ;
<ID_LITERAL_-_1> ::= '6' ;
<ID_LITERAL_-_1> ::= '7' ;
<ID_LITERAL_-_1> ::= '8' ;
<ID_LITERAL_-_1> ::= '9' ;
# END
# END
# BEGIN LEXER FOR  ID_LITERAL ?
<ID_LITERAL_-_2> ::= ;
# BEGIN LEXER FOR  ID_LITERAL char_set
<ID_LITERAL_-_2> ::= 'A' ;
<ID_LITERAL_-_2> ::= 'B' ;
<ID_LITERAL_-_2> ::= 'C' ;
<ID_LITERAL_-_2> ::= 'D' ;
<ID_LITERAL_-_2> ::= 'E' ;
<ID_LITERAL_-_2> ::= 'F' ;
<ID_LITERAL_-_2> ::= 'G' ;
<ID_LITERAL_-_2> ::= 'H' ;
<ID_LITERAL_-_2> ::= 'I' ;
<ID_LITERAL_-_2> ::= 'J' ;
<ID_LITERAL_-_2> ::= 'K' ;
<ID_LITERAL_-_2> ::= 'L' ;
<ID_LITERAL_-_2> ::= 'M' ;
<ID_LITERAL_-_2> ::= 'N' ;
<ID_LITERAL_-_2> ::= 'O' ;
<ID_LITERAL_-_2> ::= 'P' ;
<ID_LITERAL_-_2> ::= 'Q' ;
<ID_LITERAL_-_2> ::= 'R' ;
<ID_LITERAL_-_2> ::= 'S' ;
<ID_LITERAL_-_2> ::= 'T' ;
<ID_LITERAL_-_2> ::= 'U' ;
<ID_LITERAL_-_2> ::= 'V' ;
<ID_LITERAL_-_2> ::= 'W' ;
<ID_LITERAL_-_2> ::= 'X' ;
<ID_LITERAL_-_2> ::= 'Y' ;
<ID_LITERAL_-_2> ::= 'Z' ;
<ID_LITERAL_-_2> ::= '_' ;
<ID_LITERAL_-_2> ::= '$' ;
# END
# END
# BEGIN LEXER FOR  ID_LITERAL *
<ID_LITERAL_-_3> ::= <ID_LITERAL_-_4> ;
<ID_LITERAL_-_4> ::= ;
# BEGIN LEXER FOR  ID_LITERAL and
# BEGIN LEXER FOR  ID_LITERAL char_set
<ID_LITERAL_-_5> ::= 'A' ;
<ID_LITERAL_-_5> ::= 'B' ;
<ID_LITERAL_-_5> ::= 'C' ;
<ID_LITERAL_-_5> ::= 'D' ;
<ID_LITERAL_-_5> ::= 'E' ;
<ID_LITERAL_-_5> ::= 'F' ;
<ID_LITERAL_-_5> ::= 'G' ;
<ID_LITERAL_-_5> ::= 'H' ;
<ID_LITERAL_-_5> ::= 'I' ;
<ID_LITERAL_-_5> ::= 'J' ;
<ID_LITERAL_-_5> ::= 'K' ;
<ID_LITERAL_-_5> ::= 'L' ;
<ID_LITERAL_-_5> ::= 'M' ;
<ID_LITERAL_-_5> ::= 'N' ;
<ID_LITERAL_-_5> ::= 'O' ;
<ID_LITERAL_-_5> ::= 'P' ;
<ID_LITERAL_-_5> ::= 'Q' ;
<ID_LITERAL_-_5> ::= 'R' ;
<ID_LITERAL_-_5> ::= 'S' ;
<ID_LITERAL_-_5> ::= 'T' ;
<ID_LITERAL_-_5> ::= 'U' ;
<ID_LITERAL_-_5> ::= 'V' ;
<ID_LITERAL_-_5> ::= 'W' ;
<ID_LITERAL_-_5> ::= 'X' ;
<ID_LITERAL_-_5> ::= 'Y' ;
<ID_LITERAL_-_5> ::= 'Z' ;
<ID_LITERAL_-_5> ::= '_' ;
<ID_LITERAL_-_5> ::= '$' ;
<ID_LITERAL_-_5> ::= '0' ;
<ID_LITERAL_-_5> ::= '1' ;
<ID_LITERAL_-_5> ::= '2' ;
<ID_LITERAL_-_5> ::= '3' ;
<ID_LITERAL_-_5> ::= '4' ;
<ID_LITERAL_-_5> ::= '5' ;
<ID_LITERAL_-_5> ::= '6' ;
<ID_LITERAL_-_5> ::= '7' ;
<ID_LITERAL_-_5> ::= '8' ;
<ID_LITERAL_-_5> ::= '9' ;
# END
<ID_LITERAL_-_4> ::= <ID_LITERAL_-_5> <ID_LITERAL_-_4> ;
# END
# END
<ID_LITERAL> ::= <ID_LITERAL_-_1> <ID_LITERAL_-_2> <ID_LITERAL_-_3> ;
# END
# LEXER: DQUOTA_STRING
# BEGIN LEXER FOR  DQUOTA_STRING and
# BEGIN LEXER FOR  DQUOTA_STRING *
<DQUOTA_STRING_-_1> ::= <DQUOTA_STRING_-_2> ;
<DQUOTA_STRING_-_2> ::= ;
# BEGIN LEXER FOR  DQUOTA_STRING and
# BEGIN LEXER FOR  DQUOTA_STRING or
# BEGIN LEXER FOR  DQUOTA_STRING and
# BEGIN LEXER FOR  DQUOTA_STRING .
<DQUOTA_STRING_-_4> ::= ' '  ;
<DQUOTA_STRING_-_4> ::= '!'  ;
<DQUOTA_STRING_-_4> ::= '"'  ;
<DQUOTA_STRING_-_4> ::= '#'  ;
<DQUOTA_STRING_-_4> ::= '$'  ;
<DQUOTA_STRING_-_4> ::= '%'  ;
<DQUOTA_STRING_-_4> ::= '&'  ;
<DQUOTA_STRING_-_4> ::=  39   ;
<DQUOTA_STRING_-_4> ::= '('  ;
<DQUOTA_STRING_-_4> ::= ')'  ;
<DQUOTA_STRING_-_4> ::= '*'  ;
<DQUOTA_STRING_-_4> ::= '+'  ;
<DQUOTA_STRING_-_4> ::= ','  ;
<DQUOTA_STRING_-_4> ::= '-'  ;
<DQUOTA_STRING_-_4> ::= '.'  ;
<DQUOTA_STRING_-_4> ::= '/'  ;
<DQUOTA_STRING_-_4> ::= '0'  ;
<DQUOTA_STRING_-_4> ::= '1'  ;
<DQUOTA_STRING_-_4> ::= '2'  ;
<DQUOTA_STRING_-_4> ::= '3'  ;
<DQUOTA_STRING_-_4> ::= '4'  ;
<DQUOTA_STRING_-_4> ::= '5'  ;
<DQUOTA_STRING_-_4> ::= '6'  ;
<DQUOTA_STRING_-_4> ::= '7'  ;
<DQUOTA_STRING_-_4> ::= '8'  ;
<DQUOTA_STRING_-_4> ::= '9'  ;
<DQUOTA_STRING_-_4> ::= ':'  ;
<DQUOTA_STRING_-_4> ::= ';'  ;
<DQUOTA_STRING_-_4> ::= '<'  ;
<DQUOTA_STRING_-_4> ::= '='  ;
<DQUOTA_STRING_-_4> ::= '>'  ;
<DQUOTA_STRING_-_4> ::= '?'  ;
<DQUOTA_STRING_-_4> ::= '@'  ;
<DQUOTA_STRING_-_4> ::= 'A'  ;
<DQUOTA_STRING_-_4> ::= 'B'  ;
<DQUOTA_STRING_-_4> ::= 'C'  ;
<DQUOTA_STRING_-_4> ::= 'D'  ;
<DQUOTA_STRING_-_4> ::= 'E'  ;
<DQUOTA_STRING_-_4> ::= 'F'  ;
<DQUOTA_STRING_-_4> ::= 'G'  ;
<DQUOTA_STRING_-_4> ::= 'H'  ;
<DQUOTA_STRING_-_4> ::= 'I'  ;
<DQUOTA_STRING_-_4> ::= 'J'  ;
<DQUOTA_STRING_-_4> ::= 'K'  ;
<DQUOTA_STRING_-_4> ::= 'L'  ;
<DQUOTA_STRING_-_4> ::= 'M'  ;
<DQUOTA_STRING_-_4> ::= 'N'  ;
<DQUOTA_STRING_-_4> ::= 'O'  ;
<DQUOTA_STRING_-_4> ::= 'P'  ;
<DQUOTA_STRING_-_4> ::= 'Q'  ;
<DQUOTA_STRING_-_4> ::= 'R'  ;
<DQUOTA_STRING_-_4> ::= 'S'  ;
<DQUOTA_STRING_-_4> ::= 'T'  ;
<DQUOTA_STRING_-_4> ::= 'U'  ;
<DQUOTA_STRING_-_4> ::= 'V'  ;
<DQUOTA_STRING_-_4> ::= 'W'  ;
<DQUOTA_STRING_-_4> ::= 'X'  ;
<DQUOTA_STRING_-_4> ::= 'Y'  ;
<DQUOTA_STRING_-_4> ::= 'Z'  ;
<DQUOTA_STRING_-_4> ::= '['  ;
<DQUOTA_STRING_-_4> ::= '\'  ;
<DQUOTA_STRING_-_4> ::= ']'  ;
<DQUOTA_STRING_-_4> ::= '^'  ;
<DQUOTA_STRING_-_4> ::= '_'  ;
<DQUOTA_STRING_-_4> ::= '`'  ;
<DQUOTA_STRING_-_4> ::= 'a'  ;
<DQUOTA_STRING_-_4> ::= 'b'  ;
<DQUOTA_STRING_-_4> ::= 'c'  ;
<DQUOTA_STRING_-_4> ::= 'd'  ;
<DQUOTA_STRING_-_4> ::= 'e'  ;
<DQUOTA_STRING_-_4> ::= 'f'  ;
<DQUOTA_STRING_-_4> ::= 'g'  ;
<DQUOTA_STRING_-_4> ::= 'h'  ;
<DQUOTA_STRING_-_4> ::= 'i'  ;
<DQUOTA_STRING_-_4> ::= 'j'  ;
<DQUOTA_STRING_-_4> ::= 'k'  ;
<DQUOTA_STRING_-_4> ::= 'l'  ;
<DQUOTA_STRING_-_4> ::= 'm'  ;
<DQUOTA_STRING_-_4> ::= 'n'  ;
<DQUOTA_STRING_-_4> ::= 'o'  ;
<DQUOTA_STRING_-_4> ::= 'p'  ;
<DQUOTA_STRING_-_4> ::= 'q'  ;
<DQUOTA_STRING_-_4> ::= 'r'  ;
<DQUOTA_STRING_-_4> ::= 's'  ;
<DQUOTA_STRING_-_4> ::= 't'  ;
<DQUOTA_STRING_-_4> ::= 'u'  ;
<DQUOTA_STRING_-_4> ::= 'v'  ;
<DQUOTA_STRING_-_4> ::= 'w'  ;
<DQUOTA_STRING_-_4> ::= 'x'  ;
<DQUOTA_STRING_-_4> ::= 'y'  ;
<DQUOTA_STRING_-_4> ::= 'z'  ;
<DQUOTA_STRING_-_4> ::= '{'  ;
<DQUOTA_STRING_-_4> ::= '|'  ;
<DQUOTA_STRING_-_4> ::= '}'  ;
<DQUOTA_STRING_-_4> ::= '~'  ;
# END
<DQUOTA_STRING_-_3> ::= '\' <DQUOTA_STRING_-_4> ;
# END
# BEGIN LEXER FOR  DQUOTA_STRING string
<DQUOTA_STRING_-_3> ::= '""' ;
# END
# BEGIN LEXER FOR  DQUOTA_STRING not
# BEGIN LEXER FOR  DQUOTA_STRING and
# BEGIN LEXER FOR  DQUOTA_STRING not
<DQUOTA_STRING_-_5> ::= ' ' ;
<DQUOTA_STRING_-_5> ::= '!' ;
<DQUOTA_STRING_-_5> ::= '#' ;
<DQUOTA_STRING_-_5> ::= '$' ;
<DQUOTA_STRING_-_5> ::= '%' ;
<DQUOTA_STRING_-_5> ::= '&' ;
<DQUOTA_STRING_-_5> ::=  39  ;
<DQUOTA_STRING_-_5> ::= '(' ;
<DQUOTA_STRING_-_5> ::= ')' ;
<DQUOTA_STRING_-_5> ::= '*' ;
<DQUOTA_STRING_-_5> ::= '+' ;
<DQUOTA_STRING_-_5> ::= ',' ;
<DQUOTA_STRING_-_5> ::= '-' ;
<DQUOTA_STRING_-_5> ::= '.' ;
<DQUOTA_STRING_-_5> ::= '/' ;
<DQUOTA_STRING_-_5> ::= '0' ;
<DQUOTA_STRING_-_5> ::= '1' ;
<DQUOTA_STRING_-_5> ::= '2' ;
<DQUOTA_STRING_-_5> ::= '3' ;
<DQUOTA_STRING_-_5> ::= '4' ;
<DQUOTA_STRING_-_5> ::= '5' ;
<DQUOTA_STRING_-_5> ::= '6' ;
<DQUOTA_STRING_-_5> ::= '7' ;
<DQUOTA_STRING_-_5> ::= '8' ;
<DQUOTA_STRING_-_5> ::= '9' ;
<DQUOTA_STRING_-_5> ::= ':' ;
<DQUOTA_STRING_-_5> ::= ';' ;
<DQUOTA_STRING_-_5> ::= '<' ;
<DQUOTA_STRING_-_5> ::= '=' ;
<DQUOTA_STRING_-_5> ::= '>' ;
<DQUOTA_STRING_-_5> ::= '?' ;
<DQUOTA_STRING_-_5> ::= '@' ;
<DQUOTA_STRING_-_5> ::= 'A' ;
<DQUOTA_STRING_-_5> ::= 'B' ;
<DQUOTA_STRING_-_5> ::= 'C' ;
<DQUOTA_STRING_-_5> ::= 'D' ;
<DQUOTA_STRING_-_5> ::= 'E' ;
<DQUOTA_STRING_-_5> ::= 'F' ;
<DQUOTA_STRING_-_5> ::= 'G' ;
<DQUOTA_STRING_-_5> ::= 'H' ;
<DQUOTA_STRING_-_5> ::= 'I' ;
<DQUOTA_STRING_-_5> ::= 'J' ;
<DQUOTA_STRING_-_5> ::= 'K' ;
<DQUOTA_STRING_-_5> ::= 'L' ;
<DQUOTA_STRING_-_5> ::= 'M' ;
<DQUOTA_STRING_-_5> ::= 'N' ;
<DQUOTA_STRING_-_5> ::= 'O' ;
<DQUOTA_STRING_-_5> ::= 'P' ;
<DQUOTA_STRING_-_5> ::= 'Q' ;
<DQUOTA_STRING_-_5> ::= 'R' ;
<DQUOTA_STRING_-_5> ::= 'S' ;
<DQUOTA_STRING_-_5> ::= 'T' ;
<DQUOTA_STRING_-_5> ::= 'U' ;
<DQUOTA_STRING_-_5> ::= 'V' ;
<DQUOTA_STRING_-_5> ::= 'W' ;
<DQUOTA_STRING_-_5> ::= 'X' ;
<DQUOTA_STRING_-_5> ::= 'Y' ;
<DQUOTA_STRING_-_5> ::= 'Z' ;
<DQUOTA_STRING_-_5> ::= '[' ;
<DQUOTA_STRING_-_5> ::= '\' ;
<DQUOTA_STRING_-_5> ::= ']' ;
<DQUOTA_STRING_-_5> ::= '^' ;
<DQUOTA_STRING_-_5> ::= '_' ;
<DQUOTA_STRING_-_5> ::= '`' ;
<DQUOTA_STRING_-_5> ::= 'a' ;
<DQUOTA_STRING_-_5> ::= 'b' ;
<DQUOTA_STRING_-_5> ::= 'c' ;
<DQUOTA_STRING_-_5> ::= 'd' ;
<DQUOTA_STRING_-_5> ::= 'e' ;
<DQUOTA_STRING_-_5> ::= 'f' ;
<DQUOTA_STRING_-_5> ::= 'g' ;
<DQUOTA_STRING_-_5> ::= 'h' ;
<DQUOTA_STRING_-_5> ::= 'i' ;
<DQUOTA_STRING_-_5> ::= 'j' ;
<DQUOTA_STRING_-_5> ::= 'k' ;
<DQUOTA_STRING_-_5> ::= 'l' ;
<DQUOTA_STRING_-_5> ::= 'm' ;
<DQUOTA_STRING_-_5> ::= 'n' ;
<DQUOTA_STRING_-_5> ::= 'o' ;
<DQUOTA_STRING_-_5> ::= 'p' ;
<DQUOTA_STRING_-_5> ::= 'q' ;
<DQUOTA_STRING_-_5> ::= 'r' ;
<DQUOTA_STRING_-_5> ::= 's' ;
<DQUOTA_STRING_-_5> ::= 't' ;
<DQUOTA_STRING_-_5> ::= 'u' ;
<DQUOTA_STRING_-_5> ::= 'v' ;
<DQUOTA_STRING_-_5> ::= 'w' ;
<DQUOTA_STRING_-_5> ::= 'x' ;
<DQUOTA_STRING_-_5> ::= 'y' ;
<DQUOTA_STRING_-_5> ::= 'z' ;
<DQUOTA_STRING_-_5> ::= '{' ;
<DQUOTA_STRING_-_5> ::= '|' ;
<DQUOTA_STRING_-_5> ::= '}' ;
<DQUOTA_STRING_-_5> ::= '~' ;
# END
# BEGIN LEXER FOR  DQUOTA_STRING not
<DQUOTA_STRING_-_6> ::= ' ' ;
<DQUOTA_STRING_-_6> ::= '!' ;
<DQUOTA_STRING_-_6> ::= '"' ;
<DQUOTA_STRING_-_6> ::= '#' ;
<DQUOTA_STRING_-_6> ::= '$' ;
<DQUOTA_STRING_-_6> ::= '%' ;
<DQUOTA_STRING_-_6> ::= '&' ;
<DQUOTA_STRING_-_6> ::=  39  ;
<DQUOTA_STRING_-_6> ::= '(' ;
<DQUOTA_STRING_-_6> ::= ')' ;
<DQUOTA_STRING_-_6> ::= '*' ;
<DQUOTA_STRING_-_6> ::= '+' ;
<DQUOTA_STRING_-_6> ::= ',' ;
<DQUOTA_STRING_-_6> ::= '-' ;
<DQUOTA_STRING_-_6> ::= '.' ;
<DQUOTA_STRING_-_6> ::= '/' ;
<DQUOTA_STRING_-_6> ::= '0' ;
<DQUOTA_STRING_-_6> ::= '1' ;
<DQUOTA_STRING_-_6> ::= '2' ;
<DQUOTA_STRING_-_6> ::= '3' ;
<DQUOTA_STRING_-_6> ::= '4' ;
<DQUOTA_STRING_-_6> ::= '5' ;
<DQUOTA_STRING_-_6> ::= '6' ;
<DQUOTA_STRING_-_6> ::= '7' ;
<DQUOTA_STRING_-_6> ::= '8' ;
<DQUOTA_STRING_-_6> ::= '9' ;
<DQUOTA_STRING_-_6> ::= ':' ;
<DQUOTA_STRING_-_6> ::= ';' ;
<DQUOTA_STRING_-_6> ::= '<' ;
<DQUOTA_STRING_-_6> ::= '=' ;
<DQUOTA_STRING_-_6> ::= '>' ;
<DQUOTA_STRING_-_6> ::= '?' ;
<DQUOTA_STRING_-_6> ::= '@' ;
<DQUOTA_STRING_-_6> ::= 'A' ;
<DQUOTA_STRING_-_6> ::= 'B' ;
<DQUOTA_STRING_-_6> ::= 'C' ;
<DQUOTA_STRING_-_6> ::= 'D' ;
<DQUOTA_STRING_-_6> ::= 'E' ;
<DQUOTA_STRING_-_6> ::= 'F' ;
<DQUOTA_STRING_-_6> ::= 'G' ;
<DQUOTA_STRING_-_6> ::= 'H' ;
<DQUOTA_STRING_-_6> ::= 'I' ;
<DQUOTA_STRING_-_6> ::= 'J' ;
<DQUOTA_STRING_-_6> ::= 'K' ;
<DQUOTA_STRING_-_6> ::= 'L' ;
<DQUOTA_STRING_-_6> ::= 'M' ;
<DQUOTA_STRING_-_6> ::= 'N' ;
<DQUOTA_STRING_-_6> ::= 'O' ;
<DQUOTA_STRING_-_6> ::= 'P' ;
<DQUOTA_STRING_-_6> ::= 'Q' ;
<DQUOTA_STRING_-_6> ::= 'R' ;
<DQUOTA_STRING_-_6> ::= 'S' ;
<DQUOTA_STRING_-_6> ::= 'T' ;
<DQUOTA_STRING_-_6> ::= 'U' ;
<DQUOTA_STRING_-_6> ::= 'V' ;
<DQUOTA_STRING_-_6> ::= 'W' ;
<DQUOTA_STRING_-_6> ::= 'X' ;
<DQUOTA_STRING_-_6> ::= 'Y' ;
<DQUOTA_STRING_-_6> ::= 'Z' ;
<DQUOTA_STRING_-_6> ::= '[' ;
<DQUOTA_STRING_-_6> ::= ']' ;
<DQUOTA_STRING_-_6> ::= '^' ;
<DQUOTA_STRING_-_6> ::= '_' ;
<DQUOTA_STRING_-_6> ::= '`' ;
<DQUOTA_STRING_-_6> ::= 'a' ;
<DQUOTA_STRING_-_6> ::= 'b' ;
<DQUOTA_STRING_-_6> ::= 'c' ;
<DQUOTA_STRING_-_6> ::= 'd' ;
<DQUOTA_STRING_-_6> ::= 'e' ;
<DQUOTA_STRING_-_6> ::= 'f' ;
<DQUOTA_STRING_-_6> ::= 'g' ;
<DQUOTA_STRING_-_6> ::= 'h' ;
<DQUOTA_STRING_-_6> ::= 'i' ;
<DQUOTA_STRING_-_6> ::= 'j' ;
<DQUOTA_STRING_-_6> ::= 'k' ;
<DQUOTA_STRING_-_6> ::= 'l' ;
<DQUOTA_STRING_-_6> ::= 'm' ;
<DQUOTA_STRING_-_6> ::= 'n' ;
<DQUOTA_STRING_-_6> ::= 'o' ;
<DQUOTA_STRING_-_6> ::= 'p' ;
<DQUOTA_STRING_-_6> ::= 'q' ;
<DQUOTA_STRING_-_6> ::= 'r' ;
<DQUOTA_STRING_-_6> ::= 's' ;
<DQUOTA_STRING_-_6> ::= 't' ;
<DQUOTA_STRING_-_6> ::= 'u' ;
<DQUOTA_STRING_-_6> ::= 'v' ;
<DQUOTA_STRING_-_6> ::= 'w' ;
<DQUOTA_STRING_-_6> ::= 'x' ;
<DQUOTA_STRING_-_6> ::= 'y' ;
<DQUOTA_STRING_-_6> ::= 'z' ;
<DQUOTA_STRING_-_6> ::= '{' ;
<DQUOTA_STRING_-_6> ::= '|' ;
<DQUOTA_STRING_-_6> ::= '}' ;
<DQUOTA_STRING_-_6> ::= '~' ;
# END
<DQUOTA_STRING_-_3> ::= <DQUOTA_STRING_-_5> <DQUOTA_STRING_-_6> ;
# END
# END
# END
<DQUOTA_STRING_-_2> ::= <DQUOTA_STRING_-_3> <DQUOTA_STRING_-_2> ;
# END
# END
<DQUOTA_STRING> ::= '"' <DQUOTA_STRING_-_1> '"' ;
# END
# LEXER: SQUOTA_STRING
# BEGIN LEXER FOR  SQUOTA_STRING and
# BEGIN LEXER FOR  SQUOTA_STRING *
<SQUOTA_STRING_-_1> ::= <SQUOTA_STRING_-_2> ;
<SQUOTA_STRING_-_2> ::= ;
# BEGIN LEXER FOR  SQUOTA_STRING and
# BEGIN LEXER FOR  SQUOTA_STRING or
# BEGIN LEXER FOR  SQUOTA_STRING and
# BEGIN LEXER FOR  SQUOTA_STRING .
<SQUOTA_STRING_-_4> ::= ' '  ;
<SQUOTA_STRING_-_4> ::= '!'  ;
<SQUOTA_STRING_-_4> ::= '"'  ;
<SQUOTA_STRING_-_4> ::= '#'  ;
<SQUOTA_STRING_-_4> ::= '$'  ;
<SQUOTA_STRING_-_4> ::= '%'  ;
<SQUOTA_STRING_-_4> ::= '&'  ;
<SQUOTA_STRING_-_4> ::=  39   ;
<SQUOTA_STRING_-_4> ::= '('  ;
<SQUOTA_STRING_-_4> ::= ')'  ;
<SQUOTA_STRING_-_4> ::= '*'  ;
<SQUOTA_STRING_-_4> ::= '+'  ;
<SQUOTA_STRING_-_4> ::= ','  ;
<SQUOTA_STRING_-_4> ::= '-'  ;
<SQUOTA_STRING_-_4> ::= '.'  ;
<SQUOTA_STRING_-_4> ::= '/'  ;
<SQUOTA_STRING_-_4> ::= '0'  ;
<SQUOTA_STRING_-_4> ::= '1'  ;
<SQUOTA_STRING_-_4> ::= '2'  ;
<SQUOTA_STRING_-_4> ::= '3'  ;
<SQUOTA_STRING_-_4> ::= '4'  ;
<SQUOTA_STRING_-_4> ::= '5'  ;
<SQUOTA_STRING_-_4> ::= '6'  ;
<SQUOTA_STRING_-_4> ::= '7'  ;
<SQUOTA_STRING_-_4> ::= '8'  ;
<SQUOTA_STRING_-_4> ::= '9'  ;
<SQUOTA_STRING_-_4> ::= ':'  ;
<SQUOTA_STRING_-_4> ::= ';'  ;
<SQUOTA_STRING_-_4> ::= '<'  ;
<SQUOTA_STRING_-_4> ::= '='  ;
<SQUOTA_STRING_-_4> ::= '>'  ;
<SQUOTA_STRING_-_4> ::= '?'  ;
<SQUOTA_STRING_-_4> ::= '@'  ;
<SQUOTA_STRING_-_4> ::= 'A'  ;
<SQUOTA_STRING_-_4> ::= 'B'  ;
<SQUOTA_STRING_-_4> ::= 'C'  ;
<SQUOTA_STRING_-_4> ::= 'D'  ;
<SQUOTA_STRING_-_4> ::= 'E'  ;
<SQUOTA_STRING_-_4> ::= 'F'  ;
<SQUOTA_STRING_-_4> ::= 'G'  ;
<SQUOTA_STRING_-_4> ::= 'H'  ;
<SQUOTA_STRING_-_4> ::= 'I'  ;
<SQUOTA_STRING_-_4> ::= 'J'  ;
<SQUOTA_STRING_-_4> ::= 'K'  ;
<SQUOTA_STRING_-_4> ::= 'L'  ;
<SQUOTA_STRING_-_4> ::= 'M'  ;
<SQUOTA_STRING_-_4> ::= 'N'  ;
<SQUOTA_STRING_-_4> ::= 'O'  ;
<SQUOTA_STRING_-_4> ::= 'P'  ;
<SQUOTA_STRING_-_4> ::= 'Q'  ;
<SQUOTA_STRING_-_4> ::= 'R'  ;
<SQUOTA_STRING_-_4> ::= 'S'  ;
<SQUOTA_STRING_-_4> ::= 'T'  ;
<SQUOTA_STRING_-_4> ::= 'U'  ;
<SQUOTA_STRING_-_4> ::= 'V'  ;
<SQUOTA_STRING_-_4> ::= 'W'  ;
<SQUOTA_STRING_-_4> ::= 'X'  ;
<SQUOTA_STRING_-_4> ::= 'Y'  ;
<SQUOTA_STRING_-_4> ::= 'Z'  ;
<SQUOTA_STRING_-_4> ::= '['  ;
<SQUOTA_STRING_-_4> ::= '\'  ;
<SQUOTA_STRING_-_4> ::= ']'  ;
<SQUOTA_STRING_-_4> ::= '^'  ;
<SQUOTA_STRING_-_4> ::= '_'  ;
<SQUOTA_STRING_-_4> ::= '`'  ;
<SQUOTA_STRING_-_4> ::= 'a'  ;
<SQUOTA_STRING_-_4> ::= 'b'  ;
<SQUOTA_STRING_-_4> ::= 'c'  ;
<SQUOTA_STRING_-_4> ::= 'd'  ;
<SQUOTA_STRING_-_4> ::= 'e'  ;
<SQUOTA_STRING_-_4> ::= 'f'  ;
<SQUOTA_STRING_-_4> ::= 'g'  ;
<SQUOTA_STRING_-_4> ::= 'h'  ;
<SQUOTA_STRING_-_4> ::= 'i'  ;
<SQUOTA_STRING_-_4> ::= 'j'  ;
<SQUOTA_STRING_-_4> ::= 'k'  ;
<SQUOTA_STRING_-_4> ::= 'l'  ;
<SQUOTA_STRING_-_4> ::= 'm'  ;
<SQUOTA_STRING_-_4> ::= 'n'  ;
<SQUOTA_STRING_-_4> ::= 'o'  ;
<SQUOTA_STRING_-_4> ::= 'p'  ;
<SQUOTA_STRING_-_4> ::= 'q'  ;
<SQUOTA_STRING_-_4> ::= 'r'  ;
<SQUOTA_STRING_-_4> ::= 's'  ;
<SQUOTA_STRING_-_4> ::= 't'  ;
<SQUOTA_STRING_-_4> ::= 'u'  ;
<SQUOTA_STRING_-_4> ::= 'v'  ;
<SQUOTA_STRING_-_4> ::= 'w'  ;
<SQUOTA_STRING_-_4> ::= 'x'  ;
<SQUOTA_STRING_-_4> ::= 'y'  ;
<SQUOTA_STRING_-_4> ::= 'z'  ;
<SQUOTA_STRING_-_4> ::= '{'  ;
<SQUOTA_STRING_-_4> ::= '|'  ;
<SQUOTA_STRING_-_4> ::= '}'  ;
<SQUOTA_STRING_-_4> ::= '~'  ;
# END
<SQUOTA_STRING_-_3> ::= '\' <SQUOTA_STRING_-_4> ;
# END
# BEGIN LEXER FOR  SQUOTA_STRING string
<SQUOTA_STRING_-_3> ::=  39  39  ;
# END
# BEGIN LEXER FOR  SQUOTA_STRING not
# BEGIN LEXER FOR  SQUOTA_STRING and
# BEGIN LEXER FOR  SQUOTA_STRING not
<SQUOTA_STRING_-_5> ::= ' ' ;
<SQUOTA_STRING_-_5> ::= '!' ;
<SQUOTA_STRING_-_5> ::= '"' ;
<SQUOTA_STRING_-_5> ::= '#' ;
<SQUOTA_STRING_-_5> ::= '$' ;
<SQUOTA_STRING_-_5> ::= '%' ;
<SQUOTA_STRING_-_5> ::= '&' ;
<SQUOTA_STRING_-_5> ::= '(' ;
<SQUOTA_STRING_-_5> ::= ')' ;
<SQUOTA_STRING_-_5> ::= '*' ;
<SQUOTA_STRING_-_5> ::= '+' ;
<SQUOTA_STRING_-_5> ::= ',' ;
<SQUOTA_STRING_-_5> ::= '-' ;
<SQUOTA_STRING_-_5> ::= '.' ;
<SQUOTA_STRING_-_5> ::= '/' ;
<SQUOTA_STRING_-_5> ::= '0' ;
<SQUOTA_STRING_-_5> ::= '1' ;
<SQUOTA_STRING_-_5> ::= '2' ;
<SQUOTA_STRING_-_5> ::= '3' ;
<SQUOTA_STRING_-_5> ::= '4' ;
<SQUOTA_STRING_-_5> ::= '5' ;
<SQUOTA_STRING_-_5> ::= '6' ;
<SQUOTA_STRING_-_5> ::= '7' ;
<SQUOTA_STRING_-_5> ::= '8' ;
<SQUOTA_STRING_-_5> ::= '9' ;
<SQUOTA_STRING_-_5> ::= ':' ;
<SQUOTA_STRING_-_5> ::= ';' ;
<SQUOTA_STRING_-_5> ::= '<' ;
<SQUOTA_STRING_-_5> ::= '=' ;
<SQUOTA_STRING_-_5> ::= '>' ;
<SQUOTA_STRING_-_5> ::= '?' ;
<SQUOTA_STRING_-_5> ::= '@' ;
<SQUOTA_STRING_-_5> ::= 'A' ;
<SQUOTA_STRING_-_5> ::= 'B' ;
<SQUOTA_STRING_-_5> ::= 'C' ;
<SQUOTA_STRING_-_5> ::= 'D' ;
<SQUOTA_STRING_-_5> ::= 'E' ;
<SQUOTA_STRING_-_5> ::= 'F' ;
<SQUOTA_STRING_-_5> ::= 'G' ;
<SQUOTA_STRING_-_5> ::= 'H' ;
<SQUOTA_STRING_-_5> ::= 'I' ;
<SQUOTA_STRING_-_5> ::= 'J' ;
<SQUOTA_STRING_-_5> ::= 'K' ;
<SQUOTA_STRING_-_5> ::= 'L' ;
<SQUOTA_STRING_-_5> ::= 'M' ;
<SQUOTA_STRING_-_5> ::= 'N' ;
<SQUOTA_STRING_-_5> ::= 'O' ;
<SQUOTA_STRING_-_5> ::= 'P' ;
<SQUOTA_STRING_-_5> ::= 'Q' ;
<SQUOTA_STRING_-_5> ::= 'R' ;
<SQUOTA_STRING_-_5> ::= 'S' ;
<SQUOTA_STRING_-_5> ::= 'T' ;
<SQUOTA_STRING_-_5> ::= 'U' ;
<SQUOTA_STRING_-_5> ::= 'V' ;
<SQUOTA_STRING_-_5> ::= 'W' ;
<SQUOTA_STRING_-_5> ::= 'X' ;
<SQUOTA_STRING_-_5> ::= 'Y' ;
<SQUOTA_STRING_-_5> ::= 'Z' ;
<SQUOTA_STRING_-_5> ::= '[' ;
<SQUOTA_STRING_-_5> ::= '\' ;
<SQUOTA_STRING_-_5> ::= ']' ;
<SQUOTA_STRING_-_5> ::= '^' ;
<SQUOTA_STRING_-_5> ::= '_' ;
<SQUOTA_STRING_-_5> ::= '`' ;
<SQUOTA_STRING_-_5> ::= 'a' ;
<SQUOTA_STRING_-_5> ::= 'b' ;
<SQUOTA_STRING_-_5> ::= 'c' ;
<SQUOTA_STRING_-_5> ::= 'd' ;
<SQUOTA_STRING_-_5> ::= 'e' ;
<SQUOTA_STRING_-_5> ::= 'f' ;
<SQUOTA_STRING_-_5> ::= 'g' ;
<SQUOTA_STRING_-_5> ::= 'h' ;
<SQUOTA_STRING_-_5> ::= 'i' ;
<SQUOTA_STRING_-_5> ::= 'j' ;
<SQUOTA_STRING_-_5> ::= 'k' ;
<SQUOTA_STRING_-_5> ::= 'l' ;
<SQUOTA_STRING_-_5> ::= 'm' ;
<SQUOTA_STRING_-_5> ::= 'n' ;
<SQUOTA_STRING_-_5> ::= 'o' ;
<SQUOTA_STRING_-_5> ::= 'p' ;
<SQUOTA_STRING_-_5> ::= 'q' ;
<SQUOTA_STRING_-_5> ::= 'r' ;
<SQUOTA_STRING_-_5> ::= 's' ;
<SQUOTA_STRING_-_5> ::= 't' ;
<SQUOTA_STRING_-_5> ::= 'u' ;
<SQUOTA_STRING_-_5> ::= 'v' ;
<SQUOTA_STRING_-_5> ::= 'w' ;
<SQUOTA_STRING_-_5> ::= 'x' ;
<SQUOTA_STRING_-_5> ::= 'y' ;
<SQUOTA_STRING_-_5> ::= 'z' ;
<SQUOTA_STRING_-_5> ::= '{' ;
<SQUOTA_STRING_-_5> ::= '|' ;
<SQUOTA_STRING_-_5> ::= '}' ;
<SQUOTA_STRING_-_5> ::= '~' ;
# END
# BEGIN LEXER FOR  SQUOTA_STRING not
<SQUOTA_STRING_-_6> ::= ' ' ;
<SQUOTA_STRING_-_6> ::= '!' ;
<SQUOTA_STRING_-_6> ::= '"' ;
<SQUOTA_STRING_-_6> ::= '#' ;
<SQUOTA_STRING_-_6> ::= '$' ;
<SQUOTA_STRING_-_6> ::= '%' ;
<SQUOTA_STRING_-_6> ::= '&' ;
<SQUOTA_STRING_-_6> ::=  39  ;
<SQUOTA_STRING_-_6> ::= '(' ;
<SQUOTA_STRING_-_6> ::= ')' ;
<SQUOTA_STRING_-_6> ::= '*' ;
<SQUOTA_STRING_-_6> ::= '+' ;
<SQUOTA_STRING_-_6> ::= ',' ;
<SQUOTA_STRING_-_6> ::= '-' ;
<SQUOTA_STRING_-_6> ::= '.' ;
<SQUOTA_STRING_-_6> ::= '/' ;
<SQUOTA_STRING_-_6> ::= '0' ;
<SQUOTA_STRING_-_6> ::= '1' ;
<SQUOTA_STRING_-_6> ::= '2' ;
<SQUOTA_STRING_-_6> ::= '3' ;
<SQUOTA_STRING_-_6> ::= '4' ;
<SQUOTA_STRING_-_6> ::= '5' ;
<SQUOTA_STRING_-_6> ::= '6' ;
<SQUOTA_STRING_-_6> ::= '7' ;
<SQUOTA_STRING_-_6> ::= '8' ;
<SQUOTA_STRING_-_6> ::= '9' ;
<SQUOTA_STRING_-_6> ::= ':' ;
<SQUOTA_STRING_-_6> ::= ';' ;
<SQUOTA_STRING_-_6> ::= '<' ;
<SQUOTA_STRING_-_6> ::= '=' ;
<SQUOTA_STRING_-_6> ::= '>' ;
<SQUOTA_STRING_-_6> ::= '?' ;
<SQUOTA_STRING_-_6> ::= '@' ;
<SQUOTA_STRING_-_6> ::= 'A' ;
<SQUOTA_STRING_-_6> ::= 'B' ;
<SQUOTA_STRING_-_6> ::= 'C' ;
<SQUOTA_STRING_-_6> ::= 'D' ;
<SQUOTA_STRING_-_6> ::= 'E' ;
<SQUOTA_STRING_-_6> ::= 'F' ;
<SQUOTA_STRING_-_6> ::= 'G' ;
<SQUOTA_STRING_-_6> ::= 'H' ;
<SQUOTA_STRING_-_6> ::= 'I' ;
<SQUOTA_STRING_-_6> ::= 'J' ;
<SQUOTA_STRING_-_6> ::= 'K' ;
<SQUOTA_STRING_-_6> ::= 'L' ;
<SQUOTA_STRING_-_6> ::= 'M' ;
<SQUOTA_STRING_-_6> ::= 'N' ;
<SQUOTA_STRING_-_6> ::= 'O' ;
<SQUOTA_STRING_-_6> ::= 'P' ;
<SQUOTA_STRING_-_6> ::= 'Q' ;
<SQUOTA_STRING_-_6> ::= 'R' ;
<SQUOTA_STRING_-_6> ::= 'S' ;
<SQUOTA_STRING_-_6> ::= 'T' ;
<SQUOTA_STRING_-_6> ::= 'U' ;
<SQUOTA_STRING_-_6> ::= 'V' ;
<SQUOTA_STRING_-_6> ::= 'W' ;
<SQUOTA_STRING_-_6> ::= 'X' ;
<SQUOTA_STRING_-_6> ::= 'Y' ;
<SQUOTA_STRING_-_6> ::= 'Z' ;
<SQUOTA_STRING_-_6> ::= '[' ;
<SQUOTA_STRING_-_6> ::= ']' ;
<SQUOTA_STRING_-_6> ::= '^' ;
<SQUOTA_STRING_-_6> ::= '_' ;
<SQUOTA_STRING_-_6> ::= '`' ;
<SQUOTA_STRING_-_6> ::= 'a' ;
<SQUOTA_STRING_-_6> ::= 'b' ;
<SQUOTA_STRING_-_6> ::= 'c' ;
<SQUOTA_STRING_-_6> ::= 'd' ;
<SQUOTA_STRING_-_6> ::= 'e' ;
<SQUOTA_STRING_-_6> ::= 'f' ;
<SQUOTA_STRING_-_6> ::= 'g' ;
<SQUOTA_STRING_-_6> ::= 'h' ;
<SQUOTA_STRING_-_6> ::= 'i' ;
<SQUOTA_STRING_-_6> ::= 'j' ;
<SQUOTA_STRING_-_6> ::= 'k' ;
<SQUOTA_STRING_-_6> ::= 'l' ;
<SQUOTA_STRING_-_6> ::= 'm' ;
<SQUOTA_STRING_-_6> ::= 'n' ;
<SQUOTA_STRING_-_6> ::= 'o' ;
<SQUOTA_STRING_-_6> ::= 'p' ;
<SQUOTA_STRING_-_6> ::= 'q' ;
<SQUOTA_STRING_-_6> ::= 'r' ;
<SQUOTA_STRING_-_6> ::= 's' ;
<SQUOTA_STRING_-_6> ::= 't' ;
<SQUOTA_STRING_-_6> ::= 'u' ;
<SQUOTA_STRING_-_6> ::= 'v' ;
<SQUOTA_STRING_-_6> ::= 'w' ;
<SQUOTA_STRING_-_6> ::= 'x' ;
<SQUOTA_STRING_-_6> ::= 'y' ;
<SQUOTA_STRING_-_6> ::= 'z' ;
<SQUOTA_STRING_-_6> ::= '{' ;
<SQUOTA_STRING_-_6> ::= '|' ;
<SQUOTA_STRING_-_6> ::= '}' ;
<SQUOTA_STRING_-_6> ::= '~' ;
# END
<SQUOTA_STRING_-_3> ::= <SQUOTA_STRING_-_5> <SQUOTA_STRING_-_6> ;
# END
# END
# END
<SQUOTA_STRING_-_2> ::= <SQUOTA_STRING_-_3> <SQUOTA_STRING_-_2> ;
# END
# END
<SQUOTA_STRING> ::=  39  <SQUOTA_STRING_-_1>  39  ;
# END
# LEXER: BQUOTA_STRING
# BEGIN LEXER FOR  BQUOTA_STRING and
# BEGIN LEXER FOR  BQUOTA_STRING *
<BQUOTA_STRING_-_1> ::= <BQUOTA_STRING_-_2> ;
<BQUOTA_STRING_-_2> ::= ;
# BEGIN LEXER FOR  BQUOTA_STRING and
# BEGIN LEXER FOR  BQUOTA_STRING or
# BEGIN LEXER FOR  BQUOTA_STRING and
# BEGIN LEXER FOR  BQUOTA_STRING .
<BQUOTA_STRING_-_4> ::= ' '  ;
<BQUOTA_STRING_-_4> ::= '!'  ;
<BQUOTA_STRING_-_4> ::= '"'  ;
<BQUOTA_STRING_-_4> ::= '#'  ;
<BQUOTA_STRING_-_4> ::= '$'  ;
<BQUOTA_STRING_-_4> ::= '%'  ;
<BQUOTA_STRING_-_4> ::= '&'  ;
<BQUOTA_STRING_-_4> ::=  39   ;
<BQUOTA_STRING_-_4> ::= '('  ;
<BQUOTA_STRING_-_4> ::= ')'  ;
<BQUOTA_STRING_-_4> ::= '*'  ;
<BQUOTA_STRING_-_4> ::= '+'  ;
<BQUOTA_STRING_-_4> ::= ','  ;
<BQUOTA_STRING_-_4> ::= '-'  ;
<BQUOTA_STRING_-_4> ::= '.'  ;
<BQUOTA_STRING_-_4> ::= '/'  ;
<BQUOTA_STRING_-_4> ::= '0'  ;
<BQUOTA_STRING_-_4> ::= '1'  ;
<BQUOTA_STRING_-_4> ::= '2'  ;
<BQUOTA_STRING_-_4> ::= '3'  ;
<BQUOTA_STRING_-_4> ::= '4'  ;
<BQUOTA_STRING_-_4> ::= '5'  ;
<BQUOTA_STRING_-_4> ::= '6'  ;
<BQUOTA_STRING_-_4> ::= '7'  ;
<BQUOTA_STRING_-_4> ::= '8'  ;
<BQUOTA_STRING_-_4> ::= '9'  ;
<BQUOTA_STRING_-_4> ::= ':'  ;
<BQUOTA_STRING_-_4> ::= ';'  ;
<BQUOTA_STRING_-_4> ::= '<'  ;
<BQUOTA_STRING_-_4> ::= '='  ;
<BQUOTA_STRING_-_4> ::= '>'  ;
<BQUOTA_STRING_-_4> ::= '?'  ;
<BQUOTA_STRING_-_4> ::= '@'  ;
<BQUOTA_STRING_-_4> ::= 'A'  ;
<BQUOTA_STRING_-_4> ::= 'B'  ;
<BQUOTA_STRING_-_4> ::= 'C'  ;
<BQUOTA_STRING_-_4> ::= 'D'  ;
<BQUOTA_STRING_-_4> ::= 'E'  ;
<BQUOTA_STRING_-_4> ::= 'F'  ;
<BQUOTA_STRING_-_4> ::= 'G'  ;
<BQUOTA_STRING_-_4> ::= 'H'  ;
<BQUOTA_STRING_-_4> ::= 'I'  ;
<BQUOTA_STRING_-_4> ::= 'J'  ;
<BQUOTA_STRING_-_4> ::= 'K'  ;
<BQUOTA_STRING_-_4> ::= 'L'  ;
<BQUOTA_STRING_-_4> ::= 'M'  ;
<BQUOTA_STRING_-_4> ::= 'N'  ;
<BQUOTA_STRING_-_4> ::= 'O'  ;
<BQUOTA_STRING_-_4> ::= 'P'  ;
<BQUOTA_STRING_-_4> ::= 'Q'  ;
<BQUOTA_STRING_-_4> ::= 'R'  ;
<BQUOTA_STRING_-_4> ::= 'S'  ;
<BQUOTA_STRING_-_4> ::= 'T'  ;
<BQUOTA_STRING_-_4> ::= 'U'  ;
<BQUOTA_STRING_-_4> ::= 'V'  ;
<BQUOTA_STRING_-_4> ::= 'W'  ;
<BQUOTA_STRING_-_4> ::= 'X'  ;
<BQUOTA_STRING_-_4> ::= 'Y'  ;
<BQUOTA_STRING_-_4> ::= 'Z'  ;
<BQUOTA_STRING_-_4> ::= '['  ;
<BQUOTA_STRING_-_4> ::= '\'  ;
<BQUOTA_STRING_-_4> ::= ']'  ;
<BQUOTA_STRING_-_4> ::= '^'  ;
<BQUOTA_STRING_-_4> ::= '_'  ;
<BQUOTA_STRING_-_4> ::= '`'  ;
<BQUOTA_STRING_-_4> ::= 'a'  ;
<BQUOTA_STRING_-_4> ::= 'b'  ;
<BQUOTA_STRING_-_4> ::= 'c'  ;
<BQUOTA_STRING_-_4> ::= 'd'  ;
<BQUOTA_STRING_-_4> ::= 'e'  ;
<BQUOTA_STRING_-_4> ::= 'f'  ;
<BQUOTA_STRING_-_4> ::= 'g'  ;
<BQUOTA_STRING_-_4> ::= 'h'  ;
<BQUOTA_STRING_-_4> ::= 'i'  ;
<BQUOTA_STRING_-_4> ::= 'j'  ;
<BQUOTA_STRING_-_4> ::= 'k'  ;
<BQUOTA_STRING_-_4> ::= 'l'  ;
<BQUOTA_STRING_-_4> ::= 'm'  ;
<BQUOTA_STRING_-_4> ::= 'n'  ;
<BQUOTA_STRING_-_4> ::= 'o'  ;
<BQUOTA_STRING_-_4> ::= 'p'  ;
<BQUOTA_STRING_-_4> ::= 'q'  ;
<BQUOTA_STRING_-_4> ::= 'r'  ;
<BQUOTA_STRING_-_4> ::= 's'  ;
<BQUOTA_STRING_-_4> ::= 't'  ;
<BQUOTA_STRING_-_4> ::= 'u'  ;
<BQUOTA_STRING_-_4> ::= 'v'  ;
<BQUOTA_STRING_-_4> ::= 'w'  ;
<BQUOTA_STRING_-_4> ::= 'x'  ;
<BQUOTA_STRING_-_4> ::= 'y'  ;
<BQUOTA_STRING_-_4> ::= 'z'  ;
<BQUOTA_STRING_-_4> ::= '{'  ;
<BQUOTA_STRING_-_4> ::= '|'  ;
<BQUOTA_STRING_-_4> ::= '}'  ;
<BQUOTA_STRING_-_4> ::= '~'  ;
# END
<BQUOTA_STRING_-_3> ::= '\' <BQUOTA_STRING_-_4> ;
# END
# BEGIN LEXER FOR  BQUOTA_STRING string
<BQUOTA_STRING_-_3> ::= '``' ;
# END
# BEGIN LEXER FOR  BQUOTA_STRING not
# BEGIN LEXER FOR  BQUOTA_STRING and
# BEGIN LEXER FOR  BQUOTA_STRING not
<BQUOTA_STRING_-_5> ::= ' ' ;
<BQUOTA_STRING_-_5> ::= '!' ;
<BQUOTA_STRING_-_5> ::= '"' ;
<BQUOTA_STRING_-_5> ::= '#' ;
<BQUOTA_STRING_-_5> ::= '$' ;
<BQUOTA_STRING_-_5> ::= '%' ;
<BQUOTA_STRING_-_5> ::= '&' ;
<BQUOTA_STRING_-_5> ::=  39  ;
<BQUOTA_STRING_-_5> ::= '(' ;
<BQUOTA_STRING_-_5> ::= ')' ;
<BQUOTA_STRING_-_5> ::= '*' ;
<BQUOTA_STRING_-_5> ::= '+' ;
<BQUOTA_STRING_-_5> ::= ',' ;
<BQUOTA_STRING_-_5> ::= '-' ;
<BQUOTA_STRING_-_5> ::= '.' ;
<BQUOTA_STRING_-_5> ::= '/' ;
<BQUOTA_STRING_-_5> ::= '0' ;
<BQUOTA_STRING_-_5> ::= '1' ;
<BQUOTA_STRING_-_5> ::= '2' ;
<BQUOTA_STRING_-_5> ::= '3' ;
<BQUOTA_STRING_-_5> ::= '4' ;
<BQUOTA_STRING_-_5> ::= '5' ;
<BQUOTA_STRING_-_5> ::= '6' ;
<BQUOTA_STRING_-_5> ::= '7' ;
<BQUOTA_STRING_-_5> ::= '8' ;
<BQUOTA_STRING_-_5> ::= '9' ;
<BQUOTA_STRING_-_5> ::= ':' ;
<BQUOTA_STRING_-_5> ::= ';' ;
<BQUOTA_STRING_-_5> ::= '<' ;
<BQUOTA_STRING_-_5> ::= '=' ;
<BQUOTA_STRING_-_5> ::= '>' ;
<BQUOTA_STRING_-_5> ::= '?' ;
<BQUOTA_STRING_-_5> ::= '@' ;
<BQUOTA_STRING_-_5> ::= 'A' ;
<BQUOTA_STRING_-_5> ::= 'B' ;
<BQUOTA_STRING_-_5> ::= 'C' ;
<BQUOTA_STRING_-_5> ::= 'D' ;
<BQUOTA_STRING_-_5> ::= 'E' ;
<BQUOTA_STRING_-_5> ::= 'F' ;
<BQUOTA_STRING_-_5> ::= 'G' ;
<BQUOTA_STRING_-_5> ::= 'H' ;
<BQUOTA_STRING_-_5> ::= 'I' ;
<BQUOTA_STRING_-_5> ::= 'J' ;
<BQUOTA_STRING_-_5> ::= 'K' ;
<BQUOTA_STRING_-_5> ::= 'L' ;
<BQUOTA_STRING_-_5> ::= 'M' ;
<BQUOTA_STRING_-_5> ::= 'N' ;
<BQUOTA_STRING_-_5> ::= 'O' ;
<BQUOTA_STRING_-_5> ::= 'P' ;
<BQUOTA_STRING_-_5> ::= 'Q' ;
<BQUOTA_STRING_-_5> ::= 'R' ;
<BQUOTA_STRING_-_5> ::= 'S' ;
<BQUOTA_STRING_-_5> ::= 'T' ;
<BQUOTA_STRING_-_5> ::= 'U' ;
<BQUOTA_STRING_-_5> ::= 'V' ;
<BQUOTA_STRING_-_5> ::= 'W' ;
<BQUOTA_STRING_-_5> ::= 'X' ;
<BQUOTA_STRING_-_5> ::= 'Y' ;
<BQUOTA_STRING_-_5> ::= 'Z' ;
<BQUOTA_STRING_-_5> ::= '[' ;
<BQUOTA_STRING_-_5> ::= '\' ;
<BQUOTA_STRING_-_5> ::= ']' ;
<BQUOTA_STRING_-_5> ::= '^' ;
<BQUOTA_STRING_-_5> ::= '_' ;
<BQUOTA_STRING_-_5> ::= 'a' ;
<BQUOTA_STRING_-_5> ::= 'b' ;
<BQUOTA_STRING_-_5> ::= 'c' ;
<BQUOTA_STRING_-_5> ::= 'd' ;
<BQUOTA_STRING_-_5> ::= 'e' ;
<BQUOTA_STRING_-_5> ::= 'f' ;
<BQUOTA_STRING_-_5> ::= 'g' ;
<BQUOTA_STRING_-_5> ::= 'h' ;
<BQUOTA_STRING_-_5> ::= 'i' ;
<BQUOTA_STRING_-_5> ::= 'j' ;
<BQUOTA_STRING_-_5> ::= 'k' ;
<BQUOTA_STRING_-_5> ::= 'l' ;
<BQUOTA_STRING_-_5> ::= 'm' ;
<BQUOTA_STRING_-_5> ::= 'n' ;
<BQUOTA_STRING_-_5> ::= 'o' ;
<BQUOTA_STRING_-_5> ::= 'p' ;
<BQUOTA_STRING_-_5> ::= 'q' ;
<BQUOTA_STRING_-_5> ::= 'r' ;
<BQUOTA_STRING_-_5> ::= 's' ;
<BQUOTA_STRING_-_5> ::= 't' ;
<BQUOTA_STRING_-_5> ::= 'u' ;
<BQUOTA_STRING_-_5> ::= 'v' ;
<BQUOTA_STRING_-_5> ::= 'w' ;
<BQUOTA_STRING_-_5> ::= 'x' ;
<BQUOTA_STRING_-_5> ::= 'y' ;
<BQUOTA_STRING_-_5> ::= 'z' ;
<BQUOTA_STRING_-_5> ::= '{' ;
<BQUOTA_STRING_-_5> ::= '|' ;
<BQUOTA_STRING_-_5> ::= '}' ;
<BQUOTA_STRING_-_5> ::= '~' ;
# END
# BEGIN LEXER FOR  BQUOTA_STRING not
<BQUOTA_STRING_-_6> ::= ' ' ;
<BQUOTA_STRING_-_6> ::= '!' ;
<BQUOTA_STRING_-_6> ::= '"' ;
<BQUOTA_STRING_-_6> ::= '#' ;
<BQUOTA_STRING_-_6> ::= '$' ;
<BQUOTA_STRING_-_6> ::= '%' ;
<BQUOTA_STRING_-_6> ::= '&' ;
<BQUOTA_STRING_-_6> ::=  39  ;
<BQUOTA_STRING_-_6> ::= '(' ;
<BQUOTA_STRING_-_6> ::= ')' ;
<BQUOTA_STRING_-_6> ::= '*' ;
<BQUOTA_STRING_-_6> ::= '+' ;
<BQUOTA_STRING_-_6> ::= ',' ;
<BQUOTA_STRING_-_6> ::= '-' ;
<BQUOTA_STRING_-_6> ::= '.' ;
<BQUOTA_STRING_-_6> ::= '/' ;
<BQUOTA_STRING_-_6> ::= '0' ;
<BQUOTA_STRING_-_6> ::= '1' ;
<BQUOTA_STRING_-_6> ::= '2' ;
<BQUOTA_STRING_-_6> ::= '3' ;
<BQUOTA_STRING_-_6> ::= '4' ;
<BQUOTA_STRING_-_6> ::= '5' ;
<BQUOTA_STRING_-_6> ::= '6' ;
<BQUOTA_STRING_-_6> ::= '7' ;
<BQUOTA_STRING_-_6> ::= '8' ;
<BQUOTA_STRING_-_6> ::= '9' ;
<BQUOTA_STRING_-_6> ::= ':' ;
<BQUOTA_STRING_-_6> ::= ';' ;
<BQUOTA_STRING_-_6> ::= '<' ;
<BQUOTA_STRING_-_6> ::= '=' ;
<BQUOTA_STRING_-_6> ::= '>' ;
<BQUOTA_STRING_-_6> ::= '?' ;
<BQUOTA_STRING_-_6> ::= '@' ;
<BQUOTA_STRING_-_6> ::= 'A' ;
<BQUOTA_STRING_-_6> ::= 'B' ;
<BQUOTA_STRING_-_6> ::= 'C' ;
<BQUOTA_STRING_-_6> ::= 'D' ;
<BQUOTA_STRING_-_6> ::= 'E' ;
<BQUOTA_STRING_-_6> ::= 'F' ;
<BQUOTA_STRING_-_6> ::= 'G' ;
<BQUOTA_STRING_-_6> ::= 'H' ;
<BQUOTA_STRING_-_6> ::= 'I' ;
<BQUOTA_STRING_-_6> ::= 'J' ;
<BQUOTA_STRING_-_6> ::= 'K' ;
<BQUOTA_STRING_-_6> ::= 'L' ;
<BQUOTA_STRING_-_6> ::= 'M' ;
<BQUOTA_STRING_-_6> ::= 'N' ;
<BQUOTA_STRING_-_6> ::= 'O' ;
<BQUOTA_STRING_-_6> ::= 'P' ;
<BQUOTA_STRING_-_6> ::= 'Q' ;
<BQUOTA_STRING_-_6> ::= 'R' ;
<BQUOTA_STRING_-_6> ::= 'S' ;
<BQUOTA_STRING_-_6> ::= 'T' ;
<BQUOTA_STRING_-_6> ::= 'U' ;
<BQUOTA_STRING_-_6> ::= 'V' ;
<BQUOTA_STRING_-_6> ::= 'W' ;
<BQUOTA_STRING_-_6> ::= 'X' ;
<BQUOTA_STRING_-_6> ::= 'Y' ;
<BQUOTA_STRING_-_6> ::= 'Z' ;
<BQUOTA_STRING_-_6> ::= '[' ;
<BQUOTA_STRING_-_6> ::= ']' ;
<BQUOTA_STRING_-_6> ::= '^' ;
<BQUOTA_STRING_-_6> ::= '_' ;
<BQUOTA_STRING_-_6> ::= '`' ;
<BQUOTA_STRING_-_6> ::= 'a' ;
<BQUOTA_STRING_-_6> ::= 'b' ;
<BQUOTA_STRING_-_6> ::= 'c' ;
<BQUOTA_STRING_-_6> ::= 'd' ;
<BQUOTA_STRING_-_6> ::= 'e' ;
<BQUOTA_STRING_-_6> ::= 'f' ;
<BQUOTA_STRING_-_6> ::= 'g' ;
<BQUOTA_STRING_-_6> ::= 'h' ;
<BQUOTA_STRING_-_6> ::= 'i' ;
<BQUOTA_STRING_-_6> ::= 'j' ;
<BQUOTA_STRING_-_6> ::= 'k' ;
<BQUOTA_STRING_-_6> ::= 'l' ;
<BQUOTA_STRING_-_6> ::= 'm' ;
<BQUOTA_STRING_-_6> ::= 'n' ;
<BQUOTA_STRING_-_6> ::= 'o' ;
<BQUOTA_STRING_-_6> ::= 'p' ;
<BQUOTA_STRING_-_6> ::= 'q' ;
<BQUOTA_STRING_-_6> ::= 'r' ;
<BQUOTA_STRING_-_6> ::= 's' ;
<BQUOTA_STRING_-_6> ::= 't' ;
<BQUOTA_STRING_-_6> ::= 'u' ;
<BQUOTA_STRING_-_6> ::= 'v' ;
<BQUOTA_STRING_-_6> ::= 'w' ;
<BQUOTA_STRING_-_6> ::= 'x' ;
<BQUOTA_STRING_-_6> ::= 'y' ;
<BQUOTA_STRING_-_6> ::= 'z' ;
<BQUOTA_STRING_-_6> ::= '{' ;
<BQUOTA_STRING_-_6> ::= '|' ;
<BQUOTA_STRING_-_6> ::= '}' ;
<BQUOTA_STRING_-_6> ::= '~' ;
# END
<BQUOTA_STRING_-_3> ::= <BQUOTA_STRING_-_5> <BQUOTA_STRING_-_6> ;
# END
# END
# END
<BQUOTA_STRING_-_2> ::= <BQUOTA_STRING_-_3> <BQUOTA_STRING_-_2> ;
# END
# END
<BQUOTA_STRING> ::= '`' <BQUOTA_STRING_-_1> '`' ;
# END
# LEXER: HEX_DIGIT
# BEGIN LEXER FOR  HEX_DIGIT char_set
<HEX_DIGIT> ::= '0' ;
<HEX_DIGIT> ::= '1' ;
<HEX_DIGIT> ::= '2' ;
<HEX_DIGIT> ::= '3' ;
<HEX_DIGIT> ::= '4' ;
<HEX_DIGIT> ::= '5' ;
<HEX_DIGIT> ::= '6' ;
<HEX_DIGIT> ::= '7' ;
<HEX_DIGIT> ::= '8' ;
<HEX_DIGIT> ::= '9' ;
<HEX_DIGIT> ::= 'A' ;
<HEX_DIGIT> ::= 'B' ;
<HEX_DIGIT> ::= 'C' ;
<HEX_DIGIT> ::= 'D' ;
<HEX_DIGIT> ::= 'E' ;
<HEX_DIGIT> ::= 'F' ;
# END
# LEXER: DEC_DIGIT
# BEGIN LEXER FOR  DEC_DIGIT char_set
<DEC_DIGIT> ::= '0' ;
<DEC_DIGIT> ::= '1' ;
<DEC_DIGIT> ::= '2' ;
<DEC_DIGIT> ::= '3' ;
<DEC_DIGIT> ::= '4' ;
<DEC_DIGIT> ::= '5' ;
<DEC_DIGIT> ::= '6' ;
<DEC_DIGIT> ::= '7' ;
<DEC_DIGIT> ::= '8' ;
<DEC_DIGIT> ::= '9' ;
# END
# LEXER: BIT_STRING_L
# BEGIN LEXER FOR  BIT_STRING_L and
# BEGIN LEXER FOR  BIT_STRING_L +
<BIT_STRING_L_-_1> ::= <BIT_STRING_L_-_2> ;
<BIT_STRING_L_-_2> ::= <BIT_STRING_L_-_3> ;
<BIT_STRING_L_-_2> ::= <BIT_STRING_L_-_3> <BIT_STRING_L_-_2> ;
# BEGIN LEXER FOR  BIT_STRING_L char_set
<BIT_STRING_L_-_3> ::= '0' ;
<BIT_STRING_L_-_3> ::= '1' ;
# END
# END
<BIT_STRING_L> ::= 'B'  39  <BIT_STRING_L_-_1>  39  ;
# END
# LEXER: ERROR_RECONGNIGION
# BEGIN LEXER FOR  ERROR_RECONGNIGION .
<ERROR_RECONGNIGION> ::= ' '  ' ' ;
<ERROR_RECONGNIGION> ::= '!'  ' ' ;
<ERROR_RECONGNIGION> ::= '"'  ' ' ;
<ERROR_RECONGNIGION> ::= '#'  ' ' ;
<ERROR_RECONGNIGION> ::= '$'  ' ' ;
<ERROR_RECONGNIGION> ::= '%'  ' ' ;
<ERROR_RECONGNIGION> ::= '&'  ' ' ;
<ERROR_RECONGNIGION> ::=  39   ' ' ;
<ERROR_RECONGNIGION> ::= '('  ' ' ;
<ERROR_RECONGNIGION> ::= ')'  ' ' ;
<ERROR_RECONGNIGION> ::= '*'  ' ' ;
<ERROR_RECONGNIGION> ::= '+'  ' ' ;
<ERROR_RECONGNIGION> ::= ','  ' ' ;
<ERROR_RECONGNIGION> ::= '-'  ' ' ;
<ERROR_RECONGNIGION> ::= '.'  ' ' ;
<ERROR_RECONGNIGION> ::= '/'  ' ' ;
<ERROR_RECONGNIGION> ::= '0'  ' ' ;
<ERROR_RECONGNIGION> ::= '1'  ' ' ;
<ERROR_RECONGNIGION> ::= '2'  ' ' ;
<ERROR_RECONGNIGION> ::= '3'  ' ' ;
<ERROR_RECONGNIGION> ::= '4'  ' ' ;
<ERROR_RECONGNIGION> ::= '5'  ' ' ;
<ERROR_RECONGNIGION> ::= '6'  ' ' ;
<ERROR_RECONGNIGION> ::= '7'  ' ' ;
<ERROR_RECONGNIGION> ::= '8'  ' ' ;
<ERROR_RECONGNIGION> ::= '9'  ' ' ;
<ERROR_RECONGNIGION> ::= ':'  ' ' ;
<ERROR_RECONGNIGION> ::= ';'  ' ' ;
<ERROR_RECONGNIGION> ::= '<'  ' ' ;
<ERROR_RECONGNIGION> ::= '='  ' ' ;
<ERROR_RECONGNIGION> ::= '>'  ' ' ;
<ERROR_RECONGNIGION> ::= '?'  ' ' ;
<ERROR_RECONGNIGION> ::= '@'  ' ' ;
<ERROR_RECONGNIGION> ::= 'A'  ' ' ;
<ERROR_RECONGNIGION> ::= 'B'  ' ' ;
<ERROR_RECONGNIGION> ::= 'C'  ' ' ;
<ERROR_RECONGNIGION> ::= 'D'  ' ' ;
<ERROR_RECONGNIGION> ::= 'E'  ' ' ;
<ERROR_RECONGNIGION> ::= 'F'  ' ' ;
<ERROR_RECONGNIGION> ::= 'G'  ' ' ;
<ERROR_RECONGNIGION> ::= 'H'  ' ' ;
<ERROR_RECONGNIGION> ::= 'I'  ' ' ;
<ERROR_RECONGNIGION> ::= 'J'  ' ' ;
<ERROR_RECONGNIGION> ::= 'K'  ' ' ;
<ERROR_RECONGNIGION> ::= 'L'  ' ' ;
<ERROR_RECONGNIGION> ::= 'M'  ' ' ;
<ERROR_RECONGNIGION> ::= 'N'  ' ' ;
<ERROR_RECONGNIGION> ::= 'O'  ' ' ;
<ERROR_RECONGNIGION> ::= 'P'  ' ' ;
<ERROR_RECONGNIGION> ::= 'Q'  ' ' ;
<ERROR_RECONGNIGION> ::= 'R'  ' ' ;
<ERROR_RECONGNIGION> ::= 'S'  ' ' ;
<ERROR_RECONGNIGION> ::= 'T'  ' ' ;
<ERROR_RECONGNIGION> ::= 'U'  ' ' ;
<ERROR_RECONGNIGION> ::= 'V'  ' ' ;
<ERROR_RECONGNIGION> ::= 'W'  ' ' ;
<ERROR_RECONGNIGION> ::= 'X'  ' ' ;
<ERROR_RECONGNIGION> ::= 'Y'  ' ' ;
<ERROR_RECONGNIGION> ::= 'Z'  ' ' ;
<ERROR_RECONGNIGION> ::= '['  ' ' ;
<ERROR_RECONGNIGION> ::= '\'  ' ' ;
<ERROR_RECONGNIGION> ::= ']'  ' ' ;
<ERROR_RECONGNIGION> ::= '^'  ' ' ;
<ERROR_RECONGNIGION> ::= '_'  ' ' ;
<ERROR_RECONGNIGION> ::= '`'  ' ' ;
<ERROR_RECONGNIGION> ::= 'a'  ' ' ;
<ERROR_RECONGNIGION> ::= 'b'  ' ' ;
<ERROR_RECONGNIGION> ::= 'c'  ' ' ;
<ERROR_RECONGNIGION> ::= 'd'  ' ' ;
<ERROR_RECONGNIGION> ::= 'e'  ' ' ;
<ERROR_RECONGNIGION> ::= 'f'  ' ' ;
<ERROR_RECONGNIGION> ::= 'g'  ' ' ;
<ERROR_RECONGNIGION> ::= 'h'  ' ' ;
<ERROR_RECONGNIGION> ::= 'i'  ' ' ;
<ERROR_RECONGNIGION> ::= 'j'  ' ' ;
<ERROR_RECONGNIGION> ::= 'k'  ' ' ;
<ERROR_RECONGNIGION> ::= 'l'  ' ' ;
<ERROR_RECONGNIGION> ::= 'm'  ' ' ;
<ERROR_RECONGNIGION> ::= 'n'  ' ' ;
<ERROR_RECONGNIGION> ::= 'o'  ' ' ;
<ERROR_RECONGNIGION> ::= 'p'  ' ' ;
<ERROR_RECONGNIGION> ::= 'q'  ' ' ;
<ERROR_RECONGNIGION> ::= 'r'  ' ' ;
<ERROR_RECONGNIGION> ::= 's'  ' ' ;
<ERROR_RECONGNIGION> ::= 't'  ' ' ;
<ERROR_RECONGNIGION> ::= 'u'  ' ' ;
<ERROR_RECONGNIGION> ::= 'v'  ' ' ;
<ERROR_RECONGNIGION> ::= 'w'  ' ' ;
<ERROR_RECONGNIGION> ::= 'x'  ' ' ;
<ERROR_RECONGNIGION> ::= 'y'  ' ' ;
<ERROR_RECONGNIGION> ::= 'z'  ' ' ;
<ERROR_RECONGNIGION> ::= '{'  ' ' ;
<ERROR_RECONGNIGION> ::= '|'  ' ' ;
<ERROR_RECONGNIGION> ::= '}'  ' ' ;
<ERROR_RECONGNIGION> ::= '~'  ' ' ;
# END
